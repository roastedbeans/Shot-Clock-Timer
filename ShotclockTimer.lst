

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Mon Feb 27 18:39:59 2023

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	inittext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	intentry,global,class=CODE,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	dabs	1,0x7E,2
    29  0000                     	;# 
    30  0001                     	;# 
    31  0002                     	;# 
    32  0003                     	;# 
    33  0004                     	;# 
    34  0005                     	;# 
    35  0006                     	;# 
    36  0007                     	;# 
    37  0008                     	;# 
    38  0009                     	;# 
    39  000A                     	;# 
    40  000B                     	;# 
    41  000C                     	;# 
    42  000D                     	;# 
    43  000E                     	;# 
    44  000E                     	;# 
    45  000F                     	;# 
    46  0010                     	;# 
    47  0011                     	;# 
    48  0012                     	;# 
    49  0013                     	;# 
    50  0014                     	;# 
    51  0015                     	;# 
    52  0015                     	;# 
    53  0016                     	;# 
    54  0017                     	;# 
    55  0018                     	;# 
    56  0019                     	;# 
    57  001A                     	;# 
    58  001B                     	;# 
    59  001B                     	;# 
    60  001C                     	;# 
    61  001D                     	;# 
    62  001E                     	;# 
    63  001F                     	;# 
    64  0081                     	;# 
    65  0085                     	;# 
    66  0086                     	;# 
    67  0087                     	;# 
    68  0088                     	;# 
    69  0089                     	;# 
    70  008C                     	;# 
    71  008D                     	;# 
    72  008E                     	;# 
    73  0091                     	;# 
    74  0092                     	;# 
    75  0093                     	;# 
    76  0094                     	;# 
    77  0098                     	;# 
    78  0099                     	;# 
    79  009C                     	;# 
    80  009D                     	;# 
    81  009E                     	;# 
    82  009F                     	;# 
    83  010C                     	;# 
    84  010D                     	;# 
    85  010E                     	;# 
    86  010F                     	;# 
    87  018C                     	;# 
    88  018D                     	;# 
    89                           
    90                           	psect	idataBANK0
    91  03AF                     __pidataBANK0:	
    92                           
    93                           ;initializer for _seconds
    94  03AF  3418               	retlw	24
    95  03B0  3400               	retlw	0
    96                           
    97                           	psect	idataBANK1
    98  02D3                     __pidataBANK1:	
    99                           
   100                           ;initializer for dispHeader@F1179
   101  02D3  3453               	retlw	83
   102  02D4  3468               	retlw	104
   103  02D5  346F               	retlw	111
   104  02D6  3474               	retlw	116
   105  02D7  3420               	retlw	32
   106  02D8  3443               	retlw	67
   107  02D9  346C               	retlw	108
   108  02DA  346F               	retlw	111
   109  02DB  3463               	retlw	99
   110  02DC  346B               	retlw	107
   111  02DD  3420               	retlw	32
   112  02DE  3454               	retlw	84
   113  02DF  3469               	retlw	105
   114  02E0  346D               	retlw	109
   115  02E1  3465               	retlw	101
   116  02E2  3472               	retlw	114
   117  02E3  3400               	retlw	0
   118  02E4  3400               	retlw	0
   119  02E5  3400               	retlw	0
   120  02E6  3400               	retlw	0
   121                           
   122                           ;initializer for dispHeader@F1181
   123  02E7  3432               	retlw	50
   124  02E8  3434               	retlw	52
   125  02E9  3400               	retlw	0
   126  02EA  3400               	retlw	0
   127  02EB  3400               	retlw	0
   128  02EC  3400               	retlw	0
   129  02ED  3400               	retlw	0
   130  02EE  3400               	retlw	0
   131  02EF  3400               	retlw	0
   132  02F0  3400               	retlw	0
   133  02F1  3400               	retlw	0
   134  02F2  3400               	retlw	0
   135  02F3  3400               	retlw	0
   136  02F4  3400               	retlw	0
   137  02F5  3400               	retlw	0
   138  02F6  3400               	retlw	0
   139  02F7  3400               	retlw	0
   140  02F8  3400               	retlw	0
   141  02F9  3400               	retlw	0
   142  02FA  3400               	retlw	0
   143  0007                     _PORTC	set	7
   144  0008                     _PORTD	set	8
   145  005F                     _GIE	set	95
   146  005C                     _INTE	set	92
   147  0059                     _INTF	set	89
   148  0028                     _RA0	set	40
   149  0029                     _RA1	set	41
   150  002A                     _RA2	set	42
   151  0030                     _RB0	set	48
   152  005D                     _T0IE	set	93
   153  005A                     _T0IF	set	90
   154  009F                     _ADCON1	set	159
   155  009C                     _CMCON	set	156
   156  0081                     _OPTION_REG	set	129
   157  0085                     _TRISA	set	133
   158  0086                     _TRISB	set	134
   159  0087                     _TRISC	set	135
   160  0088                     _TRISD	set	136
   161                           
   162                           ; #config settings
   163  0000                     
   164                           	psect	cinit
   165  0015                     start_initialization:	
   166  0015                     __initialization:	
   167                           
   168                           ; Clear objects allocated to COMMON
   169  0015  01F6               	clrf	__pbssCOMMON& (0+127)
   170  0016  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   171                           
   172                           ; Clear objects allocated to BANK0
   173  0017  01D6               	clrf	__pbssBANK0& (0+127)
   174  0018  01D7               	clrf	(__pbssBANK0+1)& (0+127)
   175  0019  01D8               	clrf	(__pbssBANK0+2)& (0+127)
   176  001A  01D9               	clrf	(__pbssBANK0+3)& (0+127)
   177  001B  01DA               	clrf	(__pbssBANK0+4)& (0+127)
   178  001C  01DB               	clrf	(__pbssBANK0+5)& (0+127)
   179  001D  01DC               	clrf	(__pbssBANK0+6)& (0+127)
   180  001E  01DD               	clrf	(__pbssBANK0+7)& (0+127)
   181  001F  01DE               	clrf	(__pbssBANK0+8)& (0+127)
   182  0020  01DF               	clrf	(__pbssBANK0+9)& (0+127)
   183  0021  01E0               	clrf	(__pbssBANK0+10)& (0+127)
   184  0022  01E1               	clrf	(__pbssBANK0+11)& (0+127)
   185                           
   186                           ; Initialize objects allocated to BANK1
   187  0023  1383               	bcf	3,7	;select IRP bank0
   188  0024  30C8               	movlw	low (__pdataBANK1+40)
   189  0025  00FD               	movwf	btemp+-1
   190  0026  3002               	movlw	high __pidataBANK1
   191  0027  00FE               	movwf	btemp
   192  0028  30D3               	movlw	low __pidataBANK1
   193  0029  00FF               	movwf	btemp+1
   194  002A  30A0               	movlw	low __pdataBANK1
   195  002B  0084               	movwf	4
   196  002C  120A  118A  2391  120A  118A  	fcall	init_ram0
   197                           
   198                           ; Initialize objects allocated to BANK0
   199  0031  120A  118A  23AF  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   200  0036  00E2               	movwf	__pdataBANK0& (0+127)
   201  0037  120A  118A  23B0   	fcall	__pidataBANK0+1	;fetch initializer
   202  003A  00E3               	movwf	(__pdataBANK0+1)& (0+127)
   203  003B                     end_of_initialization:	
   204                           ;End of C runtime variable initialization code
   205                           
   206  003B                     __end_of__initialization:	
   207  003B  0183               	clrf	3
   208  003C  120A  118A  2B23   	ljmp	_main	;jump to C main() function
   209                           
   210                           	psect	bssCOMMON
   211  0076                     __pbssCOMMON:	
   212  0076                     _count_flag:	
   213  0076                     	ds	2
   214                           
   215                           	psect	bssBANK0
   216  0056                     __pbssBANK0:	
   217  0056                     _dataRead:	
   218  0056                     	ds	2
   219  0058                     _dispMin:	
   220  0058                     	ds	2
   221  005A                     _dispSec:	
   222  005A                     	ds	2
   223  005C                     _flagPause:	
   224  005C                     	ds	2
   225  005E                     _flagStart:	
   226  005E                     	ds	2
   227  0060                     _minutes:	
   228  0060                     	ds	2
   229                           
   230                           	psect	dataBANK0
   231  0062                     __pdataBANK0:	
   232  0062                     _seconds:	
   233  0062                     	ds	2
   234                           
   235                           	psect	dataBANK1
   236  00A0                     __pdataBANK1:	
   237  00A0                     dispHeader@F1179:	
   238  00A0                     	ds	20
   239  00B4                     dispHeader@F1181:	
   240  00B4                     	ds	20
   241                           
   242                           	psect	inittext
   243  038D                     init_fetch0:	
   244                           ;	Called with low address in FSR and high address in W
   245                           
   246  038D  087E               	movf	126,w
   247  038E  008A               	movwf	10
   248  038F  087F               	movf	127,w
   249  0390  0082               	movwf	2
   250  0391                     init_ram0:	
   251                           ;Called with:
   252                           ;	high address of idata address in btemp 
   253                           ;	low address of idata address in btemp+1 
   254                           ;	low address of data in FSR
   255                           ;	high address + 1 of data in btemp-1
   256                           
   257  0391  238D  120A  118A   	fcall	init_fetch0
   258  0394  0080               	movwf	0
   259  0395  0A84               	incf	4,f
   260  0396  0804               	movf	4,w
   261  0397  067D               	xorwf	125,w
   262  0398  1903               	btfsc	3,2
   263  0399  3400               	retlw	0
   264  039A  0AFF               	incf	127,f
   265  039B  1903               	btfsc	3,2
   266  039C  0AFE               	incf	126,f
   267  039D  2B91               	goto	init_ram0
   268                           
   269                           	psect	cstackCOMMON
   270  0070                     __pcstackCOMMON:	
   271  0070                     ?_dispHeader:	
   272  0070                     ?_dispLCD:	
   273                           ; 0 bytes @ 0x0
   274                           
   275  0070                     ?_instCtrl:	
   276                           ; 0 bytes @ 0x0
   277                           
   278  0070                     ?_dataCtrl:	
   279                           ; 0 bytes @ 0x0
   280                           
   281  0070                     ?_dispSTR:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  0070                     ?_toogleFlag:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  0070                     ??_toogleFlag:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  0070                     ?_main:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  0070                     ?_beginCount:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0070                     ?_initLCD:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0070                     ?_ISR:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  0070                     ??_ISR:	
   303                           ; 0 bytes @ 0x0
   304                           
   305                           
   306                           ; 0 bytes @ 0x0
   307  0070                     	ds	6
   308  0076                     ??_dispLCD:	
   309  0076                     ??_instCtrl:	
   310                           ; 0 bytes @ 0x6
   311                           
   312  0076                     ??_dataCtrl:	
   313                           ; 0 bytes @ 0x6
   314                           
   315  0076                     ??_main:	
   316                           ; 0 bytes @ 0x6
   317                           
   318  0076                     ??_beginCount:	
   319                           ; 0 bytes @ 0x6
   320                           
   321  0076                     ??_initLCD:	
   322                           ; 0 bytes @ 0x6
   323                           
   324                           
   325                           	psect	cstackBANK0
   326  0020                     __pcstackBANK0:	
   327                           ; 0 bytes @ 0x6
   328                           
   329  0020                     ?_delay:	
   330  0020                     ?___awdiv:	
   331                           ; 0 bytes @ 0x0
   332                           
   333  0020                     ?___awmod:	
   334                           ; 2 bytes @ 0x0
   335                           
   336  0020                     delay@timer:	
   337                           ; 2 bytes @ 0x0
   338                           
   339  0020                     ___awdiv@divisor:	
   340                           ; 2 bytes @ 0x0
   341                           
   342  0020                     ___awmod@divisor:	
   343                           ; 2 bytes @ 0x0
   344                           
   345                           
   346                           ; 2 bytes @ 0x0
   347  0020                     	ds	2
   348  0022                     ??_delay:	
   349  0022                     ___awdiv@dividend:	
   350                           ; 0 bytes @ 0x2
   351                           
   352  0022                     ___awmod@dividend:	
   353                           ; 2 bytes @ 0x2
   354                           
   355                           
   356                           ; 2 bytes @ 0x2
   357  0022                     	ds	1
   358  0023                     instCtrl@INST:	
   359  0023                     dataCtrl@DATA:	
   360                           ; 1 bytes @ 0x3
   361                           
   362                           
   363                           ; 1 bytes @ 0x3
   364  0023                     	ds	1
   365  0024                     ??_dispSTR:	
   366  0024                     ??___awdiv:	
   367                           ; 0 bytes @ 0x4
   368                           
   369  0024                     ??___awmod:	
   370                           ; 0 bytes @ 0x4
   371                           
   372                           
   373                           ; 0 bytes @ 0x4
   374  0024                     	ds	1
   375  0025                     ___awdiv@counter:	
   376  0025                     ___awmod@counter:	
   377                           ; 1 bytes @ 0x5
   378                           
   379  0025                     dispSTR@i:	
   380                           ; 1 bytes @ 0x5
   381                           
   382                           
   383                           ; 2 bytes @ 0x5
   384  0025                     	ds	1
   385  0026                     ___awdiv@sign:	
   386  0026                     ___awmod@sign:	
   387                           ; 1 bytes @ 0x6
   388                           
   389                           
   390                           ; 1 bytes @ 0x6
   391  0026                     	ds	1
   392  0027                     dispSTR@STR:	
   393  0027                     ___awdiv@quotient:	
   394                           ; 1 bytes @ 0x7
   395                           
   396                           
   397                           ; 2 bytes @ 0x7
   398  0027                     	ds	1
   399  0028                     ??_dispHeader:	
   400                           
   401                           ; 0 bytes @ 0x8
   402  0028                     	ds	1
   403  0029                     beginCount@secLSB:	
   404                           
   405                           ; 2 bytes @ 0x9
   406  0029                     	ds	2
   407  002B                     beginCount@secMSB:	
   408                           
   409                           ; 2 bytes @ 0xB
   410  002B                     	ds	1
   411  002C                     dispHeader@header:	
   412                           
   413                           ; 20 bytes @ 0xC
   414  002C                     	ds	20
   415  0040                     dispHeader@header2:	
   416                           
   417                           ; 20 bytes @ 0x20
   418  0040                     	ds	20
   419  0054                     dispLCD@DATA:	
   420                           
   421                           ; 2 bytes @ 0x34
   422  0054                     	ds	2
   423                           
   424                           	psect	maintext
   425  0323                     __pmaintext:	
   426 ;;
   427 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   428 ;;
   429 ;; *************** function _main *****************
   430 ;; Defined at:
   431 ;;		line 31 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   432 ;; Parameters:    Size  Location     Type
   433 ;;		None
   434 ;; Auto vars:     Size  Location     Type
   435 ;;		None
   436 ;; Return value:  Size  Location     Type
   437 ;;		None               void
   438 ;; Registers used:
   439 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   440 ;; Tracked objects:
   441 ;;		On entry : 17F/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   445 ;;      Params:         0       0       0       0       0
   446 ;;      Locals:         0       0       0       0       0
   447 ;;      Temps:          0       0       0       0       0
   448 ;;      Totals:         0       0       0       0       0
   449 ;;Total ram usage:        0 bytes
   450 ;; Hardware stack levels required when called:    7
   451 ;; This function calls:
   452 ;;		_dispHeader
   453 ;;		_dispLCD
   454 ;; This function is called by:
   455 ;;		Startup code after reset
   456 ;; This function uses a non-reentrant model
   457 ;;
   458                           
   459                           
   460                           ;psect for function _main
   461  0323                     _main:	
   462                           
   463                           ;ShotclockTimer.c: 33: OPTION_REG = 0x43;
   464                           
   465                           ;incstack = 0
   466                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   467  0323  3043               	movlw	67
   468  0324  1683               	bsf	3,5	;RP0=1, select bank1
   469  0325  1303               	bcf	3,6	;RP1=0, select bank1
   470  0326  0081               	movwf	1	;volatile
   471                           
   472                           ;ShotclockTimer.c: 34: INTE = 1;
   473  0327  160B               	bsf	11,4	;volatile
   474                           
   475                           ;ShotclockTimer.c: 35: INTF = 0;
   476  0328  108B               	bcf	11,1	;volatile
   477                           
   478                           ;ShotclockTimer.c: 36: T0IE = 1;
   479  0329  168B               	bsf	11,5	;volatile
   480                           
   481                           ;ShotclockTimer.c: 37: T0IF = 0;
   482  032A  110B               	bcf	11,2	;volatile
   483                           
   484                           ;ShotclockTimer.c: 38: GIE = 1;
   485  032B  178B               	bsf	11,7	;volatile
   486                           
   487                           ;ShotclockTimer.c: 40: ADCON1 = 0x06;
   488  032C  3006               	movlw	6
   489  032D  009F               	movwf	31	;volatile
   490                           
   491                           ;ShotclockTimer.c: 41: CMCON = 0x07;
   492  032E  3007               	movlw	7
   493  032F  009C               	movwf	28	;volatile
   494                           
   495                           ;ShotclockTimer.c: 42: TRISA = 0x00;
   496  0330  0185               	clrf	5	;volatile
   497                           
   498                           ;ShotclockTimer.c: 43: TRISB = 0x01;
   499  0331  3001               	movlw	1
   500  0332  0086               	movwf	6	;volatile
   501                           
   502                           ;ShotclockTimer.c: 44: TRISC = 0x00;
   503  0333  0187               	clrf	7	;volatile
   504                           
   505                           ;ShotclockTimer.c: 45: TRISD = 0x0F;
   506  0334  300F               	movlw	15
   507  0335  0088               	movwf	8	;volatile
   508                           
   509                           ;ShotclockTimer.c: 47: dispHeader();
   510  0336  120A  118A  222F  120A  118A  	fcall	_dispHeader
   511  033B                     l1372:	
   512                           ;ShotclockTimer.c: 49: while(1)
   513                           
   514                           
   515                           ;ShotclockTimer.c: 50: {
   516                           ;ShotclockTimer.c: 51: if(RB0 == 1)
   517  033B  1283               	bcf	3,5	;RP0=0, select bank0
   518  033C  1303               	bcf	3,6	;RP1=0, select bank0
   519  033D  1C06               	btfss	6,0	;volatile
   520  033E  2B3B               	goto	l1372
   521                           
   522                           ;ShotclockTimer.c: 52: dispLCD();
   523  033F  120A  118A  20ED  120A  118A  	fcall	_dispLCD
   524  0344  2B3B               	goto	l1372
   525  0345                     __end_of_main:	
   526                           
   527                           	psect	text1
   528  00ED                     __ptext1:	
   529 ;; *************** function _dispLCD *****************
   530 ;; Defined at:
   531 ;;		line 121 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   532 ;; Parameters:    Size  Location     Type
   533 ;;		None
   534 ;; Auto vars:     Size  Location     Type
   535 ;;  DATA            2   52[BANK0 ] int 
   536 ;; Return value:  Size  Location     Type
   537 ;;		None               void
   538 ;; Registers used:
   539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   540 ;; Tracked objects:
   541 ;;		On entry : 0/0
   542 ;;		On exit  : 0/0
   543 ;;		Unchanged: 0/0
   544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   545 ;;      Params:         0       0       0       0       0
   546 ;;      Locals:         0       2       0       0       0
   547 ;;      Temps:          0       0       0       0       0
   548 ;;      Totals:         0       2       0       0       0
   549 ;;Total ram usage:        2 bytes
   550 ;; Hardware stack levels used:    1
   551 ;; Hardware stack levels required when called:    6
   552 ;; This function calls:
   553 ;;		_beginCount
   554 ;;		_dispHeader
   555 ;; This function is called by:
   556 ;;		_main
   557 ;; This function uses a non-reentrant model
   558 ;;
   559                           
   560                           
   561                           ;psect for function _dispLCD
   562  00ED                     _dispLCD:	
   563                           
   564                           ;ShotclockTimer.c: 123: int DATA = dataRead;
   565                           
   566                           ;incstack = 0
   567                           ; Regs used in _dispLCD: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   568  00ED  1283               	bcf	3,5	;RP0=0, select bank0
   569  00EE  1303               	bcf	3,6	;RP1=0, select bank0
   570  00EF  0857               	movf	_dataRead+1,w
   571  00F0  01D5               	clrf	dispLCD@DATA+1
   572  00F1  07D5               	addwf	dispLCD@DATA+1,f
   573  00F2  0856               	movf	_dataRead,w
   574  00F3  01D4               	clrf	dispLCD@DATA
   575  00F4  07D4               	addwf	dispLCD@DATA,f
   576                           
   577                           ;ShotclockTimer.c: 124: if(DATA < 3)
   578  00F5  0855               	movf	dispLCD@DATA+1,w
   579  00F6  3A80               	xorlw	128
   580  00F7  00FF               	movwf	127
   581  00F8  3080               	movlw	128
   582  00F9  027F               	subwf	127,w
   583  00FA  1D03               	skipz
   584  00FB  28FE               	goto	u1095
   585  00FC  3003               	movlw	3
   586  00FD  0254               	subwf	dispLCD@DATA,w
   587  00FE                     u1095:	
   588  00FE  1803               	skipnc
   589  00FF  2908               	goto	l1312
   590                           
   591                           ;ShotclockTimer.c: 125: {
   592                           ;ShotclockTimer.c: 126: DATA += 1;
   593  0100  3001               	movlw	1
   594  0101  1283               	bcf	3,5	;RP0=0, select bank0
   595  0102  1303               	bcf	3,6	;RP1=0, select bank0
   596  0103  07D4               	addwf	dispLCD@DATA,f
   597  0104  1803               	skipnc
   598  0105  0AD5               	incf	dispLCD@DATA+1,f
   599  0106  3000               	movlw	0
   600  0107  2929               	goto	L1
   601  0108                     l1312:	
   602                           ;ShotclockTimer.c: 127: }
   603                           
   604                           
   605                           ;ShotclockTimer.c: 128: else if (DATA > 6 && DATA < 11)
   606  0108  1283               	bcf	3,5	;RP0=0, select bank0
   607  0109  1303               	bcf	3,6	;RP1=0, select bank0
   608  010A  0855               	movf	dispLCD@DATA+1,w
   609  010B  3A80               	xorlw	128
   610  010C  00FF               	movwf	127
   611  010D  3080               	movlw	128
   612  010E  027F               	subwf	127,w
   613  010F  1D03               	skipz
   614  0110  2913               	goto	u1105
   615  0111  3007               	movlw	7
   616  0112  0254               	subwf	dispLCD@DATA,w
   617  0113                     u1105:	
   618  0113  1C03               	skipc
   619  0114  292B               	goto	l1318
   620  0115  1283               	bcf	3,5	;RP0=0, select bank0
   621  0116  1303               	bcf	3,6	;RP1=0, select bank0
   622  0117  0855               	movf	dispLCD@DATA+1,w
   623  0118  3A80               	xorlw	128
   624  0119  00FF               	movwf	127
   625  011A  3080               	movlw	128
   626  011B  027F               	subwf	127,w
   627  011C  1D03               	skipz
   628  011D  2920               	goto	u1115
   629  011E  300B               	movlw	11
   630  011F  0254               	subwf	dispLCD@DATA,w
   631  0120                     u1115:	
   632  0120  1803               	skipnc
   633  0121  292B               	goto	l1318
   634                           
   635                           ;ShotclockTimer.c: 129: {
   636                           ;ShotclockTimer.c: 130: DATA -= 1;
   637  0122  30FF               	movlw	255
   638  0123  1283               	bcf	3,5	;RP0=0, select bank0
   639  0124  1303               	bcf	3,6	;RP1=0, select bank0
   640  0125  07D4               	addwf	dispLCD@DATA,f
   641  0126  1803               	skipnc
   642  0127  0AD5               	incf	dispLCD@DATA+1,f
   643  0128  30FF               	movlw	255
   644  0129                     L1:	
   645  0129  07D5               	addwf	dispLCD@DATA+1,f
   646                           
   647                           ;ShotclockTimer.c: 131: }
   648  012A  294E               	goto	l1328
   649  012B                     l1318:	
   650                           
   651                           ;ShotclockTimer.c: 132: else if(DATA > 3 && DATA <= 6)
   652  012B  1283               	bcf	3,5	;RP0=0, select bank0
   653  012C  1303               	bcf	3,6	;RP1=0, select bank0
   654  012D  0855               	movf	dispLCD@DATA+1,w
   655  012E  3A80               	xorlw	128
   656  012F  00FF               	movwf	127
   657  0130  3080               	movlw	128
   658  0131  027F               	subwf	127,w
   659  0132  1D03               	skipz
   660  0133  2936               	goto	u1125
   661  0134  3004               	movlw	4
   662  0135  0254               	subwf	dispLCD@DATA,w
   663  0136                     u1125:	
   664  0136  1C03               	skipc
   665  0137  2945               	goto	l1324
   666  0138  1283               	bcf	3,5	;RP0=0, select bank0
   667  0139  1303               	bcf	3,6	;RP1=0, select bank0
   668  013A  0855               	movf	dispLCD@DATA+1,w
   669  013B  3A80               	xorlw	128
   670  013C  00FF               	movwf	127
   671  013D  3080               	movlw	128
   672  013E  027F               	subwf	127,w
   673  013F  1D03               	skipz
   674  0140  2943               	goto	u1135
   675  0141  3007               	movlw	7
   676  0142  0254               	subwf	dispLCD@DATA,w
   677  0143                     u1135:	
   678  0143  1C03               	btfss	3,0
   679  0144  294E               	goto	l1328
   680  0145                     l1324:	
   681                           ;ShotclockTimer.c: 135: }
   682                           
   683                           
   684                           ;ShotclockTimer.c: 136: else if(DATA == 13)
   685  0145  300D               	movlw	13
   686  0146  1283               	bcf	3,5	;RP0=0, select bank0
   687  0147  1303               	bcf	3,6	;RP1=0, select bank0
   688  0148  0654               	xorwf	dispLCD@DATA,w
   689  0149  0455               	iorwf	dispLCD@DATA+1,w
   690  014A  1D03               	skipz
   691  014B  294E               	goto	l1328
   692                           
   693                           ;ShotclockTimer.c: 137: {
   694                           ;ShotclockTimer.c: 138: DATA = 0;
   695  014C  01D4               	clrf	dispLCD@DATA
   696  014D  01D5               	clrf	dispLCD@DATA+1
   697  014E                     l1328:	
   698                           ;ShotclockTimer.c: 139: }
   699                           
   700                           
   701                           ;ShotclockTimer.c: 143: }
   702                           ;ShotclockTimer.c: 147: minutes = DATA;
   703  014E  1283               	bcf	3,5	;RP0=0, select bank0
   704  014F  1303               	bcf	3,6	;RP1=0, select bank0
   705  0150  0855               	movf	dispLCD@DATA+1,w
   706  0151  01E1               	clrf	_minutes+1
   707  0152  07E1               	addwf	_minutes+1,f
   708  0153  0854               	movf	dispLCD@DATA,w
   709  0154  01E0               	clrf	_minutes
   710  0155  07E0               	addwf	_minutes,f
   711                           
   712                           ;ShotclockTimer.c: 149: switch(DATA)
   713  0156  2975               	goto	l1346
   714  0157                     l1330:	
   715                           ;ShotclockTimer.c: 150: {
   716                           ;ShotclockTimer.c: 151: case 12:
   717                           
   718                           
   719                           ;ShotclockTimer.c: 152: beginCount();
   720  0157  120A  118A  203F  120A  118A  	fcall	_beginCount
   721                           
   722                           ;ShotclockTimer.c: 153: minutes = 0;
   723  015C  1283               	bcf	3,5	;RP0=0, select bank0
   724  015D  1303               	bcf	3,6	;RP1=0, select bank0
   725  015E  01E0               	clrf	_minutes
   726  015F  01E1               	clrf	_minutes+1
   727                           
   728                           ;ShotclockTimer.c: 154: seconds = 24;
   729  0160  3018               	movlw	24
   730  0161  00E2               	movwf	_seconds
   731  0162  3000               	movlw	0
   732  0163  00E3               	movwf	_seconds+1
   733                           
   734                           ;ShotclockTimer.c: 155: dispHeader();
   735  0164  120A  118A  222F   	fcall	_dispHeader
   736                           
   737                           ;ShotclockTimer.c: 156: break;
   738  0167  0008               	return
   739  0168                     l1338:	
   740                           ;ShotclockTimer.c: 157: case 14:
   741                           
   742                           
   743                           ;ShotclockTimer.c: 158: flagPause = 1;
   744  0168  3001               	movlw	1
   745  0169  1283               	bcf	3,5	;RP0=0, select bank0
   746  016A  1303               	bcf	3,6	;RP1=0, select bank0
   747  016B  00DC               	movwf	_flagPause
   748  016C  3000               	movlw	0
   749  016D  00DD               	movwf	_flagPause+1
   750                           
   751                           ;ShotclockTimer.c: 159: minutes = 0;
   752  016E  01E0               	clrf	_minutes
   753  016F  01E1               	clrf	_minutes+1
   754                           
   755                           ;ShotclockTimer.c: 160: seconds = 24;
   756  0170  3018               	movlw	24
   757  0171  00E2               	movwf	_seconds
   758  0172  3000               	movlw	0
   759  0173  00E3               	movwf	_seconds+1
   760                           
   761                           ;ShotclockTimer.c: 164: }
   762                           
   763                           ;ShotclockTimer.c: 163: break;
   764                           
   765                           ;ShotclockTimer.c: 162: default:
   766                           
   767                           ;ShotclockTimer.c: 161: break;
   768  0174  0008               	return
   769  0175                     l1346:	
   770                           
   771                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   772                           ; Switch size 1, requested type "space"
   773                           ; Number of cases is 1, Range of values is 0 to 0
   774                           ; switch strategies available:
   775                           ; Name         Instructions Cycles
   776                           ; simple_byte            4     3 (average)
   777                           ; direct_byte           11     8 (fixed)
   778                           ; jumptable            260     6 (fixed)
   779                           ;	Chosen strategy is simple_byte
   780  0175  0855               	movf	dispLCD@DATA+1,w
   781  0176  3A00               	xorlw	0	; case 0
   782  0177  1903               	skipnz
   783  0178  297A               	goto	l1396
   784  0179  2982               	goto	l108
   785  017A                     l1396:	
   786                           
   787                           ; Switch size 1, requested type "space"
   788                           ; Number of cases is 2, Range of values is 12 to 14
   789                           ; switch strategies available:
   790                           ; Name         Instructions Cycles
   791                           ; simple_byte            7     4 (average)
   792                           ; direct_byte           20    11 (fixed)
   793                           ; jumptable            263     9 (fixed)
   794                           ;	Chosen strategy is simple_byte
   795  017A  0854               	movf	dispLCD@DATA,w
   796  017B  3A0C               	xorlw	12	; case 12
   797  017C  1903               	skipnz
   798  017D  2957               	goto	l1330
   799  017E  3A02               	xorlw	2	; case 14
   800  017F  1903               	skipnz
   801  0180  2968               	goto	l1338
   802  0181  2982               	goto	l108
   803  0182                     l108:	
   804  0182  0008               	return
   805  0183                     __end_of_dispLCD:	
   806                           
   807                           	psect	text2
   808  022F                     __ptext2:	
   809 ;; *************** function _dispHeader *****************
   810 ;; Defined at:
   811 ;;		line 168 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   812 ;; Parameters:    Size  Location     Type
   813 ;;		None
   814 ;; Auto vars:     Size  Location     Type
   815 ;;  header2        20   32[BANK0 ] unsigned char [20]
   816 ;;  header         20   12[BANK0 ] unsigned char [20]
   817 ;; Return value:  Size  Location     Type
   818 ;;		None               void
   819 ;; Registers used:
   820 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   821 ;; Tracked objects:
   822 ;;		On entry : 0/0
   823 ;;		On exit  : 0/0
   824 ;;		Unchanged: 0/0
   825 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   826 ;;      Params:         0       0       0       0       0
   827 ;;      Locals:         0      40       0       0       0
   828 ;;      Temps:          0       4       0       0       0
   829 ;;      Totals:         0      44       0       0       0
   830 ;;Total ram usage:       44 bytes
   831 ;; Hardware stack levels used:    1
   832 ;; Hardware stack levels required when called:    5
   833 ;; This function calls:
   834 ;;		_dispSTR
   835 ;;		_initLCD
   836 ;;		_instCtrl
   837 ;; This function is called by:
   838 ;;		_main
   839 ;;		_dispLCD
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           
   844                           ;psect for function _dispHeader
   845  022F                     _dispHeader:	
   846                           
   847                           ;ShotclockTimer.c: 170: flagStart = 0;
   848                           
   849                           ;incstack = 0
   850                           ; Regs used in _dispHeader: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   851  022F  1283               	bcf	3,5	;RP0=0, select bank0
   852  0230  1303               	bcf	3,6	;RP1=0, select bank0
   853  0231  01DE               	clrf	_flagStart
   854  0232  01DF               	clrf	_flagStart+1
   855                           
   856                           ;ShotclockTimer.c: 171: initLCD();
   857  0233  120A  118A  22FB  120A  118A  	fcall	_initLCD
   858                           
   859                           ;ShotclockTimer.c: 172: instCtrl(0x82);
   860  0238  3082               	movlw	130
   861  0239  120A  118A  2367  120A  118A  	fcall	_instCtrl
   862                           
   863                           ;ShotclockTimer.c: 173: char header[20] = "Shot Clock Timer";
   864  023E  302C               	movlw	dispHeader@header& (0+255)
   865  023F  0084               	movwf	4
   866  0240  30A0               	movlw	low dispHeader@F1179
   867  0241  1283               	bcf	3,5	;RP0=0, select bank0
   868  0242  1303               	bcf	3,6	;RP1=0, select bank0
   869  0243  00A8               	movwf	??_dispHeader
   870  0244  0804               	movf	4,w
   871  0245  00A9               	movwf	??_dispHeader+1
   872  0246  3014               	movlw	20
   873  0247  00AA               	movwf	??_dispHeader+2
   874  0248                     u1040:	
   875  0248  0828               	movf	??_dispHeader,w
   876  0249  0084               	movwf	4
   877  024A  1383               	bcf	3,7	;select IRP bank1
   878  024B  0800               	movf	0,w
   879  024C  00AB               	movwf	??_dispHeader+3
   880  024D  0AA8               	incf	??_dispHeader,f
   881  024E  0829               	movf	??_dispHeader+1,w
   882  024F  0084               	movwf	4
   883  0250  082B               	movf	??_dispHeader+3,w
   884  0251  0080               	movwf	0
   885  0252  0AA9               	incf	??_dispHeader+1,f
   886  0253  0BAA               	decfsz	??_dispHeader+2,f
   887  0254  2A48               	goto	u1040
   888                           
   889                           ;ShotclockTimer.c: 174: dispSTR(header);
   890  0255  302C               	movlw	dispHeader@header& (0+255)
   891  0256  120A  118A  2345  120A  118A  	fcall	_dispSTR
   892                           
   893                           ;ShotclockTimer.c: 175: instCtrl(0xC8);
   894  025B  30C8               	movlw	200
   895  025C  120A  118A  2367  120A  118A  	fcall	_instCtrl
   896                           
   897                           ;ShotclockTimer.c: 176: char header2[20] = "24";
   898  0261  3040               	movlw	dispHeader@header2& (0+255)
   899  0262  0084               	movwf	4
   900  0263  30B4               	movlw	low dispHeader@F1181
   901  0264  1283               	bcf	3,5	;RP0=0, select bank0
   902  0265  1303               	bcf	3,6	;RP1=0, select bank0
   903  0266  00A8               	movwf	??_dispHeader
   904  0267  0804               	movf	4,w
   905  0268  00A9               	movwf	??_dispHeader+1
   906  0269  3014               	movlw	20
   907  026A  00AA               	movwf	??_dispHeader+2
   908  026B                     u1050:	
   909  026B  0828               	movf	??_dispHeader,w
   910  026C  0084               	movwf	4
   911  026D  1383               	bcf	3,7	;select IRP bank1
   912  026E  0800               	movf	0,w
   913  026F  00AB               	movwf	??_dispHeader+3
   914  0270  0AA8               	incf	??_dispHeader,f
   915  0271  0829               	movf	??_dispHeader+1,w
   916  0272  0084               	movwf	4
   917  0273  082B               	movf	??_dispHeader+3,w
   918  0274  0080               	movwf	0
   919  0275  0AA9               	incf	??_dispHeader+1,f
   920  0276  0BAA               	decfsz	??_dispHeader+2,f
   921  0277  2A6B               	goto	u1050
   922                           
   923                           ;ShotclockTimer.c: 177: dispSTR(header2);
   924  0278  3040               	movlw	dispHeader@header2& (0+255)
   925  0279  120A  118A  2345   	fcall	_dispSTR
   926  027C  0008               	return
   927  027D                     __end_of_dispHeader:	
   928                           
   929                           	psect	text3
   930  02FB                     __ptext3:	
   931 ;; *************** function _initLCD *****************
   932 ;; Defined at:
   933 ;;		line 101 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;		None
   936 ;; Auto vars:     Size  Location     Type
   937 ;;		None
   938 ;; Return value:  Size  Location     Type
   939 ;;		None               void
   940 ;; Registers used:
   941 ;;		wreg, status,2, status,0, pclath, cstack
   942 ;; Tracked objects:
   943 ;;		On entry : 0/0
   944 ;;		On exit  : 0/0
   945 ;;		Unchanged: 0/0
   946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   947 ;;      Params:         0       0       0       0       0
   948 ;;      Locals:         0       0       0       0       0
   949 ;;      Temps:          0       0       0       0       0
   950 ;;      Totals:         0       0       0       0       0
   951 ;;Total ram usage:        0 bytes
   952 ;; Hardware stack levels used:    1
   953 ;; Hardware stack levels required when called:    4
   954 ;; This function calls:
   955 ;;		_delay
   956 ;;		_instCtrl
   957 ;; This function is called by:
   958 ;;		_dispHeader
   959 ;; This function uses a non-reentrant model
   960 ;;
   961                           
   962                           
   963                           ;psect for function _initLCD
   964  02FB                     _initLCD:	
   965                           
   966                           ;ShotclockTimer.c: 103: delay(30);
   967                           
   968                           ;incstack = 0
   969                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
   970  02FB  301E               	movlw	30
   971  02FC  1283               	bcf	3,5	;RP0=0, select bank0
   972  02FD  1303               	bcf	3,6	;RP1=0, select bank0
   973  02FE  00A0               	movwf	delay@timer
   974  02FF  3000               	movlw	0
   975  0300  00A1               	movwf	delay@timer+1
   976  0301  120A  118A  239E  120A  118A  	fcall	_delay
   977                           
   978                           ;ShotclockTimer.c: 104: instCtrl(0x38);
   979  0306  3038               	movlw	56
   980  0307  120A  118A  2367  120A  118A  	fcall	_instCtrl
   981                           
   982                           ;ShotclockTimer.c: 105: instCtrl(0x08);
   983  030C  3008               	movlw	8
   984  030D  120A  118A  2367  120A  118A  	fcall	_instCtrl
   985                           
   986                           ;ShotclockTimer.c: 106: instCtrl(0x01);
   987  0312  3001               	movlw	1
   988  0313  120A  118A  2367  120A  118A  	fcall	_instCtrl
   989                           
   990                           ;ShotclockTimer.c: 107: instCtrl(0x06);
   991  0318  3006               	movlw	6
   992  0319  120A  118A  2367  120A  118A  	fcall	_instCtrl
   993                           
   994                           ;ShotclockTimer.c: 108: instCtrl(0x0E);
   995  031E  300E               	movlw	14
   996  031F  120A  118A  2367   	fcall	_instCtrl
   997  0322  0008               	return
   998  0323                     __end_of_initLCD:	
   999                           
  1000                           	psect	text4
  1001  0345                     __ptext4:	
  1002 ;; *************** function _dispSTR *****************
  1003 ;; Defined at:
  1004 ;;		line 180 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;  STR             1    wreg     PTR unsigned char 
  1007 ;;		 -> dispHeader@header2(20), dispHeader@header(20), 
  1008 ;; Auto vars:     Size  Location     Type
  1009 ;;  STR             1    7[BANK0 ] PTR unsigned char 
  1010 ;;		 -> dispHeader@header2(20), dispHeader@header(20), 
  1011 ;;  i               2    5[BANK0 ] int 
  1012 ;; Return value:  Size  Location     Type
  1013 ;;		None               void
  1014 ;; Registers used:
  1015 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1016 ;; Tracked objects:
  1017 ;;		On entry : 0/0
  1018 ;;		On exit  : 0/0
  1019 ;;		Unchanged: 0/0
  1020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1021 ;;      Params:         0       0       0       0       0
  1022 ;;      Locals:         0       3       0       0       0
  1023 ;;      Temps:          0       1       0       0       0
  1024 ;;      Totals:         0       4       0       0       0
  1025 ;;Total ram usage:        4 bytes
  1026 ;; Hardware stack levels used:    1
  1027 ;; Hardware stack levels required when called:    4
  1028 ;; This function calls:
  1029 ;;		_dataCtrl
  1030 ;; This function is called by:
  1031 ;;		_dispHeader
  1032 ;; This function uses a non-reentrant model
  1033 ;;
  1034                           
  1035                           
  1036                           ;psect for function _dispSTR
  1037  0345                     _dispSTR:	
  1038                           
  1039                           ;incstack = 0
  1040                           ; Regs used in _dispSTR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1041                           ;dispSTR@STR stored from wreg
  1042  0345  1283               	bcf	3,5	;RP0=0, select bank0
  1043  0346  1303               	bcf	3,6	;RP1=0, select bank0
  1044  0347  00A7               	movwf	dispSTR@STR
  1045                           
  1046                           ;ShotclockTimer.c: 182: for(int i = 0;;i++)
  1047  0348  01A5               	clrf	dispSTR@i
  1048  0349  01A6               	clrf	dispSTR@i+1
  1049  034A                     l1188:	
  1050                           
  1051                           ;ShotclockTimer.c: 183: {
  1052                           ;ShotclockTimer.c: 184: if(STR[i] != '\0')
  1053  034A  0825               	movf	dispSTR@i,w
  1054  034B  0727               	addwf	dispSTR@STR,w
  1055  034C  00A4               	movwf	??_dispSTR
  1056  034D  0824               	movf	??_dispSTR,w
  1057  034E  0084               	movwf	4
  1058  034F  1383               	bcf	3,7	;select IRP bank0
  1059  0350  0880               	movf	0,f
  1060  0351  1903               	skipnz
  1061  0352  0008               	return
  1062                           
  1063                           ;ShotclockTimer.c: 185: {
  1064                           ;ShotclockTimer.c: 186: dataCtrl(STR[i]);
  1065  0353  0825               	movf	dispSTR@i,w
  1066  0354  0727               	addwf	dispSTR@STR,w
  1067  0355  00A4               	movwf	??_dispSTR
  1068  0356  0824               	movf	??_dispSTR,w
  1069  0357  0084               	movwf	4
  1070  0358  0800               	movf	0,w
  1071  0359  120A  118A  237A  120A  118A  	fcall	_dataCtrl
  1072                           
  1073                           ;ShotclockTimer.c: 188: else
  1074                           ;ShotclockTimer.c: 189: {
  1075                           ;ShotclockTimer.c: 190: return;
  1076                           
  1077                           ;ShotclockTimer.c: 187: }
  1078  035E  3001               	movlw	1
  1079  035F  1283               	bcf	3,5	;RP0=0, select bank0
  1080  0360  1303               	bcf	3,6	;RP1=0, select bank0
  1081  0361  07A5               	addwf	dispSTR@i,f
  1082  0362  1803               	skipnc
  1083  0363  0AA6               	incf	dispSTR@i+1,f
  1084  0364  3000               	movlw	0
  1085  0365  07A6               	addwf	dispSTR@i+1,f
  1086  0366  2B4A               	goto	l1188
  1087  0367                     __end_of_dispSTR:	
  1088                           
  1089                           	psect	text5
  1090  003F                     __ptext5:	
  1091 ;; *************** function _beginCount *****************
  1092 ;; Defined at:
  1093 ;;		line 57 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1094 ;; Parameters:    Size  Location     Type
  1095 ;;		None
  1096 ;; Auto vars:     Size  Location     Type
  1097 ;;  secMSB          2   11[BANK0 ] int 
  1098 ;;  secLSB          2    9[BANK0 ] int 
  1099 ;; Return value:  Size  Location     Type
  1100 ;;		None               void
  1101 ;; Registers used:
  1102 ;;		wreg, status,2, status,0, pclath, cstack
  1103 ;; Tracked objects:
  1104 ;;		On entry : 0/0
  1105 ;;		On exit  : 0/0
  1106 ;;		Unchanged: 0/0
  1107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1108 ;;      Params:         0       0       0       0       0
  1109 ;;      Locals:         0       4       0       0       0
  1110 ;;      Temps:          0       0       0       0       0
  1111 ;;      Totals:         0       4       0       0       0
  1112 ;;Total ram usage:        4 bytes
  1113 ;; Hardware stack levels used:    1
  1114 ;; Hardware stack levels required when called:    4
  1115 ;; This function calls:
  1116 ;;		___awdiv
  1117 ;;		___awmod
  1118 ;;		_dataCtrl
  1119 ;;		_delay
  1120 ;;		_instCtrl
  1121 ;; This function is called by:
  1122 ;;		_dispLCD
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           
  1127                           ;psect for function _beginCount
  1128  003F                     _beginCount:	
  1129  003F                     l1304:	
  1130                           ;ShotclockTimer.c: 59: for(;seconds >= 0;seconds--)
  1131                           
  1132                           ;incstack = 0
  1133                           ; Regs used in _beginCount: [wreg+status,2+status,0+pclath+cstack]
  1134                           
  1135  003F  1283               	bcf	3,5	;RP0=0, select bank0
  1136  0040  1303               	bcf	3,6	;RP1=0, select bank0
  1137  0041  1BE3               	btfsc	_seconds+1,7
  1138  0042  0008               	return
  1139                           
  1140                           ;ShotclockTimer.c: 60: {
  1141                           ;ShotclockTimer.c: 61: dispMin = (seconds/60);
  1142  0043  303C               	movlw	60
  1143  0044  1283               	bcf	3,5	;RP0=0, select bank0
  1144  0045  1303               	bcf	3,6	;RP1=0, select bank0
  1145  0046  00A0               	movwf	___awdiv@divisor
  1146  0047  3000               	movlw	0
  1147  0048  00A1               	movwf	___awdiv@divisor+1
  1148  0049  0863               	movf	_seconds+1,w
  1149  004A  01A3               	clrf	___awdiv@dividend+1
  1150  004B  07A3               	addwf	___awdiv@dividend+1,f
  1151  004C  0862               	movf	_seconds,w
  1152  004D  01A2               	clrf	___awdiv@dividend
  1153  004E  07A2               	addwf	___awdiv@dividend,f
  1154  004F  120A  118A  2183  120A  118A  	fcall	___awdiv
  1155  0054  1283               	bcf	3,5	;RP0=0, select bank0
  1156  0055  1303               	bcf	3,6	;RP1=0, select bank0
  1157  0056  0821               	movf	?___awdiv+1,w
  1158  0057  01D9               	clrf	_dispMin+1
  1159  0058  07D9               	addwf	_dispMin+1,f
  1160  0059  0820               	movf	?___awdiv,w
  1161  005A  01D8               	clrf	_dispMin
  1162  005B  07D8               	addwf	_dispMin,f
  1163                           
  1164                           ;ShotclockTimer.c: 62: dispSec = (seconds%60);
  1165  005C  303C               	movlw	60
  1166  005D  00A0               	movwf	___awmod@divisor
  1167  005E  3000               	movlw	0
  1168  005F  00A1               	movwf	___awmod@divisor+1
  1169  0060  0863               	movf	_seconds+1,w
  1170  0061  01A3               	clrf	___awmod@dividend+1
  1171  0062  07A3               	addwf	___awmod@dividend+1,f
  1172  0063  0862               	movf	_seconds,w
  1173  0064  01A2               	clrf	___awmod@dividend
  1174  0065  07A2               	addwf	___awmod@dividend,f
  1175  0066  120A  118A  21E0  120A  118A  	fcall	___awmod
  1176  006B  1283               	bcf	3,5	;RP0=0, select bank0
  1177  006C  1303               	bcf	3,6	;RP1=0, select bank0
  1178  006D  0821               	movf	?___awmod+1,w
  1179  006E  01DB               	clrf	_dispSec+1
  1180  006F  07DB               	addwf	_dispSec+1,f
  1181  0070  0820               	movf	?___awmod,w
  1182  0071  01DA               	clrf	_dispSec
  1183  0072  07DA               	addwf	_dispSec,f
  1184                           
  1185                           ;ShotclockTimer.c: 64: int secLSB;
  1186                           ;ShotclockTimer.c: 65: secLSB = dispSec%10;
  1187  0073  300A               	movlw	10
  1188  0074  00A0               	movwf	___awmod@divisor
  1189  0075  3000               	movlw	0
  1190  0076  00A1               	movwf	___awmod@divisor+1
  1191  0077  085B               	movf	_dispSec+1,w
  1192  0078  01A3               	clrf	___awmod@dividend+1
  1193  0079  07A3               	addwf	___awmod@dividend+1,f
  1194  007A  085A               	movf	_dispSec,w
  1195  007B  01A2               	clrf	___awmod@dividend
  1196  007C  07A2               	addwf	___awmod@dividend,f
  1197  007D  120A  118A  21E0  120A  118A  	fcall	___awmod
  1198  0082  1283               	bcf	3,5	;RP0=0, select bank0
  1199  0083  1303               	bcf	3,6	;RP1=0, select bank0
  1200  0084  0821               	movf	?___awmod+1,w
  1201  0085  01AA               	clrf	beginCount@secLSB+1
  1202  0086  07AA               	addwf	beginCount@secLSB+1,f
  1203  0087  0820               	movf	?___awmod,w
  1204  0088  01A9               	clrf	beginCount@secLSB
  1205  0089  07A9               	addwf	beginCount@secLSB,f
  1206                           
  1207                           ;ShotclockTimer.c: 66: int secMSB;
  1208                           ;ShotclockTimer.c: 67: secMSB = dispSec/10;
  1209  008A  300A               	movlw	10
  1210  008B  00A0               	movwf	___awdiv@divisor
  1211  008C  3000               	movlw	0
  1212  008D  00A1               	movwf	___awdiv@divisor+1
  1213  008E  085B               	movf	_dispSec+1,w
  1214  008F  01A3               	clrf	___awdiv@dividend+1
  1215  0090  07A3               	addwf	___awdiv@dividend+1,f
  1216  0091  085A               	movf	_dispSec,w
  1217  0092  01A2               	clrf	___awdiv@dividend
  1218  0093  07A2               	addwf	___awdiv@dividend,f
  1219  0094  120A  118A  2183  120A  118A  	fcall	___awdiv
  1220  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1221  009A  1303               	bcf	3,6	;RP1=0, select bank0
  1222  009B  0821               	movf	?___awdiv+1,w
  1223  009C  01AC               	clrf	beginCount@secMSB+1
  1224  009D  07AC               	addwf	beginCount@secMSB+1,f
  1225  009E  0820               	movf	?___awdiv,w
  1226  009F  01AB               	clrf	beginCount@secMSB
  1227  00A0  07AB               	addwf	beginCount@secMSB,f
  1228                           
  1229                           ;ShotclockTimer.c: 68: secMSB = secMSB%10;
  1230  00A1  300A               	movlw	10
  1231  00A2  00A0               	movwf	___awmod@divisor
  1232  00A3  3000               	movlw	0
  1233  00A4  00A1               	movwf	___awmod@divisor+1
  1234  00A5  082C               	movf	beginCount@secMSB+1,w
  1235  00A6  01A3               	clrf	___awmod@dividend+1
  1236  00A7  07A3               	addwf	___awmod@dividend+1,f
  1237  00A8  082B               	movf	beginCount@secMSB,w
  1238  00A9  01A2               	clrf	___awmod@dividend
  1239  00AA  07A2               	addwf	___awmod@dividend,f
  1240  00AB  120A  118A  21E0  120A  118A  	fcall	___awmod
  1241  00B0  1283               	bcf	3,5	;RP0=0, select bank0
  1242  00B1  1303               	bcf	3,6	;RP1=0, select bank0
  1243  00B2  0821               	movf	?___awmod+1,w
  1244  00B3  01AC               	clrf	beginCount@secMSB+1
  1245  00B4  07AC               	addwf	beginCount@secMSB+1,f
  1246  00B5  0820               	movf	?___awmod,w
  1247  00B6  01AB               	clrf	beginCount@secMSB
  1248  00B7  07AB               	addwf	beginCount@secMSB,f
  1249                           
  1250                           ;ShotclockTimer.c: 69: instCtrl(0xC8);
  1251  00B8  30C8               	movlw	200
  1252  00B9  120A  118A  2367  120A  118A  	fcall	_instCtrl
  1253                           
  1254                           ;ShotclockTimer.c: 72: dataCtrl(secMSB+48);
  1255  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1256  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1257  00C0  082B               	movf	beginCount@secMSB,w
  1258  00C1  3E30               	addlw	48
  1259  00C2  120A  118A  237A  120A  118A  	fcall	_dataCtrl
  1260                           
  1261                           ;ShotclockTimer.c: 73: dataCtrl(secLSB+48);
  1262  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1263  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1264  00C9  0829               	movf	beginCount@secLSB,w
  1265  00CA  3E30               	addlw	48
  1266  00CB  120A  118A  237A  120A  118A  	fcall	_dataCtrl
  1267                           
  1268                           ;ShotclockTimer.c: 75: delay(122);
  1269  00D0  307A               	movlw	122
  1270  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1271  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1272  00D3  00A0               	movwf	delay@timer
  1273  00D4  3000               	movlw	0
  1274  00D5  00A1               	movwf	delay@timer+1
  1275  00D6  120A  118A  239E  120A  118A  	fcall	_delay
  1276                           
  1277                           ;ShotclockTimer.c: 76: if(flagStart == 0)
  1278  00DB  1283               	bcf	3,5	;RP0=0, select bank0
  1279  00DC  1303               	bcf	3,6	;RP1=0, select bank0
  1280  00DD  085F               	movf	_flagStart+1,w
  1281  00DE  045E               	iorwf	_flagStart,w
  1282  00DF  1903               	btfsc	3,2
  1283  00E0  0008               	return
  1284  00E1                     l1300:	
  1285                           ;ShotclockTimer.c: 81: {
  1286                           
  1287                           ;ShotclockTimer.c: 79: }
  1288                           ;ShotclockTimer.c: 80: while(flagPause == 1)
  1289                           
  1290                           ;ShotclockTimer.c: 77: {
  1291                           ;ShotclockTimer.c: 78: break;
  1292                           
  1293  00E1  3001               	movlw	1
  1294  00E2  065C               	xorwf	_flagPause,w
  1295  00E3  045D               	iorwf	_flagPause+1,w
  1296  00E4  1903               	skipnz
  1297  00E5  28E1               	goto	l1300
  1298  00E6  30FF               	movlw	255
  1299  00E7  07E2               	addwf	_seconds,f
  1300  00E8  1803               	skipnc
  1301  00E9  0AE3               	incf	_seconds+1,f
  1302  00EA  30FF               	movlw	255
  1303  00EB  07E3               	addwf	_seconds+1,f
  1304  00EC  283F               	goto	l1304
  1305  00ED                     __end_of_beginCount:	
  1306                           
  1307                           	psect	text6
  1308  0367                     __ptext6:	
  1309 ;; *************** function _instCtrl *****************
  1310 ;; Defined at:
  1311 ;;		line 91 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;  INST            1    wreg     unsigned char 
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;  INST            1    3[BANK0 ] unsigned char 
  1316 ;; Return value:  Size  Location     Type
  1317 ;;		None               void
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0, pclath, cstack
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1325 ;;      Params:         0       0       0       0       0
  1326 ;;      Locals:         0       1       0       0       0
  1327 ;;      Temps:          0       0       0       0       0
  1328 ;;      Totals:         0       1       0       0       0
  1329 ;;Total ram usage:        1 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    3
  1332 ;; This function calls:
  1333 ;;		_delay
  1334 ;; This function is called by:
  1335 ;;		_beginCount
  1336 ;;		_initLCD
  1337 ;;		_dispHeader
  1338 ;; This function uses a non-reentrant model
  1339 ;;
  1340                           
  1341                           
  1342                           ;psect for function _instCtrl
  1343  0367                     _instCtrl:	
  1344                           
  1345                           ;incstack = 0
  1346                           ; Regs used in _instCtrl: [wreg+status,2+status,0+pclath+cstack]
  1347                           ;instCtrl@INST stored from wreg
  1348  0367  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0368  1303               	bcf	3,6	;RP1=0, select bank0
  1350  0369  00A3               	movwf	instCtrl@INST
  1351                           
  1352                           ;ShotclockTimer.c: 93: PORTC = INST;
  1353  036A  0823               	movf	instCtrl@INST,w
  1354  036B  0087               	movwf	7	;volatile
  1355                           
  1356                           ;ShotclockTimer.c: 94: RA0 = 0;
  1357  036C  1005               	bcf	5,0	;volatile
  1358                           
  1359                           ;ShotclockTimer.c: 95: RA2 = 0;
  1360  036D  1105               	bcf	5,2	;volatile
  1361                           
  1362                           ;ShotclockTimer.c: 96: RA1 = 1;
  1363  036E  1485               	bsf	5,1	;volatile
  1364                           
  1365                           ;ShotclockTimer.c: 97: delay(30);
  1366  036F  301E               	movlw	30
  1367  0370  00A0               	movwf	delay@timer
  1368  0371  3000               	movlw	0
  1369  0372  00A1               	movwf	delay@timer+1
  1370  0373  120A  118A  239E   	fcall	_delay
  1371                           
  1372                           ;ShotclockTimer.c: 98: RA1 = 0;
  1373  0376  1283               	bcf	3,5	;RP0=0, select bank0
  1374  0377  1303               	bcf	3,6	;RP1=0, select bank0
  1375  0378  1085               	bcf	5,1	;volatile
  1376  0379  0008               	return
  1377  037A                     __end_of_instCtrl:	
  1378                           
  1379                           	psect	text7
  1380  037A                     __ptext7:	
  1381 ;; *************** function _dataCtrl *****************
  1382 ;; Defined at:
  1383 ;;		line 111 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;  DATA            1    wreg     unsigned char 
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;  DATA            1    3[BANK0 ] unsigned char 
  1388 ;; Return value:  Size  Location     Type
  1389 ;;		None               void
  1390 ;; Registers used:
  1391 ;;		wreg, status,2, status,0, pclath, cstack
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1397 ;;      Params:         0       0       0       0       0
  1398 ;;      Locals:         0       1       0       0       0
  1399 ;;      Temps:          0       0       0       0       0
  1400 ;;      Totals:         0       1       0       0       0
  1401 ;;Total ram usage:        1 bytes
  1402 ;; Hardware stack levels used:    1
  1403 ;; Hardware stack levels required when called:    3
  1404 ;; This function calls:
  1405 ;;		_delay
  1406 ;; This function is called by:
  1407 ;;		_beginCount
  1408 ;;		_dispSTR
  1409 ;; This function uses a non-reentrant model
  1410 ;;
  1411                           
  1412                           
  1413                           ;psect for function _dataCtrl
  1414  037A                     _dataCtrl:	
  1415                           
  1416                           ;incstack = 0
  1417                           ; Regs used in _dataCtrl: [wreg+status,2+status,0+pclath+cstack]
  1418                           ;dataCtrl@DATA stored from wreg
  1419  037A  1283               	bcf	3,5	;RP0=0, select bank0
  1420  037B  1303               	bcf	3,6	;RP1=0, select bank0
  1421  037C  00A3               	movwf	dataCtrl@DATA
  1422                           
  1423                           ;ShotclockTimer.c: 113: PORTC = DATA;
  1424  037D  0823               	movf	dataCtrl@DATA,w
  1425  037E  0087               	movwf	7	;volatile
  1426                           
  1427                           ;ShotclockTimer.c: 114: RA0 = 1;
  1428  037F  1405               	bsf	5,0	;volatile
  1429                           
  1430                           ;ShotclockTimer.c: 115: RA2 = 0;
  1431  0380  1105               	bcf	5,2	;volatile
  1432                           
  1433                           ;ShotclockTimer.c: 116: RA1 = 1;
  1434  0381  1485               	bsf	5,1	;volatile
  1435                           
  1436                           ;ShotclockTimer.c: 117: delay(0);
  1437  0382  3000               	movlw	0
  1438  0383  00A0               	movwf	delay@timer
  1439  0384  3000               	movlw	0
  1440  0385  00A1               	movwf	delay@timer+1
  1441  0386  120A  118A  239E   	fcall	_delay
  1442                           
  1443                           ;ShotclockTimer.c: 118: RA1 = 0;
  1444  0389  1283               	bcf	3,5	;RP0=0, select bank0
  1445  038A  1303               	bcf	3,6	;RP1=0, select bank0
  1446  038B  1085               	bcf	5,1	;volatile
  1447  038C  0008               	return
  1448  038D                     __end_of_dataCtrl:	
  1449                           
  1450                           	psect	text8
  1451  039E                     __ptext8:	
  1452 ;; *************** function _delay *****************
  1453 ;; Defined at:
  1454 ;;		line 221 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1455 ;; Parameters:    Size  Location     Type
  1456 ;;  timer           2    0[BANK0 ] int 
  1457 ;; Auto vars:     Size  Location     Type
  1458 ;;		None
  1459 ;; Return value:  Size  Location     Type
  1460 ;;		None               void
  1461 ;; Registers used:
  1462 ;;		wreg, status,2
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1468 ;;      Params:         0       2       0       0       0
  1469 ;;      Locals:         0       0       0       0       0
  1470 ;;      Temps:          0       1       0       0       0
  1471 ;;      Totals:         0       3       0       0       0
  1472 ;;Total ram usage:        3 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    2
  1475 ;; This function calls:
  1476 ;;		Nothing
  1477 ;; This function is called by:
  1478 ;;		_beginCount
  1479 ;;		_instCtrl
  1480 ;;		_initLCD
  1481 ;;		_dataCtrl
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           
  1486                           ;psect for function _delay
  1487  039E                     _delay:	
  1488  039E                     l1156:	
  1489                           ;ShotclockTimer.c: 224: {
  1490                           
  1491                           ;ShotclockTimer.c: 223: while(count_flag < timer)
  1492                           
  1493                           ;incstack = 0
  1494                           ; Regs used in _delay: [wreg+status,2]
  1495                           
  1496  039E  0877               	movf	_count_flag+1,w
  1497  039F  3A80               	xorlw	128
  1498  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  1499  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  1500  03A2  00A2               	movwf	??_delay
  1501  03A3  0821               	movf	delay@timer+1,w
  1502  03A4  3A80               	xorlw	128
  1503  03A5  0222               	subwf	??_delay,w
  1504  03A6  1D03               	skipz
  1505  03A7  2BAA               	goto	u835
  1506  03A8  0820               	movf	delay@timer,w
  1507  03A9  0276               	subwf	_count_flag,w
  1508  03AA                     u835:	
  1509  03AA  1C03               	skipc
  1510  03AB  2B9E               	goto	l1156
  1511                           
  1512                           ;ShotclockTimer.c: 225: }
  1513                           ;ShotclockTimer.c: 226: count_flag = 0;
  1514  03AC  01F6               	clrf	_count_flag
  1515  03AD  01F7               	clrf	_count_flag+1
  1516  03AE  0008               	return
  1517  03AF                     __end_of_delay:	
  1518                           
  1519                           	psect	text9
  1520  01E0                     __ptext9:	
  1521 ;; *************** function ___awmod *****************
  1522 ;; Defined at:
  1523 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  divisor         2    0[BANK0 ] int 
  1526 ;;  dividend        2    2[BANK0 ] int 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  sign            1    6[BANK0 ] unsigned char 
  1529 ;;  counter         1    5[BANK0 ] unsigned char 
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  2    0[BANK0 ] int 
  1532 ;; Registers used:
  1533 ;;		wreg, status,2, status,0
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1539 ;;      Params:         0       4       0       0       0
  1540 ;;      Locals:         0       2       0       0       0
  1541 ;;      Temps:          0       1       0       0       0
  1542 ;;      Totals:         0       7       0       0       0
  1543 ;;Total ram usage:        7 bytes
  1544 ;; Hardware stack levels used:    1
  1545 ;; Hardware stack levels required when called:    2
  1546 ;; This function calls:
  1547 ;;		Nothing
  1548 ;; This function is called by:
  1549 ;;		_beginCount
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           
  1554                           ;psect for function ___awmod
  1555  01E0                     ___awmod:	
  1556                           
  1557                           ;incstack = 0
  1558                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1559  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  1560  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  1561  01E2  01A6               	clrf	___awmod@sign
  1562  01E3  1FA3               	btfss	___awmod@dividend+1,7
  1563  01E4  29EC               	goto	l1246
  1564  01E5  09A2               	comf	___awmod@dividend,f
  1565  01E6  09A3               	comf	___awmod@dividend+1,f
  1566  01E7  0AA2               	incf	___awmod@dividend,f
  1567  01E8  1903               	skipnz
  1568  01E9  0AA3               	incf	___awmod@dividend+1,f
  1569  01EA  01A6               	clrf	___awmod@sign
  1570  01EB  0AA6               	incf	___awmod@sign,f
  1571  01EC                     l1246:	
  1572  01EC  1FA1               	btfss	___awmod@divisor+1,7
  1573  01ED  29F3               	goto	l1250
  1574  01EE  09A0               	comf	___awmod@divisor,f
  1575  01EF  09A1               	comf	___awmod@divisor+1,f
  1576  01F0  0AA0               	incf	___awmod@divisor,f
  1577  01F1  1903               	skipnz
  1578  01F2  0AA1               	incf	___awmod@divisor+1,f
  1579  01F3                     l1250:	
  1580  01F3  0821               	movf	___awmod@divisor+1,w
  1581  01F4  0420               	iorwf	___awmod@divisor,w
  1582  01F5  1903               	skipnz
  1583  01F6  2A20               	goto	l1268
  1584  01F7  01A5               	clrf	___awmod@counter
  1585  01F8  0AA5               	incf	___awmod@counter,f
  1586  01F9                     l1258:	
  1587  01F9  1BA1               	btfsc	___awmod@divisor+1,7
  1588  01FA  2A07               	goto	l1260
  1589  01FB  3001               	movlw	1
  1590  01FC                     u985:	
  1591  01FC  1003               	clrc
  1592  01FD  0DA0               	rlf	___awmod@divisor,f
  1593  01FE  0DA1               	rlf	___awmod@divisor+1,f
  1594  01FF  3EFF               	addlw	-1
  1595  0200  1D03               	skipz
  1596  0201  29FC               	goto	u985
  1597  0202  3001               	movlw	1
  1598  0203  00A4               	movwf	??___awmod
  1599  0204  0824               	movf	??___awmod,w
  1600  0205  07A5               	addwf	___awmod@counter,f
  1601  0206  29F9               	goto	l1258
  1602  0207                     l1260:	
  1603  0207  0821               	movf	___awmod@divisor+1,w
  1604  0208  0223               	subwf	___awmod@dividend+1,w
  1605  0209  1D03               	skipz
  1606  020A  2A0D               	goto	u1005
  1607  020B  0820               	movf	___awmod@divisor,w
  1608  020C  0222               	subwf	___awmod@dividend,w
  1609  020D                     u1005:	
  1610  020D  1C03               	skipc
  1611  020E  2A15               	goto	l1264
  1612  020F  0820               	movf	___awmod@divisor,w
  1613  0210  02A2               	subwf	___awmod@dividend,f
  1614  0211  0821               	movf	___awmod@divisor+1,w
  1615  0212  1C03               	skipc
  1616  0213  03A3               	decf	___awmod@dividend+1,f
  1617  0214  02A3               	subwf	___awmod@dividend+1,f
  1618  0215                     l1264:	
  1619  0215  3001               	movlw	1
  1620  0216                     u1015:	
  1621  0216  1003               	clrc
  1622  0217  0CA1               	rrf	___awmod@divisor+1,f
  1623  0218  0CA0               	rrf	___awmod@divisor,f
  1624  0219  3EFF               	addlw	-1
  1625  021A  1D03               	skipz
  1626  021B  2A16               	goto	u1015
  1627  021C  3001               	movlw	1
  1628  021D  02A5               	subwf	___awmod@counter,f
  1629  021E  1D03               	btfss	3,2
  1630  021F  2A07               	goto	l1260
  1631  0220                     l1268:	
  1632  0220  0826               	movf	___awmod@sign,w
  1633  0221  1903               	btfsc	3,2
  1634  0222  2A28               	goto	l1272
  1635  0223  09A2               	comf	___awmod@dividend,f
  1636  0224  09A3               	comf	___awmod@dividend+1,f
  1637  0225  0AA2               	incf	___awmod@dividend,f
  1638  0226  1903               	skipnz
  1639  0227  0AA3               	incf	___awmod@dividend+1,f
  1640  0228                     l1272:	
  1641  0228  0823               	movf	___awmod@dividend+1,w
  1642  0229  01A1               	clrf	?___awmod+1
  1643  022A  07A1               	addwf	?___awmod+1,f
  1644  022B  0822               	movf	___awmod@dividend,w
  1645  022C  01A0               	clrf	?___awmod
  1646  022D  07A0               	addwf	?___awmod,f
  1647  022E  0008               	return
  1648  022F                     __end_of___awmod:	
  1649                           
  1650                           	psect	text10
  1651  0183                     __ptext10:	
  1652 ;; *************** function ___awdiv *****************
  1653 ;; Defined at:
  1654 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;  divisor         2    0[BANK0 ] int 
  1657 ;;  dividend        2    2[BANK0 ] int 
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;  quotient        2    7[BANK0 ] int 
  1660 ;;  sign            1    6[BANK0 ] unsigned char 
  1661 ;;  counter         1    5[BANK0 ] unsigned char 
  1662 ;; Return value:  Size  Location     Type
  1663 ;;                  2    0[BANK0 ] int 
  1664 ;; Registers used:
  1665 ;;		wreg, status,2, status,0
  1666 ;; Tracked objects:
  1667 ;;		On entry : 0/0
  1668 ;;		On exit  : 0/0
  1669 ;;		Unchanged: 0/0
  1670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1671 ;;      Params:         0       4       0       0       0
  1672 ;;      Locals:         0       4       0       0       0
  1673 ;;      Temps:          0       1       0       0       0
  1674 ;;      Totals:         0       9       0       0       0
  1675 ;;Total ram usage:        9 bytes
  1676 ;; Hardware stack levels used:    1
  1677 ;; Hardware stack levels required when called:    2
  1678 ;; This function calls:
  1679 ;;		Nothing
  1680 ;; This function is called by:
  1681 ;;		_beginCount
  1682 ;; This function uses a non-reentrant model
  1683 ;;
  1684                           
  1685                           
  1686                           ;psect for function ___awdiv
  1687  0183                     ___awdiv:	
  1688                           
  1689                           ;incstack = 0
  1690                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1691  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1692  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1693  0185  01A6               	clrf	___awdiv@sign
  1694  0186  1FA1               	btfss	___awdiv@divisor+1,7
  1695  0187  298F               	goto	l1202
  1696  0188  09A0               	comf	___awdiv@divisor,f
  1697  0189  09A1               	comf	___awdiv@divisor+1,f
  1698  018A  0AA0               	incf	___awdiv@divisor,f
  1699  018B  1903               	skipnz
  1700  018C  0AA1               	incf	___awdiv@divisor+1,f
  1701  018D  01A6               	clrf	___awdiv@sign
  1702  018E  0AA6               	incf	___awdiv@sign,f
  1703  018F                     l1202:	
  1704  018F  1FA3               	btfss	___awdiv@dividend+1,7
  1705  0190  299A               	goto	l1208
  1706  0191  09A2               	comf	___awdiv@dividend,f
  1707  0192  09A3               	comf	___awdiv@dividend+1,f
  1708  0193  0AA2               	incf	___awdiv@dividend,f
  1709  0194  1903               	skipnz
  1710  0195  0AA3               	incf	___awdiv@dividend+1,f
  1711  0196  3001               	movlw	1
  1712  0197  00A4               	movwf	??___awdiv
  1713  0198  0824               	movf	??___awdiv,w
  1714  0199  06A6               	xorwf	___awdiv@sign,f
  1715  019A                     l1208:	
  1716  019A  01A7               	clrf	___awdiv@quotient
  1717  019B  01A8               	clrf	___awdiv@quotient+1
  1718  019C  0821               	movf	___awdiv@divisor+1,w
  1719  019D  0420               	iorwf	___awdiv@divisor,w
  1720  019E  1903               	skipnz
  1721  019F  29D1               	goto	l1230
  1722  01A0  01A5               	clrf	___awdiv@counter
  1723  01A1  0AA5               	incf	___awdiv@counter,f
  1724  01A2                     l1218:	
  1725  01A2  1BA1               	btfsc	___awdiv@divisor+1,7
  1726  01A3  29B0               	goto	l1220
  1727  01A4  3001               	movlw	1
  1728  01A5                     u885:	
  1729  01A5  1003               	clrc
  1730  01A6  0DA0               	rlf	___awdiv@divisor,f
  1731  01A7  0DA1               	rlf	___awdiv@divisor+1,f
  1732  01A8  3EFF               	addlw	-1
  1733  01A9  1D03               	skipz
  1734  01AA  29A5               	goto	u885
  1735  01AB  3001               	movlw	1
  1736  01AC  00A4               	movwf	??___awdiv
  1737  01AD  0824               	movf	??___awdiv,w
  1738  01AE  07A5               	addwf	___awdiv@counter,f
  1739  01AF  29A2               	goto	l1218
  1740  01B0                     l1220:	
  1741  01B0  3001               	movlw	1
  1742  01B1                     u905:	
  1743  01B1  1003               	clrc
  1744  01B2  0DA7               	rlf	___awdiv@quotient,f
  1745  01B3  0DA8               	rlf	___awdiv@quotient+1,f
  1746  01B4  3EFF               	addlw	-1
  1747  01B5  1D03               	skipz
  1748  01B6  29B1               	goto	u905
  1749  01B7  0821               	movf	___awdiv@divisor+1,w
  1750  01B8  0223               	subwf	___awdiv@dividend+1,w
  1751  01B9  1D03               	skipz
  1752  01BA  29BD               	goto	u915
  1753  01BB  0820               	movf	___awdiv@divisor,w
  1754  01BC  0222               	subwf	___awdiv@dividend,w
  1755  01BD                     u915:	
  1756  01BD  1C03               	skipc
  1757  01BE  29C6               	goto	l1226
  1758  01BF  0820               	movf	___awdiv@divisor,w
  1759  01C0  02A2               	subwf	___awdiv@dividend,f
  1760  01C1  0821               	movf	___awdiv@divisor+1,w
  1761  01C2  1C03               	skipc
  1762  01C3  03A3               	decf	___awdiv@dividend+1,f
  1763  01C4  02A3               	subwf	___awdiv@dividend+1,f
  1764  01C5  1427               	bsf	___awdiv@quotient,0
  1765  01C6                     l1226:	
  1766  01C6  3001               	movlw	1
  1767  01C7                     u925:	
  1768  01C7  1003               	clrc
  1769  01C8  0CA1               	rrf	___awdiv@divisor+1,f
  1770  01C9  0CA0               	rrf	___awdiv@divisor,f
  1771  01CA  3EFF               	addlw	-1
  1772  01CB  1D03               	skipz
  1773  01CC  29C7               	goto	u925
  1774  01CD  3001               	movlw	1
  1775  01CE  02A5               	subwf	___awdiv@counter,f
  1776  01CF  1D03               	btfss	3,2
  1777  01D0  29B0               	goto	l1220
  1778  01D1                     l1230:	
  1779  01D1  0826               	movf	___awdiv@sign,w
  1780  01D2  1903               	btfsc	3,2
  1781  01D3  29D9               	goto	l1234
  1782  01D4  09A7               	comf	___awdiv@quotient,f
  1783  01D5  09A8               	comf	___awdiv@quotient+1,f
  1784  01D6  0AA7               	incf	___awdiv@quotient,f
  1785  01D7  1903               	skipnz
  1786  01D8  0AA8               	incf	___awdiv@quotient+1,f
  1787  01D9                     l1234:	
  1788  01D9  0828               	movf	___awdiv@quotient+1,w
  1789  01DA  01A1               	clrf	?___awdiv+1
  1790  01DB  07A1               	addwf	?___awdiv+1,f
  1791  01DC  0827               	movf	___awdiv@quotient,w
  1792  01DD  01A0               	clrf	?___awdiv
  1793  01DE  07A0               	addwf	?___awdiv,f
  1794  01DF  0008               	return
  1795  01E0                     __end_of___awdiv:	
  1796                           
  1797                           	psect	text11
  1798  02AA                     __ptext11:	
  1799 ;; *************** function _ISR *****************
  1800 ;; Defined at:
  1801 ;;		line 229 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1802 ;; Parameters:    Size  Location     Type
  1803 ;;		None
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;		None
  1806 ;; Return value:  Size  Location     Type
  1807 ;;		None               void
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, status,0, pclath, cstack
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1815 ;;      Params:         0       0       0       0       0
  1816 ;;      Locals:         0       0       0       0       0
  1817 ;;      Temps:          6       0       0       0       0
  1818 ;;      Totals:         6       0       0       0       0
  1819 ;;Total ram usage:        6 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:    1
  1822 ;; This function calls:
  1823 ;;		_toogleFlag
  1824 ;; This function is called by:
  1825 ;;		Interrupt level 1
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           
  1830                           ;psect for function _ISR
  1831  02AA                     _ISR:	
  1832                           
  1833                           ;ShotclockTimer.c: 231: GIE = 0;
  1834  02AA  138B               	bcf	11,7	;volatile
  1835                           
  1836                           ;ShotclockTimer.c: 232: if(INTF)
  1837  02AB  1C8B               	btfss	11,1	;volatile
  1838  02AC  2ABC               	goto	i1l131
  1839                           
  1840                           ;ShotclockTimer.c: 233: {
  1841                           ;ShotclockTimer.c: 234: dataRead = PORTD & 0x0F;
  1842  02AD  0808               	movf	8,w	;volatile
  1843  02AE  390F               	andlw	15
  1844  02AF  00F0               	movwf	??_ISR
  1845  02B0  01F1               	clrf	??_ISR+1
  1846  02B1  0870               	movf	??_ISR,w
  1847  02B2  00D6               	movwf	_dataRead
  1848  02B3  0871               	movf	??_ISR+1,w
  1849  02B4  00D7               	movwf	_dataRead+1
  1850                           
  1851                           ;ShotclockTimer.c: 235: toogleFlag();
  1852  02B5  120A  118A  227D  120A  118A  	fcall	_toogleFlag
  1853                           
  1854                           ;ShotclockTimer.c: 236: INTF = 0;
  1855  02BA  108B               	bcf	11,1	;volatile
  1856                           
  1857                           ;ShotclockTimer.c: 237: }
  1858  02BB  2AC5               	goto	i1l1132
  1859  02BC                     i1l131:	
  1860                           
  1861                           ;ShotclockTimer.c: 238: else if(T0IF)
  1862  02BC  1D0B               	btfss	11,2	;volatile
  1863  02BD  2AC5               	goto	i1l1132
  1864                           
  1865                           ;ShotclockTimer.c: 239: {
  1866                           ;ShotclockTimer.c: 240: count_flag++;
  1867  02BE  3001               	movlw	1
  1868  02BF  07F6               	addwf	_count_flag,f
  1869  02C0  1803               	skipnc
  1870  02C1  0AF7               	incf	_count_flag+1,f
  1871  02C2  3000               	movlw	0
  1872  02C3  07F7               	addwf	_count_flag+1,f
  1873                           
  1874                           ;ShotclockTimer.c: 241: T0IF = 0;
  1875  02C4  110B               	bcf	11,2	;volatile
  1876  02C5                     i1l1132:	
  1877                           
  1878                           ;ShotclockTimer.c: 242: }
  1879                           ;ShotclockTimer.c: 243: GIE = 1;
  1880  02C5  178B               	bsf	11,7	;volatile
  1881  02C6  0875               	movf	??_ISR+5,w
  1882  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  1883  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  1884  02C9  00FF               	movwf	127
  1885  02CA  0874               	movf	??_ISR+4,w
  1886  02CB  008A               	movwf	10
  1887  02CC  0873               	movf	??_ISR+3,w
  1888  02CD  0084               	movwf	4
  1889  02CE  0E72               	swapf	(??_ISR+2)^(0+-128),w
  1890  02CF  0083               	movwf	3
  1891  02D0  0EFE               	swapf	126,f
  1892  02D1  0E7E               	swapf	126,w
  1893  02D2  0009               	retfie
  1894  02D3                     __end_of_ISR:	
  1895                           
  1896                           	psect	intentry
  1897  0004                     __pintentry:	
  1898                           ;incstack = 0
  1899                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  1900                           
  1901  0004                     interrupt_function:	
  1902  007E                     saved_w	set	btemp
  1903  0004  00FE               	movwf	btemp
  1904  0005  0E03               	swapf	3,w
  1905  0006  00F2               	movwf	??_ISR+2
  1906  0007  0804               	movf	4,w
  1907  0008  00F3               	movwf	??_ISR+3
  1908  0009  080A               	movf	10,w
  1909  000A  00F4               	movwf	??_ISR+4
  1910  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1911  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1912  000D  087F               	movf	btemp+1,w
  1913  000E  00F5               	movwf	??_ISR+5
  1914  000F  120A  118A  2AAA   	ljmp	_ISR
  1915                           
  1916                           	psect	text12
  1917  027D                     __ptext12:	
  1918 ;; *************** function _toogleFlag *****************
  1919 ;; Defined at:
  1920 ;;		line 246 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;		None
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;		None
  1925 ;; Return value:  Size  Location     Type
  1926 ;;		None               void
  1927 ;; Registers used:
  1928 ;;		wreg, status,2, status,0
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1934 ;;      Params:         0       0       0       0       0
  1935 ;;      Locals:         0       0       0       0       0
  1936 ;;      Temps:          0       0       0       0       0
  1937 ;;      Totals:         0       0       0       0       0
  1938 ;;Total ram usage:        0 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; This function calls:
  1941 ;;		Nothing
  1942 ;; This function is called by:
  1943 ;;		_ISR
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           
  1948                           ;psect for function _toogleFlag
  1949  027D                     _toogleFlag:	
  1950                           
  1951                           ;ShotclockTimer.c: 248: if(dataRead == 12)
  1952                           
  1953                           ;incstack = 0
  1954                           ; Regs used in _toogleFlag: [wreg+status,2+status,0]
  1955  027D  300C               	movlw	12
  1956  027E  1283               	bcf	3,5	;RP0=0, select bank0
  1957  027F  1303               	bcf	3,6	;RP1=0, select bank0
  1958  0280  0656               	xorwf	_dataRead,w
  1959  0281  0457               	iorwf	_dataRead+1,w
  1960  0282  1D03               	skipz
  1961  0283  2A94               	goto	i1l1086
  1962                           
  1963                           ;ShotclockTimer.c: 249: {
  1964                           ;ShotclockTimer.c: 250: if(flagStart == 0)
  1965  0284  085F               	movf	_flagStart+1,w
  1966  0285  045E               	iorwf	_flagStart,w
  1967  0286  1D03               	skipz
  1968  0287  2A8D               	goto	i1l1082
  1969                           
  1970                           ;ShotclockTimer.c: 251: flagStart = 1;
  1971  0288  3001               	movlw	1
  1972  0289  00DE               	movwf	_flagStart
  1973  028A  3000               	movlw	0
  1974  028B  00DF               	movwf	_flagStart+1
  1975  028C  2A94               	goto	i1l1086
  1976  028D                     i1l1082:	
  1977                           
  1978                           ;ShotclockTimer.c: 253: else if(flagStart == 1)
  1979  028D  3001               	movlw	1
  1980  028E  065E               	xorwf	_flagStart,w
  1981  028F  045F               	iorwf	_flagStart+1,w
  1982  0290  1D03               	skipz
  1983  0291  2A94               	goto	i1l1086
  1984                           
  1985                           ;ShotclockTimer.c: 254: flagStart = 0;
  1986  0292  01DE               	clrf	_flagStart
  1987  0293  01DF               	clrf	_flagStart+1
  1988  0294                     i1l1086:	
  1989                           
  1990                           ;ShotclockTimer.c: 255: }
  1991                           ;ShotclockTimer.c: 257: if(dataRead == 14)
  1992  0294  300E               	movlw	14
  1993  0295  0656               	xorwf	_dataRead,w
  1994  0296  0457               	iorwf	_dataRead+1,w
  1995  0297  1D03               	skipz
  1996  0298  0008               	return
  1997                           
  1998                           ;ShotclockTimer.c: 258: {
  1999                           ;ShotclockTimer.c: 259: if(flagPause == 0)
  2000  0299  085D               	movf	_flagPause+1,w
  2001  029A  045C               	iorwf	_flagPause,w
  2002  029B  1D03               	skipz
  2003  029C  2AA2               	goto	i1l1092
  2004                           
  2005                           ;ShotclockTimer.c: 260: flagPause = 1;
  2006  029D  3001               	movlw	1
  2007  029E  00DC               	movwf	_flagPause
  2008  029F  3000               	movlw	0
  2009  02A0  00DD               	movwf	_flagPause+1
  2010  02A1  0008               	return
  2011  02A2                     i1l1092:	
  2012                           
  2013                           ;ShotclockTimer.c: 262: else if(flagPause == 1)
  2014  02A2  3001               	movlw	1
  2015  02A3  065C               	xorwf	_flagPause,w
  2016  02A4  045D               	iorwf	_flagPause+1,w
  2017  02A5  1D03               	skipz
  2018  02A6  0008               	return
  2019                           
  2020                           ;ShotclockTimer.c: 263: flagPause = 0;
  2021  02A7  01DC               	clrf	_flagPause
  2022  02A8  01DD               	clrf	_flagPause+1
  2023  02A9  0008               	return
  2024  02AA                     __end_of_toogleFlag:	
  2025  007E                     btemp	set	126	;btemp
  2026  007E                     wtemp	set	126
  2027  007E                     wtemp0	set	126
  2028  0080                     wtemp1	set	128
  2029  0082                     wtemp2	set	130
  2030  0084                     wtemp3	set	132
  2031  0086                     wtemp4	set	134
  2032  0088                     wtemp5	set	136
  2033  007F                     wtemp6	set	127
  2034  007E                     ttemp	set	126
  2035  007E                     ttemp0	set	126
  2036  0081                     ttemp1	set	129
  2037  0084                     ttemp2	set	132
  2038  0087                     ttemp3	set	135
  2039  007F                     ttemp4	set	127
  2040  007E                     ltemp	set	126
  2041  007E                     ltemp0	set	126
  2042  0082                     ltemp1	set	130
  2043  0086                     ltemp2	set	134
  2044  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        42
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80     54      68
    BANK1            80      0      40
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    dispSTR@STR	PTR unsigned char  size(1) Largest target is 20
		 -> dispHeader@header2(BANK0[20]), dispHeader@header(BANK0[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_dispLCD
    _dispLCD->_dispHeader
    _dispHeader->_dispSTR
    _initLCD->_instCtrl
    _dispSTR->_dataCtrl
    _beginCount->___awdiv
    _instCtrl->_delay
    _dataCtrl->_delay

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    5879
                         _dispHeader
                            _dispLCD
 ---------------------------------------------------------------------------------
 (1) _dispLCD                                              2     2      0    4352
                                             52 BANK0      2     2      0
                         _beginCount
                         _dispHeader
 ---------------------------------------------------------------------------------
 (2) _dispHeader                                          44    44      0    1527
                                              8 BANK0     44    44      0
                            _dispSTR
                            _initLCD
                           _instCtrl
 ---------------------------------------------------------------------------------
 (3) _initLCD                                              0     0      0     613
                              _delay
                           _instCtrl
 ---------------------------------------------------------------------------------
 (3) _dispSTR                                              4     4      0     512
                                              4 BANK0      4     4      0
                           _dataCtrl
 ---------------------------------------------------------------------------------
 (2) _beginCount                                           4     4      0    2565
                                              9 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                           _dataCtrl
                              _delay
                           _instCtrl
 ---------------------------------------------------------------------------------
 (3) _instCtrl                                             1     1      0     322
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _dataCtrl                                             1     1      0     322
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (4) _delay                                                3     1      2     291
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              7     3      4     823
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     705
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  6     6      0       0
                                              0 COMMON     6     6      0
                         _toogleFlag
 ---------------------------------------------------------------------------------
 (7) _toogleFlag                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dispHeader
     _dispSTR
       _dataCtrl
         _delay
     _initLCD
       _delay
       _instCtrl
         _delay
     _instCtrl
       _delay
   _dispLCD
     _beginCount
       ___awdiv
       ___awmod
       _dataCtrl
         _delay
       _delay
       _instCtrl
         _delay
     _dispHeader
       _dispSTR
         _dataCtrl
           _delay
       _initLCD
         _delay
         _instCtrl
           _delay
       _instCtrl
         _delay

 _ISR (ROOT)
   _toogleFlag

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      28       7       50.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     36      44       5       85.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       8       1       57.1%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      74      12        0.0%
ABS                  0      0      74       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Mon Feb 27 18:39:59 2023

                      pc 0002              __CFG_CP$OFF 0000             ___awdiv@sign 0026  
                     fsr 0004                      l108 0182                      _GIE 005F  
                    _RA0 0028                      _RA1 0029                      _RB0 0030  
                    _RA2 002A             __CFG_CPD$OFF 0000                      _ISR 02AA  
                    u905 01B1                      u915 01BD                      u835 03AA  
                    u925 01C7                      u885 01A5                      u985 01FC  
                    fsr0 0004                      indf 0000             ___awmod@sign 0026  
           __CFG_FOSC$XT 0000             __CFG_LVP$OFF 0000                     ?_ISR 0070  
                   l1202 018F                     l1220 01B0                     l1300 00E1  
                   l1230 01D1                     l1208 019A                     l1304 003F  
                   l1312 0108                     l1234 01D9                     l1226 01C6  
                   l1218 01A2                     l1250 01F3                     l1330 0157  
                   l1260 0207                     l1156 039E                     l1324 0145  
                   l1246 01EC                     l1318 012B                     l1272 0228  
                   l1264 0215                     l1328 014E                     l1258 01F9  
                   l1338 0168                     l1346 0175                     l1268 0220  
                   l1188 034A                     l1372 033B                     l1396 017A  
                   _T0IE 005D                     _T0IF 005A                     u1005 020D  
                   u1015 0216                     u1040 0248                     u1105 0113  
                   u1050 026B                     u1115 0120                     u1125 0136  
                   u1135 0143                     u1095 00FE                     _INTE 005C  
                   _INTF 0059             __CFG_WRT$OFF 0000                     _main 0323  
                   btemp 007E            __CFG_BOREN$ON 0000                     ltemp 007E  
                   start 0012                     ttemp 007E                     wtemp 007E  
                  ??_ISR 0070                    ?_main 0070          __end_of___awdiv 01E0  
          __CFG_WDTE$OFF 0000          __end_of___awmod 022F                    _CMCON 009C  
        ___awdiv@divisor 0020                    i1l131 02BC          ___awdiv@counter 0025  
                  _PORTC 0007                    _PORTD 0008                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
          __CFG_PWRTE$ON 0000          __end_of_dispLCD 0183          __end_of_dispSTR 0367  
        __end_of_initLCD 0323                    _delay 039E                    pclath 000A  
                  ltemp0 007E                    ltemp1 0082                    ltemp2 0086  
                  ltemp3 0080                    ttemp0 007E                    ttemp1 0081  
                  ttemp2 0084                    ttemp3 0087                    ttemp4 007F  
                  status 0003                    wtemp0 007E                    wtemp1 0080  
                  wtemp2 0082                    wtemp3 0084                    wtemp4 0086  
                  wtemp5 0088                    wtemp6 007F          __initialization 0015  
           __end_of_main 0345                   ??_main 0076         dispHeader@header 002C  
                 ?_delay 0020                   _ADCON1 009F         ___awdiv@dividend 0022  
                 i1l1132 02C5                   i1l1082 028D                   i1l1092 02A2  
                 i1l1086 0294         __end_of_dataCtrl 038D                ??___awdiv 0024  
              ??___awmod 0024         ___awdiv@quotient 0027          ___awmod@divisor 0020  
       __end_of_instCtrl 037A                ??_dispLCD 0076          ___awmod@counter 0025  
              ??_dispSTR 0024                ??_initLCD 0076                   saved_w 007E  
__end_of__initialization 003B           __pcstackCOMMON 0070             __pidataBANK0 03AF  
           __pidataBANK1 02D3            __end_of_delay 03AF               _beginCount 003F  
                ??_delay 0022        dispHeader@header2 0040               __pbssBANK0 0056  
             __pmaintext 0323               __pintentry 0004               _dispHeader 022F  
              ?_dataCtrl 0070                ?_instCtrl 0070               _count_flag 0076  
                ___awdiv 0183                  ___awmod 01E0                  _dispLCD 00ED  
                _dispSTR 0345                  __ptext1 00ED                  __ptext2 022F  
                __ptext3 02FB                  __ptext4 0345                  __ptext5 003F  
                __ptext6 0367                  __ptext7 037A                  __ptext8 039E  
                __ptext9 01E0                  _dispMin 0058                  _dispSec 005A  
                _initLCD 02FB             __size_of_ISR 0029               ??_dataCtrl 0076  
       ___awmod@dividend 0022               delay@timer 0020                  _minutes 0060  
                _seconds 0062              ?_beginCount 0070     end_of_initialization 003B  
             ??_instCtrl 0076         beginCount@secLSB 0029         beginCount@secMSB 002B  
             dispSTR@STR 0027              ?_dispHeader 0070             instCtrl@INST 0023  
             _toogleFlag 027D      __size_of_beginCount 00AE          dispHeader@F1181 00B4  
        dispHeader@F1179 00A0      start_initialization 0015              __end_of_ISR 02D3  
           dataCtrl@DATA 0023      __size_of_dispHeader 004E               init_fetch0 038D  
            __pdataBANK0 0062              __pdataBANK1 00A0              __pbssCOMMON 0076  
              ___latbits 0002            __pcstackBANK0 0020        __size_of_dataCtrl 0013  
            ?_toogleFlag 0070        __size_of_instCtrl 0013                _flagPause 005C  
              _flagStart 005E                 ?___awdiv 0020                 ?___awmod 0020  
               ?_dispLCD 0070                 ?_dispSTR 0070                 ?_initLCD 0070  
           ??_beginCount 0076           __size_of_delay 0011        interrupt_function 0004  
     __end_of_beginCount 00ED      __size_of_toogleFlag 002D             ??_dispHeader 0028  
     __end_of_dispHeader 027D         __size_of___awdiv 005D         __size_of___awmod 004F  
       __size_of_dispLCD 0096         __size_of_dispSTR 0022                 _dataCtrl 037A  
               _dataRead 0056         __size_of_initLCD 0028                 __ptext10 0183  
               __ptext11 02AA                 __ptext12 027D            __size_of_main 0022  
               _instCtrl 0367                 dispSTR@i 0025                 init_ram0 0391  
           ??_toogleFlag 0070                 intlevel1 0000              dispLCD@DATA 0054  
     __end_of_toogleFlag 02AA               _OPTION_REG 0081  
