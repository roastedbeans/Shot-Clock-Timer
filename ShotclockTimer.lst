

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Tue Feb 28 00:47:39 2023

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000D                     	;# 
    41  000E                     	;# 
    42  000E                     	;# 
    43  000F                     	;# 
    44  0010                     	;# 
    45  0011                     	;# 
    46  0012                     	;# 
    47  0013                     	;# 
    48  0014                     	;# 
    49  0015                     	;# 
    50  0015                     	;# 
    51  0016                     	;# 
    52  0017                     	;# 
    53  0018                     	;# 
    54  0019                     	;# 
    55  001A                     	;# 
    56  001B                     	;# 
    57  001B                     	;# 
    58  001C                     	;# 
    59  001D                     	;# 
    60  001E                     	;# 
    61  001F                     	;# 
    62  0081                     	;# 
    63  0085                     	;# 
    64  0086                     	;# 
    65  0087                     	;# 
    66  0088                     	;# 
    67  0089                     	;# 
    68  008C                     	;# 
    69  008D                     	;# 
    70  008E                     	;# 
    71  0091                     	;# 
    72  0092                     	;# 
    73  0093                     	;# 
    74  0094                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009C                     	;# 
    78  009D                     	;# 
    79  009E                     	;# 
    80  009F                     	;# 
    81  010C                     	;# 
    82  010D                     	;# 
    83  010E                     	;# 
    84  010F                     	;# 
    85  018C                     	;# 
    86  018D                     	;# 
    87                           
    88                           	psect	idataBANK0
    89  03B2                     __pidataBANK0:	
    90                           
    91                           ;initializer for dispHeader@F1179
    92  03B2  3453               	retlw	83
    93  03B3  3468               	retlw	104
    94  03B4  346F               	retlw	111
    95  03B5  3474               	retlw	116
    96  03B6  3420               	retlw	32
    97  03B7  3443               	retlw	67
    98  03B8  346C               	retlw	108
    99  03B9  346F               	retlw	111
   100  03BA  3463               	retlw	99
   101  03BB  346B               	retlw	107
   102  03BC  3420               	retlw	32
   103  03BD  3454               	retlw	84
   104  03BE  3469               	retlw	105
   105  03BF  346D               	retlw	109
   106  03C0  3465               	retlw	101
   107  03C1  3472               	retlw	114
   108  03C2  3400               	retlw	0
   109  03C3  3400               	retlw	0
   110  03C4  3400               	retlw	0
   111  03C5  3400               	retlw	0
   112                           
   113                           ;initializer for _flagPause
   114  03C6  3401               	retlw	1
   115  03C7  3400               	retlw	0
   116                           
   117                           ;initializer for _seconds
   118  03C8  3418               	retlw	24
   119  03C9  3400               	retlw	0
   120  0007                     _PORTC	set	7
   121  0008                     _PORTD	set	8
   122  005F                     _GIE	set	95
   123  005C                     _INTE	set	92
   124  0059                     _INTF	set	89
   125  0028                     _RA0	set	40
   126  0029                     _RA1	set	41
   127  002A                     _RA2	set	42
   128  0044                     _RD4	set	68
   129  005D                     _T0IE	set	93
   130  005A                     _T0IF	set	90
   131  009F                     _ADCON1	set	159
   132  009C                     _CMCON	set	156
   133  0081                     _OPTION_REG	set	129
   134  0085                     _TRISA	set	133
   135  0086                     _TRISB	set	134
   136  0087                     _TRISC	set	135
   137  0088                     _TRISD	set	136
   138                           
   139                           ; #config settings
   140  0000                     
   141                           	psect	cinit
   142  0015                     start_initialization:	
   143  0015                     __initialization:	
   144                           
   145                           ; Clear objects allocated to COMMON
   146  0015  01F6               	clrf	__pbssCOMMON& (0+127)
   147  0016  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   148  0017  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   149  0018  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   150                           
   151                           ; Clear objects allocated to BANK0
   152  0019  01DC               	clrf	__pbssBANK0& (0+127)
   153  001A  01DD               	clrf	(__pbssBANK0+1)& (0+127)
   154  001B  01DE               	clrf	(__pbssBANK0+2)& (0+127)
   155  001C  01DF               	clrf	(__pbssBANK0+3)& (0+127)
   156                           
   157                           ; Initialize objects allocated to BANK0
   158  001D  1383               	bcf	3,7	;select IRP bank0
   159  001E  305C               	movlw	low (__pdataBANK0+24)
   160  001F  00FD               	movwf	btemp+-1
   161  0020  3003               	movlw	high __pidataBANK0
   162  0021  00FE               	movwf	btemp
   163  0022  30B2               	movlw	low __pidataBANK0
   164  0023  00FF               	movwf	btemp+1
   165  0024  3044               	movlw	low __pdataBANK0
   166  0025  0084               	movwf	4
   167  0026  120A  118A  2407   	fcall	init_ram0
   168  0029                     end_of_initialization:	
   169                           ;End of C runtime variable initialization code
   170                           
   171  0029                     __end_of__initialization:	
   172  0029  0183               	clrf	3
   173  002A  120A  118A  2B94   	ljmp	_main	;jump to C main() function
   174                           
   175                           	psect	bssCOMMON
   176  0076                     __pbssCOMMON:	
   177  0076                     _count_flag:	
   178  0076                     	ds	2
   179  0078                     _dataRead:	
   180  0078                     	ds	2
   181                           
   182                           	psect	bssBANK0
   183  005C                     __pbssBANK0:	
   184  005C                     _dispSec:	
   185  005C                     	ds	2
   186  005E                     _newSeconds:	
   187  005E                     	ds	2
   188                           
   189                           	psect	dataBANK0
   190  0044                     __pdataBANK0:	
   191  0044                     dispHeader@F1179:	
   192  0044                     	ds	20
   193  0058                     _flagPause:	
   194  0058                     	ds	2
   195  005A                     _seconds:	
   196  005A                     	ds	2
   197                           
   198                           	psect	inittext
   199  0403                     init_fetch0:	
   200                           ;	Called with low address in FSR and high address in W
   201                           
   202  0403  087E               	movf	126,w
   203  0404  008A               	movwf	10
   204  0405  087F               	movf	127,w
   205  0406  0082               	movwf	2
   206  0407                     init_ram0:	
   207                           ;Called with:
   208                           ;	high address of idata address in btemp 
   209                           ;	low address of idata address in btemp+1 
   210                           ;	low address of data in FSR
   211                           ;	high address + 1 of data in btemp-1
   212                           
   213  0407  2403  120A  118A   	fcall	init_fetch0
   214  040A  0080               	movwf	0
   215  040B  0A84               	incf	4,f
   216  040C  0804               	movf	4,w
   217  040D  067D               	xorwf	125,w
   218  040E  1903               	btfsc	3,2
   219  040F  3400               	retlw	0
   220  0410  0AFF               	incf	127,f
   221  0411  1903               	btfsc	3,2
   222  0412  0AFE               	incf	126,f
   223  0413  2C07               	goto	init_ram0
   224                           
   225                           	psect	cstackCOMMON
   226  0070                     __pcstackCOMMON:	
   227  0070                     ?_dispHeader:	
   228  0070                     ?_beginCount:	
   229                           ; 0 bytes @ 0x0
   230                           
   231  0070                     ?_DAVBL:	
   232                           ; 0 bytes @ 0x0
   233                           
   234  0070                     ?_instCtrl:	
   235                           ; 0 bytes @ 0x0
   236                           
   237  0070                     ?_dataCtrl:	
   238                           ; 0 bytes @ 0x0
   239                           
   240  0070                     ?_dispSTR:	
   241                           ; 0 bytes @ 0x0
   242                           
   243  0070                     ?_toogleFlag:	
   244                           ; 0 bytes @ 0x0
   245                           
   246  0070                     ??_toogleFlag:	
   247                           ; 0 bytes @ 0x0
   248                           
   249  0070                     ?_main:	
   250                           ; 0 bytes @ 0x0
   251                           
   252  0070                     ?_initLCD:	
   253                           ; 0 bytes @ 0x0
   254                           
   255  0070                     ?_ISR:	
   256                           ; 0 bytes @ 0x0
   257                           
   258  0070                     ??_ISR:	
   259                           ; 0 bytes @ 0x0
   260                           
   261                           
   262                           ; 0 bytes @ 0x0
   263  0070                     	ds	4
   264  0074                     ?_delay:	
   265  0074                     ??___awdiv:	
   266                           ; 0 bytes @ 0x4
   267                           
   268  0074                     ??___awmod:	
   269                           ; 0 bytes @ 0x4
   270                           
   271  0074                     delay@timer:	
   272                           ; 0 bytes @ 0x4
   273                           
   274                           
   275                           ; 2 bytes @ 0x4
   276  0074                     	ds	2
   277  0076                     ??_DAVBL:	
   278  0076                     ??_instCtrl:	
   279                           ; 0 bytes @ 0x6
   280                           
   281  0076                     ??_dataCtrl:	
   282                           ; 0 bytes @ 0x6
   283                           
   284  0076                     ??_main:	
   285                           ; 0 bytes @ 0x6
   286                           
   287  0076                     ??_initLCD:	
   288                           ; 0 bytes @ 0x6
   289                           
   290                           
   291                           	psect	cstackBANK0
   292  0020                     __pcstackBANK0:	
   293                           ; 0 bytes @ 0x6
   294                           
   295  0020                     ??_delay:	
   296  0020                     ?___awdiv:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0020                     ?___awmod:	
   300                           ; 2 bytes @ 0x0
   301                           
   302  0020                     ___awdiv@divisor:	
   303                           ; 2 bytes @ 0x0
   304                           
   305  0020                     ___awmod@divisor:	
   306                           ; 2 bytes @ 0x0
   307                           
   308                           
   309                           ; 2 bytes @ 0x0
   310  0020                     	ds	1
   311  0021                     instCtrl@INST:	
   312  0021                     dataCtrl@DATA:	
   313                           ; 1 bytes @ 0x1
   314                           
   315  0021                     DAVBL@DATA:	
   316                           ; 1 bytes @ 0x1
   317                           
   318                           
   319                           ; 2 bytes @ 0x1
   320  0021                     	ds	1
   321  0022                     ??_dispSTR:	
   322  0022                     ___awdiv@dividend:	
   323                           ; 0 bytes @ 0x2
   324                           
   325  0022                     ___awmod@dividend:	
   326                           ; 2 bytes @ 0x2
   327                           
   328                           
   329                           ; 2 bytes @ 0x2
   330  0022                     	ds	1
   331  0023                     dispSTR@STR:	
   332                           
   333                           ; 1 bytes @ 0x3
   334  0023                     	ds	1
   335  0024                     ___awdiv@counter:	
   336  0024                     ___awmod@counter:	
   337                           ; 1 bytes @ 0x4
   338                           
   339  0024                     dispSTR@i:	
   340                           ; 1 bytes @ 0x4
   341                           
   342                           
   343                           ; 2 bytes @ 0x4
   344  0024                     	ds	1
   345  0025                     ___awdiv@sign:	
   346  0025                     ___awmod@sign:	
   347                           ; 1 bytes @ 0x5
   348                           
   349                           
   350                           ; 1 bytes @ 0x5
   351  0025                     	ds	1
   352  0026                     ___awdiv@quotient:	
   353                           
   354                           ; 2 bytes @ 0x6
   355  0026                     	ds	2
   356  0028                     ??_dispHeader:	
   357  0028                     ??_beginCount:	
   358                           ; 0 bytes @ 0x8
   359                           
   360                           
   361                           ; 0 bytes @ 0x8
   362  0028                     	ds	2
   363  002A                     beginCount@secLSB:	
   364                           
   365                           ; 2 bytes @ 0xA
   366  002A                     	ds	2
   367  002C                     beginCount@secLSB_83:	
   368  002C                     dispHeader@header:	
   369                           ; 2 bytes @ 0xC
   370                           
   371                           
   372                           ; 20 bytes @ 0xC
   373  002C                     	ds	2
   374  002E                     beginCount@secMSB:	
   375                           
   376                           ; 2 bytes @ 0xE
   377  002E                     	ds	2
   378  0030                     beginCount@secMSB_84:	
   379                           
   380                           ; 2 bytes @ 0x10
   381  0030                     	ds	16
   382  0040                     dispHeader@secLSB:	
   383                           
   384                           ; 2 bytes @ 0x20
   385  0040                     	ds	2
   386  0042                     dispHeader@secMSB:	
   387                           
   388                           ; 2 bytes @ 0x22
   389  0042                     	ds	2
   390                           
   391                           	psect	maintext
   392  0394                     __pmaintext:	
   393 ;;
   394 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   395 ;;
   396 ;; *************** function _main *****************
   397 ;; Defined at:
   398 ;;		line 29 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   399 ;; Parameters:    Size  Location     Type
   400 ;;		None
   401 ;; Auto vars:     Size  Location     Type
   402 ;;		None
   403 ;; Return value:  Size  Location     Type
   404 ;;		None               void
   405 ;; Registers used:
   406 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   407 ;; Tracked objects:
   408 ;;		On entry : 17F/0
   409 ;;		On exit  : 0/0
   410 ;;		Unchanged: 0/0
   411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   412 ;;      Params:         0       0       0       0       0
   413 ;;      Locals:         0       0       0       0       0
   414 ;;      Temps:          0       0       0       0       0
   415 ;;      Totals:         0       0       0       0       0
   416 ;;Total ram usage:        0 bytes
   417 ;; Hardware stack levels required when called:    6
   418 ;; This function calls:
   419 ;;		_beginCount
   420 ;;		_dispHeader
   421 ;; This function is called by:
   422 ;;		Startup code after reset
   423 ;; This function uses a non-reentrant model
   424 ;;
   425                           
   426                           
   427                           ;psect for function _main
   428  0394                     _main:	
   429                           
   430                           ;ShotclockTimer.c: 31: OPTION_REG = 0x43;
   431                           
   432                           ;incstack = 0
   433                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   434  0394  3043               	movlw	67
   435  0395  1683               	bsf	3,5	;RP0=1, select bank1
   436  0396  1303               	bcf	3,6	;RP1=0, select bank1
   437  0397  0081               	movwf	1	;volatile
   438                           
   439                           ;ShotclockTimer.c: 32: INTE = 1;
   440  0398  160B               	bsf	11,4	;volatile
   441                           
   442                           ;ShotclockTimer.c: 33: INTF = 0;
   443  0399  108B               	bcf	11,1	;volatile
   444                           
   445                           ;ShotclockTimer.c: 34: T0IE = 1;
   446  039A  168B               	bsf	11,5	;volatile
   447                           
   448                           ;ShotclockTimer.c: 35: T0IF = 0;
   449  039B  110B               	bcf	11,2	;volatile
   450                           
   451                           ;ShotclockTimer.c: 36: GIE = 1;
   452  039C  178B               	bsf	11,7	;volatile
   453                           
   454                           ;ShotclockTimer.c: 38: ADCON1 = 0x06;
   455  039D  3006               	movlw	6
   456  039E  009F               	movwf	31	;volatile
   457                           
   458                           ;ShotclockTimer.c: 39: CMCON = 0x07;
   459  039F  3007               	movlw	7
   460  03A0  009C               	movwf	28	;volatile
   461                           
   462                           ;ShotclockTimer.c: 40: TRISA = 0x00;
   463  03A1  0185               	clrf	5	;volatile
   464                           
   465                           ;ShotclockTimer.c: 41: TRISB = 0x01;
   466  03A2  3001               	movlw	1
   467  03A3  0086               	movwf	6	;volatile
   468                           
   469                           ;ShotclockTimer.c: 42: TRISC = 0x00;
   470  03A4  0187               	clrf	7	;volatile
   471                           
   472                           ;ShotclockTimer.c: 43: TRISD = 0x1F;
   473  03A5  301F               	movlw	31
   474  03A6  0088               	movwf	8	;volatile
   475                           
   476                           ;ShotclockTimer.c: 45: dispHeader();
   477  03A7  120A  118A  2152  120A  118A  	fcall	_dispHeader
   478  03AC                     l1372:	
   479                           ;ShotclockTimer.c: 47: while(1)
   480                           
   481                           
   482                           ;ShotclockTimer.c: 48: {
   483                           ;ShotclockTimer.c: 49: beginCount();
   484  03AC  120A  118A  202D  120A  118A  	fcall	_beginCount
   485  03B1  2BAC               	goto	l1372
   486  03B2                     __end_of_main:	
   487                           
   488                           	psect	text1
   489  0152                     __ptext1:	
   490 ;; *************** function _dispHeader *****************
   491 ;; Defined at:
   492 ;;		line 169 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   493 ;; Parameters:    Size  Location     Type
   494 ;;		None
   495 ;; Auto vars:     Size  Location     Type
   496 ;;  header         20   12[BANK0 ] unsigned char [20]
   497 ;;  secMSB          2   34[BANK0 ] int 
   498 ;;  secLSB          2   32[BANK0 ] int 
   499 ;; Return value:  Size  Location     Type
   500 ;;		None               void
   501 ;; Registers used:
   502 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   508 ;;      Params:         0       0       0       0       0
   509 ;;      Locals:         0      24       0       0       0
   510 ;;      Temps:          0       4       0       0       0
   511 ;;      Totals:         0      28       0       0       0
   512 ;;Total ram usage:       28 bytes
   513 ;; Hardware stack levels used:    1
   514 ;; Hardware stack levels required when called:    5
   515 ;; This function calls:
   516 ;;		___awdiv
   517 ;;		___awmod
   518 ;;		_dataCtrl
   519 ;;		_dispSTR
   520 ;;		_initLCD
   521 ;;		_instCtrl
   522 ;; This function is called by:
   523 ;;		_main
   524 ;; This function uses a non-reentrant model
   525 ;;
   526                           
   527                           
   528                           ;psect for function _dispHeader
   529  0152                     _dispHeader:	
   530                           
   531                           ;ShotclockTimer.c: 171: initLCD();
   532                           
   533                           ;incstack = 0
   534                           ; Regs used in _dispHeader: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   535  0152  120A  118A  232B  120A  118A  	fcall	_initLCD
   536                           
   537                           ;ShotclockTimer.c: 172: instCtrl(0x82);
   538  0157  3082               	movlw	130
   539  0158  120A  118A  23CA  120A  118A  	fcall	_instCtrl
   540                           
   541                           ;ShotclockTimer.c: 173: char header[20] = "Shot Clock Timer";
   542  015D  302C               	movlw	dispHeader@header& (0+255)
   543  015E  0084               	movwf	4
   544  015F  3044               	movlw	low dispHeader@F1179
   545  0160  1283               	bcf	3,5	;RP0=0, select bank0
   546  0161  1303               	bcf	3,6	;RP1=0, select bank0
   547  0162  00A8               	movwf	??_dispHeader
   548  0163  0804               	movf	4,w
   549  0164  00A9               	movwf	??_dispHeader+1
   550  0165  3014               	movlw	20
   551  0166  00AA               	movwf	??_dispHeader+2
   552  0167                     u980:	
   553  0167  0828               	movf	??_dispHeader,w
   554  0168  0084               	movwf	4
   555  0169  1383               	bcf	3,7	;select IRP bank0
   556  016A  0800               	movf	0,w
   557  016B  00AB               	movwf	??_dispHeader+3
   558  016C  0AA8               	incf	??_dispHeader,f
   559  016D  0829               	movf	??_dispHeader+1,w
   560  016E  0084               	movwf	4
   561  016F  082B               	movf	??_dispHeader+3,w
   562  0170  0080               	movwf	0
   563  0171  0AA9               	incf	??_dispHeader+1,f
   564  0172  0BAA               	decfsz	??_dispHeader+2,f
   565  0173  2967               	goto	u980
   566                           
   567                           ;ShotclockTimer.c: 174: dispSTR(header);
   568  0174  302C               	movlw	dispHeader@header& (0+255)
   569  0175  120A  118A  2351  120A  118A  	fcall	_dispSTR
   570                           
   571                           ;ShotclockTimer.c: 175: dispSec = (seconds%60);
   572  017A  303C               	movlw	60
   573  017B  1283               	bcf	3,5	;RP0=0, select bank0
   574  017C  1303               	bcf	3,6	;RP1=0, select bank0
   575  017D  00A0               	movwf	___awmod@divisor
   576  017E  3000               	movlw	0
   577  017F  00A1               	movwf	___awmod@divisor+1
   578  0180  085B               	movf	_seconds+1,w
   579  0181  01A3               	clrf	___awmod@dividend+1
   580  0182  07A3               	addwf	___awmod@dividend+1,f
   581  0183  085A               	movf	_seconds,w
   582  0184  01A2               	clrf	___awmod@dividend
   583  0185  07A2               	addwf	___awmod@dividend,f
   584  0186  120A  118A  22DC  120A  118A  	fcall	___awmod
   585  018B  1283               	bcf	3,5	;RP0=0, select bank0
   586  018C  1303               	bcf	3,6	;RP1=0, select bank0
   587  018D  0821               	movf	?___awmod+1,w
   588  018E  01DD               	clrf	_dispSec+1
   589  018F  07DD               	addwf	_dispSec+1,f
   590  0190  0820               	movf	?___awmod,w
   591  0191  01DC               	clrf	_dispSec
   592  0192  07DC               	addwf	_dispSec,f
   593                           
   594                           ;ShotclockTimer.c: 177: int secLSB;
   595                           ;ShotclockTimer.c: 178: secLSB = dispSec%10;
   596  0193  300A               	movlw	10
   597  0194  00A0               	movwf	___awmod@divisor
   598  0195  3000               	movlw	0
   599  0196  00A1               	movwf	___awmod@divisor+1
   600  0197  085D               	movf	_dispSec+1,w
   601  0198  01A3               	clrf	___awmod@dividend+1
   602  0199  07A3               	addwf	___awmod@dividend+1,f
   603  019A  085C               	movf	_dispSec,w
   604  019B  01A2               	clrf	___awmod@dividend
   605  019C  07A2               	addwf	___awmod@dividend,f
   606  019D  120A  118A  22DC  120A  118A  	fcall	___awmod
   607  01A2  1283               	bcf	3,5	;RP0=0, select bank0
   608  01A3  1303               	bcf	3,6	;RP1=0, select bank0
   609  01A4  0821               	movf	?___awmod+1,w
   610  01A5  01C1               	clrf	dispHeader@secLSB+1
   611  01A6  07C1               	addwf	dispHeader@secLSB+1,f
   612  01A7  0820               	movf	?___awmod,w
   613  01A8  01C0               	clrf	dispHeader@secLSB
   614  01A9  07C0               	addwf	dispHeader@secLSB,f
   615                           
   616                           ;ShotclockTimer.c: 179: int secMSB;
   617                           ;ShotclockTimer.c: 180: secMSB = dispSec/10;
   618  01AA  300A               	movlw	10
   619  01AB  00A0               	movwf	___awdiv@divisor
   620  01AC  3000               	movlw	0
   621  01AD  00A1               	movwf	___awdiv@divisor+1
   622  01AE  085D               	movf	_dispSec+1,w
   623  01AF  01A3               	clrf	___awdiv@dividend+1
   624  01B0  07A3               	addwf	___awdiv@dividend+1,f
   625  01B1  085C               	movf	_dispSec,w
   626  01B2  01A2               	clrf	___awdiv@dividend
   627  01B3  07A2               	addwf	___awdiv@dividend,f
   628  01B4  120A  118A  227F  120A  118A  	fcall	___awdiv
   629  01B9  1283               	bcf	3,5	;RP0=0, select bank0
   630  01BA  1303               	bcf	3,6	;RP1=0, select bank0
   631  01BB  0821               	movf	?___awdiv+1,w
   632  01BC  01C3               	clrf	dispHeader@secMSB+1
   633  01BD  07C3               	addwf	dispHeader@secMSB+1,f
   634  01BE  0820               	movf	?___awdiv,w
   635  01BF  01C2               	clrf	dispHeader@secMSB
   636  01C0  07C2               	addwf	dispHeader@secMSB,f
   637                           
   638                           ;ShotclockTimer.c: 181: secMSB = secMSB%10;
   639  01C1  300A               	movlw	10
   640  01C2  00A0               	movwf	___awmod@divisor
   641  01C3  3000               	movlw	0
   642  01C4  00A1               	movwf	___awmod@divisor+1
   643  01C5  0843               	movf	dispHeader@secMSB+1,w
   644  01C6  01A3               	clrf	___awmod@dividend+1
   645  01C7  07A3               	addwf	___awmod@dividend+1,f
   646  01C8  0842               	movf	dispHeader@secMSB,w
   647  01C9  01A2               	clrf	___awmod@dividend
   648  01CA  07A2               	addwf	___awmod@dividend,f
   649  01CB  120A  118A  22DC  120A  118A  	fcall	___awmod
   650  01D0  1283               	bcf	3,5	;RP0=0, select bank0
   651  01D1  1303               	bcf	3,6	;RP1=0, select bank0
   652  01D2  0821               	movf	?___awmod+1,w
   653  01D3  01C3               	clrf	dispHeader@secMSB+1
   654  01D4  07C3               	addwf	dispHeader@secMSB+1,f
   655  01D5  0820               	movf	?___awmod,w
   656  01D6  01C2               	clrf	dispHeader@secMSB
   657  01D7  07C2               	addwf	dispHeader@secMSB,f
   658                           
   659                           ;ShotclockTimer.c: 182: instCtrl(0xC8);
   660  01D8  30C8               	movlw	200
   661  01D9  120A  118A  23CA  120A  118A  	fcall	_instCtrl
   662                           
   663                           ;ShotclockTimer.c: 183: dataCtrl(secMSB+48);
   664  01DE  1283               	bcf	3,5	;RP0=0, select bank0
   665  01DF  1303               	bcf	3,6	;RP1=0, select bank0
   666  01E0  0842               	movf	dispHeader@secMSB,w
   667  01E1  3E30               	addlw	48
   668  01E2  120A  118A  23DD  120A  118A  	fcall	_dataCtrl
   669                           
   670                           ;ShotclockTimer.c: 184: dataCtrl(secLSB+48);
   671  01E7  1283               	bcf	3,5	;RP0=0, select bank0
   672  01E8  1303               	bcf	3,6	;RP1=0, select bank0
   673  01E9  0840               	movf	dispHeader@secLSB,w
   674  01EA  3E30               	addlw	48
   675  01EB  120A  118A  23DD   	fcall	_dataCtrl
   676  01EE  0008               	return
   677  01EF                     __end_of_dispHeader:	
   678                           
   679                           	psect	text2
   680  032B                     __ptext2:	
   681 ;; *************** function _initLCD *****************
   682 ;; Defined at:
   683 ;;		line 110 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   684 ;; Parameters:    Size  Location     Type
   685 ;;		None
   686 ;; Auto vars:     Size  Location     Type
   687 ;;		None
   688 ;; Return value:  Size  Location     Type
   689 ;;		None               void
   690 ;; Registers used:
   691 ;;		wreg, status,2, status,0, pclath, cstack
   692 ;; Tracked objects:
   693 ;;		On entry : 0/0
   694 ;;		On exit  : 0/0
   695 ;;		Unchanged: 0/0
   696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   697 ;;      Params:         0       0       0       0       0
   698 ;;      Locals:         0       0       0       0       0
   699 ;;      Temps:          0       0       0       0       0
   700 ;;      Totals:         0       0       0       0       0
   701 ;;Total ram usage:        0 bytes
   702 ;; Hardware stack levels used:    1
   703 ;; Hardware stack levels required when called:    4
   704 ;; This function calls:
   705 ;;		_delay
   706 ;;		_instCtrl
   707 ;; This function is called by:
   708 ;;		_dispHeader
   709 ;; This function uses a non-reentrant model
   710 ;;
   711                           
   712                           
   713                           ;psect for function _initLCD
   714  032B                     _initLCD:	
   715                           
   716                           ;ShotclockTimer.c: 112: delay(30);
   717                           
   718                           ;incstack = 0
   719                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
   720  032B  301E               	movlw	30
   721  032C  00F4               	movwf	delay@timer
   722  032D  3000               	movlw	0
   723  032E  00F5               	movwf	delay@timer+1
   724  032F  120A  118A  2414  120A  118A  	fcall	_delay
   725                           
   726                           ;ShotclockTimer.c: 113: instCtrl(0x38);
   727  0334  3038               	movlw	56
   728  0335  120A  118A  23CA  120A  118A  	fcall	_instCtrl
   729                           
   730                           ;ShotclockTimer.c: 114: instCtrl(0x08);
   731  033A  3008               	movlw	8
   732  033B  120A  118A  23CA  120A  118A  	fcall	_instCtrl
   733                           
   734                           ;ShotclockTimer.c: 115: instCtrl(0x01);
   735  0340  3001               	movlw	1
   736  0341  120A  118A  23CA  120A  118A  	fcall	_instCtrl
   737                           
   738                           ;ShotclockTimer.c: 116: instCtrl(0x06);
   739  0346  3006               	movlw	6
   740  0347  120A  118A  23CA  120A  118A  	fcall	_instCtrl
   741                           
   742                           ;ShotclockTimer.c: 117: instCtrl(0x0E);
   743  034C  300E               	movlw	14
   744  034D  120A  118A  23CA   	fcall	_instCtrl
   745  0350  0008               	return
   746  0351                     __end_of_initLCD:	
   747                           
   748                           	psect	text3
   749  0351                     __ptext3:	
   750 ;; *************** function _dispSTR *****************
   751 ;; Defined at:
   752 ;;		line 187 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   753 ;; Parameters:    Size  Location     Type
   754 ;;  STR             1    wreg     PTR unsigned char 
   755 ;;		 -> dispHeader@header(20), 
   756 ;; Auto vars:     Size  Location     Type
   757 ;;  STR             1    3[BANK0 ] PTR unsigned char 
   758 ;;		 -> dispHeader@header(20), 
   759 ;;  i               2    4[BANK0 ] int 
   760 ;; Return value:  Size  Location     Type
   761 ;;		None               void
   762 ;; Registers used:
   763 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   764 ;; Tracked objects:
   765 ;;		On entry : 0/0
   766 ;;		On exit  : 0/0
   767 ;;		Unchanged: 0/0
   768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   769 ;;      Params:         0       0       0       0       0
   770 ;;      Locals:         0       3       0       0       0
   771 ;;      Temps:          0       1       0       0       0
   772 ;;      Totals:         0       4       0       0       0
   773 ;;Total ram usage:        4 bytes
   774 ;; Hardware stack levels used:    1
   775 ;; Hardware stack levels required when called:    4
   776 ;; This function calls:
   777 ;;		_dataCtrl
   778 ;; This function is called by:
   779 ;;		_dispHeader
   780 ;; This function uses a non-reentrant model
   781 ;;
   782                           
   783                           
   784                           ;psect for function _dispSTR
   785  0351                     _dispSTR:	
   786                           
   787                           ;incstack = 0
   788                           ; Regs used in _dispSTR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   789                           ;dispSTR@STR stored from wreg
   790  0351  1283               	bcf	3,5	;RP0=0, select bank0
   791  0352  1303               	bcf	3,6	;RP1=0, select bank0
   792  0353  00A3               	movwf	dispSTR@STR
   793                           
   794                           ;ShotclockTimer.c: 189: for(int i = 0;;i++)
   795  0354  01A4               	clrf	dispSTR@i
   796  0355  01A5               	clrf	dispSTR@i+1
   797  0356                     l1212:	
   798                           
   799                           ;ShotclockTimer.c: 190: {
   800                           ;ShotclockTimer.c: 191: if(STR[i] != '\0')
   801  0356  0824               	movf	dispSTR@i,w
   802  0357  0723               	addwf	dispSTR@STR,w
   803  0358  00A2               	movwf	??_dispSTR
   804  0359  0822               	movf	??_dispSTR,w
   805  035A  0084               	movwf	4
   806  035B  1383               	bcf	3,7	;select IRP bank0
   807  035C  0880               	movf	0,f
   808  035D  1903               	skipnz
   809  035E  0008               	return
   810                           
   811                           ;ShotclockTimer.c: 192: {
   812                           ;ShotclockTimer.c: 193: dataCtrl(STR[i]);
   813  035F  0824               	movf	dispSTR@i,w
   814  0360  0723               	addwf	dispSTR@STR,w
   815  0361  00A2               	movwf	??_dispSTR
   816  0362  0822               	movf	??_dispSTR,w
   817  0363  0084               	movwf	4
   818  0364  0800               	movf	0,w
   819  0365  120A  118A  23DD  120A  118A  	fcall	_dataCtrl
   820                           
   821                           ;ShotclockTimer.c: 195: else
   822                           ;ShotclockTimer.c: 196: {
   823                           ;ShotclockTimer.c: 197: return;
   824                           
   825                           ;ShotclockTimer.c: 194: }
   826  036A  3001               	movlw	1
   827  036B  1283               	bcf	3,5	;RP0=0, select bank0
   828  036C  1303               	bcf	3,6	;RP1=0, select bank0
   829  036D  07A4               	addwf	dispSTR@i,f
   830  036E  1803               	skipnc
   831  036F  0AA5               	incf	dispSTR@i+1,f
   832  0370  3000               	movlw	0
   833  0371  07A5               	addwf	dispSTR@i+1,f
   834  0372  2B56               	goto	l1212
   835  0373                     __end_of_dispSTR:	
   836                           
   837                           	psect	text4
   838  002D                     __ptext4:	
   839 ;; *************** function _beginCount *****************
   840 ;; Defined at:
   841 ;;		line 56 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;		None
   844 ;; Auto vars:     Size  Location     Type
   845 ;;  secMSB          2   14[BANK0 ] int 
   846 ;;  secLSB          2   10[BANK0 ] int 
   847 ;;  secMSB          2   16[BANK0 ] int 
   848 ;;  secLSB          2   12[BANK0 ] int 
   849 ;; Return value:  Size  Location     Type
   850 ;;		None               void
   851 ;; Registers used:
   852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   858 ;;      Params:         0       0       0       0       0
   859 ;;      Locals:         0       8       0       0       0
   860 ;;      Temps:          0       2       0       0       0
   861 ;;      Totals:         0      10       0       0       0
   862 ;;Total ram usage:       10 bytes
   863 ;; Hardware stack levels used:    1
   864 ;; Hardware stack levels required when called:    4
   865 ;; This function calls:
   866 ;;		_DAVBL
   867 ;;		___awdiv
   868 ;;		___awmod
   869 ;;		_dataCtrl
   870 ;;		_delay
   871 ;;		_instCtrl
   872 ;; This function is called by:
   873 ;;		_main
   874 ;; This function uses a non-reentrant model
   875 ;;
   876                           
   877                           
   878                           ;psect for function _beginCount
   879  002D                     _beginCount:	
   880                           
   881                           ;ShotclockTimer.c: 58: for(;seconds >= 0;seconds--)
   882                           
   883                           ;incstack = 0
   884                           ; Regs used in _beginCount: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   885  002D  2947               	goto	l1348
   886  002E                     l76:	
   887                           ;ShotclockTimer.c: 59: {
   888                           ;ShotclockTimer.c: 60: while(flagPause == 1)
   889                           
   890                           
   891                           ;ShotclockTimer.c: 61: {
   892                           ;ShotclockTimer.c: 62: if(RD4 == 1)
   893  002E  1E08               	btfss	8,4	;volatile
   894  002F  28BB               	goto	l1342
   895                           
   896                           ;ShotclockTimer.c: 63: {
   897                           ;ShotclockTimer.c: 64: dataRead = PORTD & 0x0F;
   898  0030  0808               	movf	8,w	;volatile
   899  0031  390F               	andlw	15
   900  0032  00A8               	movwf	??_beginCount
   901  0033  01A9               	clrf	??_beginCount+1
   902  0034  0828               	movf	??_beginCount,w
   903  0035  00F8               	movwf	_dataRead
   904  0036  0829               	movf	??_beginCount+1,w
   905  0037  00F9               	movwf	_dataRead+1
   906                           
   907                           ;ShotclockTimer.c: 65: DAVBL();
   908  0038  120A  118A  21EF  120A  118A  	fcall	_DAVBL
   909                           
   910                           ;ShotclockTimer.c: 66: dispSec = (seconds%60);
   911  003D  303C               	movlw	60
   912  003E  1283               	bcf	3,5	;RP0=0, select bank0
   913  003F  1303               	bcf	3,6	;RP1=0, select bank0
   914  0040  00A0               	movwf	___awmod@divisor
   915  0041  3000               	movlw	0
   916  0042  00A1               	movwf	___awmod@divisor+1
   917  0043  085B               	movf	_seconds+1,w
   918  0044  01A3               	clrf	___awmod@dividend+1
   919  0045  07A3               	addwf	___awmod@dividend+1,f
   920  0046  085A               	movf	_seconds,w
   921  0047  01A2               	clrf	___awmod@dividend
   922  0048  07A2               	addwf	___awmod@dividend,f
   923  0049  120A  118A  22DC  120A  118A  	fcall	___awmod
   924  004E  1283               	bcf	3,5	;RP0=0, select bank0
   925  004F  1303               	bcf	3,6	;RP1=0, select bank0
   926  0050  0821               	movf	?___awmod+1,w
   927  0051  01DD               	clrf	_dispSec+1
   928  0052  07DD               	addwf	_dispSec+1,f
   929  0053  0820               	movf	?___awmod,w
   930  0054  01DC               	clrf	_dispSec
   931  0055  07DC               	addwf	_dispSec,f
   932                           
   933                           ;ShotclockTimer.c: 67: int secLSB;
   934                           ;ShotclockTimer.c: 68: secLSB = dispSec%10;
   935  0056  300A               	movlw	10
   936  0057  00A0               	movwf	___awmod@divisor
   937  0058  3000               	movlw	0
   938  0059  00A1               	movwf	___awmod@divisor+1
   939  005A  085D               	movf	_dispSec+1,w
   940  005B  01A3               	clrf	___awmod@dividend+1
   941  005C  07A3               	addwf	___awmod@dividend+1,f
   942  005D  085C               	movf	_dispSec,w
   943  005E  01A2               	clrf	___awmod@dividend
   944  005F  07A2               	addwf	___awmod@dividend,f
   945  0060  120A  118A  22DC  120A  118A  	fcall	___awmod
   946  0065  1283               	bcf	3,5	;RP0=0, select bank0
   947  0066  1303               	bcf	3,6	;RP1=0, select bank0
   948  0067  0821               	movf	?___awmod+1,w
   949  0068  01AB               	clrf	beginCount@secLSB+1
   950  0069  07AB               	addwf	beginCount@secLSB+1,f
   951  006A  0820               	movf	?___awmod,w
   952  006B  01AA               	clrf	beginCount@secLSB
   953  006C  07AA               	addwf	beginCount@secLSB,f
   954                           
   955                           ;ShotclockTimer.c: 69: int secMSB;
   956                           ;ShotclockTimer.c: 70: secMSB = dispSec/10;
   957  006D  300A               	movlw	10
   958  006E  00A0               	movwf	___awdiv@divisor
   959  006F  3000               	movlw	0
   960  0070  00A1               	movwf	___awdiv@divisor+1
   961  0071  085D               	movf	_dispSec+1,w
   962  0072  01A3               	clrf	___awdiv@dividend+1
   963  0073  07A3               	addwf	___awdiv@dividend+1,f
   964  0074  085C               	movf	_dispSec,w
   965  0075  01A2               	clrf	___awdiv@dividend
   966  0076  07A2               	addwf	___awdiv@dividend,f
   967  0077  120A  118A  227F  120A  118A  	fcall	___awdiv
   968  007C  1283               	bcf	3,5	;RP0=0, select bank0
   969  007D  1303               	bcf	3,6	;RP1=0, select bank0
   970  007E  0821               	movf	?___awdiv+1,w
   971  007F  01AF               	clrf	beginCount@secMSB+1
   972  0080  07AF               	addwf	beginCount@secMSB+1,f
   973  0081  0820               	movf	?___awdiv,w
   974  0082  01AE               	clrf	beginCount@secMSB
   975  0083  07AE               	addwf	beginCount@secMSB,f
   976                           
   977                           ;ShotclockTimer.c: 71: secMSB = secMSB%10;
   978  0084  300A               	movlw	10
   979  0085  00A0               	movwf	___awmod@divisor
   980  0086  3000               	movlw	0
   981  0087  00A1               	movwf	___awmod@divisor+1
   982  0088  082F               	movf	beginCount@secMSB+1,w
   983  0089  01A3               	clrf	___awmod@dividend+1
   984  008A  07A3               	addwf	___awmod@dividend+1,f
   985  008B  082E               	movf	beginCount@secMSB,w
   986  008C  01A2               	clrf	___awmod@dividend
   987  008D  07A2               	addwf	___awmod@dividend,f
   988  008E  120A  118A  22DC  120A  118A  	fcall	___awmod
   989  0093  1283               	bcf	3,5	;RP0=0, select bank0
   990  0094  1303               	bcf	3,6	;RP1=0, select bank0
   991  0095  0821               	movf	?___awmod+1,w
   992  0096  01AF               	clrf	beginCount@secMSB+1
   993  0097  07AF               	addwf	beginCount@secMSB+1,f
   994  0098  0820               	movf	?___awmod,w
   995  0099  01AE               	clrf	beginCount@secMSB
   996  009A  07AE               	addwf	beginCount@secMSB,f
   997                           
   998                           ;ShotclockTimer.c: 72: instCtrl(0xC8);
   999  009B  30C8               	movlw	200
  1000  009C  120A  118A  23CA  120A  118A  	fcall	_instCtrl
  1001                           
  1002                           ;ShotclockTimer.c: 73: dataCtrl(secMSB+48);
  1003  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  1004  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  1005  00A3  082E               	movf	beginCount@secMSB,w
  1006  00A4  3E30               	addlw	48
  1007  00A5  120A  118A  23DD  120A  118A  	fcall	_dataCtrl
  1008                           
  1009                           ;ShotclockTimer.c: 74: dataCtrl(secLSB+48);
  1010  00AA  1283               	bcf	3,5	;RP0=0, select bank0
  1011  00AB  1303               	bcf	3,6	;RP1=0, select bank0
  1012  00AC  082A               	movf	beginCount@secLSB,w
  1013  00AD  3E30               	addlw	48
  1014  00AE  120A  118A  23DD  120A  118A  	fcall	_dataCtrl
  1015                           
  1016                           ;ShotclockTimer.c: 75: newSeconds = seconds;
  1017  00B3  1283               	bcf	3,5	;RP0=0, select bank0
  1018  00B4  1303               	bcf	3,6	;RP1=0, select bank0
  1019  00B5  085B               	movf	_seconds+1,w
  1020  00B6  01DF               	clrf	_newSeconds+1
  1021  00B7  07DF               	addwf	_newSeconds+1,f
  1022  00B8  085A               	movf	_seconds,w
  1023  00B9  01DE               	clrf	_newSeconds
  1024  00BA  07DE               	addwf	_newSeconds,f
  1025  00BB                     l1342:	
  1026  00BB  3001               	movlw	1
  1027  00BC  1283               	bcf	3,5	;RP0=0, select bank0
  1028  00BD  1303               	bcf	3,6	;RP1=0, select bank0
  1029  00BE  0658               	xorwf	_flagPause,w
  1030  00BF  0459               	iorwf	_flagPause+1,w
  1031  00C0  1903               	skipnz
  1032  00C1  282E               	goto	l76
  1033                           
  1034                           ;ShotclockTimer.c: 76: }
  1035                           ;ShotclockTimer.c: 78: }
  1036                           ;ShotclockTimer.c: 79: dispSec = (seconds%60);
  1037  00C2  303C               	movlw	60
  1038  00C3  00A0               	movwf	___awmod@divisor
  1039  00C4  3000               	movlw	0
  1040  00C5  00A1               	movwf	___awmod@divisor+1
  1041  00C6  085B               	movf	_seconds+1,w
  1042  00C7  01A3               	clrf	___awmod@dividend+1
  1043  00C8  07A3               	addwf	___awmod@dividend+1,f
  1044  00C9  085A               	movf	_seconds,w
  1045  00CA  01A2               	clrf	___awmod@dividend
  1046  00CB  07A2               	addwf	___awmod@dividend,f
  1047  00CC  120A  118A  22DC  120A  118A  	fcall	___awmod
  1048  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1049  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1050  00D3  0821               	movf	?___awmod+1,w
  1051  00D4  01DD               	clrf	_dispSec+1
  1052  00D5  07DD               	addwf	_dispSec+1,f
  1053  00D6  0820               	movf	?___awmod,w
  1054  00D7  01DC               	clrf	_dispSec
  1055  00D8  07DC               	addwf	_dispSec,f
  1056                           
  1057                           ;ShotclockTimer.c: 81: int secLSB;
  1058                           ;ShotclockTimer.c: 82: secLSB = dispSec%10;
  1059  00D9  300A               	movlw	10
  1060  00DA  00A0               	movwf	___awmod@divisor
  1061  00DB  3000               	movlw	0
  1062  00DC  00A1               	movwf	___awmod@divisor+1
  1063  00DD  085D               	movf	_dispSec+1,w
  1064  00DE  01A3               	clrf	___awmod@dividend+1
  1065  00DF  07A3               	addwf	___awmod@dividend+1,f
  1066  00E0  085C               	movf	_dispSec,w
  1067  00E1  01A2               	clrf	___awmod@dividend
  1068  00E2  07A2               	addwf	___awmod@dividend,f
  1069  00E3  120A  118A  22DC  120A  118A  	fcall	___awmod
  1070  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1071  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  1072  00EA  0821               	movf	?___awmod+1,w
  1073  00EB  01AD               	clrf	beginCount@secLSB_83+1
  1074  00EC  07AD               	addwf	beginCount@secLSB_83+1,f
  1075  00ED  0820               	movf	?___awmod,w
  1076  00EE  01AC               	clrf	beginCount@secLSB_83
  1077  00EF  07AC               	addwf	beginCount@secLSB_83,f
  1078                           
  1079                           ;ShotclockTimer.c: 83: int secMSB;
  1080                           ;ShotclockTimer.c: 84: secMSB = dispSec/10;
  1081  00F0  300A               	movlw	10
  1082  00F1  00A0               	movwf	___awdiv@divisor
  1083  00F2  3000               	movlw	0
  1084  00F3  00A1               	movwf	___awdiv@divisor+1
  1085  00F4  085D               	movf	_dispSec+1,w
  1086  00F5  01A3               	clrf	___awdiv@dividend+1
  1087  00F6  07A3               	addwf	___awdiv@dividend+1,f
  1088  00F7  085C               	movf	_dispSec,w
  1089  00F8  01A2               	clrf	___awdiv@dividend
  1090  00F9  07A2               	addwf	___awdiv@dividend,f
  1091  00FA  120A  118A  227F  120A  118A  	fcall	___awdiv
  1092  00FF  1283               	bcf	3,5	;RP0=0, select bank0
  1093  0100  1303               	bcf	3,6	;RP1=0, select bank0
  1094  0101  0821               	movf	?___awdiv+1,w
  1095  0102  01B1               	clrf	beginCount@secMSB_84+1
  1096  0103  07B1               	addwf	beginCount@secMSB_84+1,f
  1097  0104  0820               	movf	?___awdiv,w
  1098  0105  01B0               	clrf	beginCount@secMSB_84
  1099  0106  07B0               	addwf	beginCount@secMSB_84,f
  1100                           
  1101                           ;ShotclockTimer.c: 85: secMSB = secMSB%10;
  1102  0107  300A               	movlw	10
  1103  0108  00A0               	movwf	___awmod@divisor
  1104  0109  3000               	movlw	0
  1105  010A  00A1               	movwf	___awmod@divisor+1
  1106  010B  0831               	movf	beginCount@secMSB_84+1,w
  1107  010C  01A3               	clrf	___awmod@dividend+1
  1108  010D  07A3               	addwf	___awmod@dividend+1,f
  1109  010E  0830               	movf	beginCount@secMSB_84,w
  1110  010F  01A2               	clrf	___awmod@dividend
  1111  0110  07A2               	addwf	___awmod@dividend,f
  1112  0111  120A  118A  22DC  120A  118A  	fcall	___awmod
  1113  0116  1283               	bcf	3,5	;RP0=0, select bank0
  1114  0117  1303               	bcf	3,6	;RP1=0, select bank0
  1115  0118  0821               	movf	?___awmod+1,w
  1116  0119  01B1               	clrf	beginCount@secMSB_84+1
  1117  011A  07B1               	addwf	beginCount@secMSB_84+1,f
  1118  011B  0820               	movf	?___awmod,w
  1119  011C  01B0               	clrf	beginCount@secMSB_84
  1120  011D  07B0               	addwf	beginCount@secMSB_84,f
  1121                           
  1122                           ;ShotclockTimer.c: 86: instCtrl(0xC8);
  1123  011E  30C8               	movlw	200
  1124  011F  120A  118A  23CA  120A  118A  	fcall	_instCtrl
  1125                           
  1126                           ;ShotclockTimer.c: 87: dataCtrl(secMSB+48);
  1127  0124  1283               	bcf	3,5	;RP0=0, select bank0
  1128  0125  1303               	bcf	3,6	;RP1=0, select bank0
  1129  0126  0830               	movf	beginCount@secMSB_84,w
  1130  0127  3E30               	addlw	48
  1131  0128  120A  118A  23DD  120A  118A  	fcall	_dataCtrl
  1132                           
  1133                           ;ShotclockTimer.c: 88: dataCtrl(secLSB+48);
  1134  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1135  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1136  012F  082C               	movf	beginCount@secLSB_83,w
  1137  0130  3E30               	addlw	48
  1138  0131  120A  118A  23DD  120A  118A  	fcall	_dataCtrl
  1139                           
  1140                           ;ShotclockTimer.c: 90: delay(122);
  1141  0136  307A               	movlw	122
  1142  0137  00F4               	movwf	delay@timer
  1143  0138  3000               	movlw	0
  1144  0139  00F5               	movwf	delay@timer+1
  1145  013A  120A  118A  2414  120A  118A  	fcall	_delay
  1146  013F  30FF               	movlw	255
  1147  0140  1283               	bcf	3,5	;RP0=0, select bank0
  1148  0141  1303               	bcf	3,6	;RP1=0, select bank0
  1149  0142  07DA               	addwf	_seconds,f
  1150  0143  1803               	skipnc
  1151  0144  0ADB               	incf	_seconds+1,f
  1152  0145  30FF               	movlw	255
  1153  0146  07DB               	addwf	_seconds+1,f
  1154  0147                     l1348:	
  1155  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1156  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1157  0149  1FDB               	btfss	_seconds+1,7
  1158  014A  28BB               	goto	l1342
  1159                           
  1160                           ;ShotclockTimer.c: 91: }
  1161                           ;ShotclockTimer.c: 92: seconds = newSeconds;
  1162  014B  085F               	movf	_newSeconds+1,w
  1163  014C  01DB               	clrf	_seconds+1
  1164  014D  07DB               	addwf	_seconds+1,f
  1165  014E  085E               	movf	_newSeconds,w
  1166  014F  01DA               	clrf	_seconds
  1167  0150  07DA               	addwf	_seconds,f
  1168  0151  0008               	return
  1169  0152                     __end_of_beginCount:	
  1170                           
  1171                           	psect	text5
  1172  03CA                     __ptext5:	
  1173 ;; *************** function _instCtrl *****************
  1174 ;; Defined at:
  1175 ;;		line 100 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1176 ;; Parameters:    Size  Location     Type
  1177 ;;  INST            1    wreg     unsigned char 
  1178 ;; Auto vars:     Size  Location     Type
  1179 ;;  INST            1    1[BANK0 ] unsigned char 
  1180 ;; Return value:  Size  Location     Type
  1181 ;;		None               void
  1182 ;; Registers used:
  1183 ;;		wreg, status,2, status,0, pclath, cstack
  1184 ;; Tracked objects:
  1185 ;;		On entry : 0/0
  1186 ;;		On exit  : 0/0
  1187 ;;		Unchanged: 0/0
  1188 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1189 ;;      Params:         0       0       0       0       0
  1190 ;;      Locals:         0       1       0       0       0
  1191 ;;      Temps:          0       0       0       0       0
  1192 ;;      Totals:         0       1       0       0       0
  1193 ;;Total ram usage:        1 bytes
  1194 ;; Hardware stack levels used:    1
  1195 ;; Hardware stack levels required when called:    3
  1196 ;; This function calls:
  1197 ;;		_delay
  1198 ;; This function is called by:
  1199 ;;		_beginCount
  1200 ;;		_initLCD
  1201 ;;		_dispHeader
  1202 ;; This function uses a non-reentrant model
  1203 ;;
  1204                           
  1205                           
  1206                           ;psect for function _instCtrl
  1207  03CA                     _instCtrl:	
  1208                           
  1209                           ;incstack = 0
  1210                           ; Regs used in _instCtrl: [wreg+status,2+status,0+pclath+cstack]
  1211                           ;instCtrl@INST stored from wreg
  1212  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  1213  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  1214  03CC  00A1               	movwf	instCtrl@INST
  1215                           
  1216                           ;ShotclockTimer.c: 102: PORTC = INST;
  1217  03CD  0821               	movf	instCtrl@INST,w
  1218  03CE  0087               	movwf	7	;volatile
  1219                           
  1220                           ;ShotclockTimer.c: 103: RA0 = 0;
  1221  03CF  1005               	bcf	5,0	;volatile
  1222                           
  1223                           ;ShotclockTimer.c: 104: RA2 = 0;
  1224  03D0  1105               	bcf	5,2	;volatile
  1225                           
  1226                           ;ShotclockTimer.c: 105: RA1 = 1;
  1227  03D1  1485               	bsf	5,1	;volatile
  1228                           
  1229                           ;ShotclockTimer.c: 106: delay(61);
  1230  03D2  303D               	movlw	61
  1231  03D3  00F4               	movwf	delay@timer
  1232  03D4  3000               	movlw	0
  1233  03D5  00F5               	movwf	delay@timer+1
  1234  03D6  120A  118A  2414   	fcall	_delay
  1235                           
  1236                           ;ShotclockTimer.c: 107: RA1 = 0;
  1237  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  1238  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  1239  03DB  1085               	bcf	5,1	;volatile
  1240  03DC  0008               	return
  1241  03DD                     __end_of_instCtrl:	
  1242                           
  1243                           	psect	text6
  1244  03DD                     __ptext6:	
  1245 ;; *************** function _dataCtrl *****************
  1246 ;; Defined at:
  1247 ;;		line 120 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  DATA            1    wreg     unsigned char 
  1250 ;; Auto vars:     Size  Location     Type
  1251 ;;  DATA            1    1[BANK0 ] unsigned char 
  1252 ;; Return value:  Size  Location     Type
  1253 ;;		None               void
  1254 ;; Registers used:
  1255 ;;		wreg, status,2, status,0, pclath, cstack
  1256 ;; Tracked objects:
  1257 ;;		On entry : 0/0
  1258 ;;		On exit  : 0/0
  1259 ;;		Unchanged: 0/0
  1260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1261 ;;      Params:         0       0       0       0       0
  1262 ;;      Locals:         0       1       0       0       0
  1263 ;;      Temps:          0       0       0       0       0
  1264 ;;      Totals:         0       1       0       0       0
  1265 ;;Total ram usage:        1 bytes
  1266 ;; Hardware stack levels used:    1
  1267 ;; Hardware stack levels required when called:    3
  1268 ;; This function calls:
  1269 ;;		_delay
  1270 ;; This function is called by:
  1271 ;;		_beginCount
  1272 ;;		_dispHeader
  1273 ;;		_dispSTR
  1274 ;; This function uses a non-reentrant model
  1275 ;;
  1276                           
  1277                           
  1278                           ;psect for function _dataCtrl
  1279  03DD                     _dataCtrl:	
  1280                           
  1281                           ;incstack = 0
  1282                           ; Regs used in _dataCtrl: [wreg+status,2+status,0+pclath+cstack]
  1283                           ;dataCtrl@DATA stored from wreg
  1284  03DD  1283               	bcf	3,5	;RP0=0, select bank0
  1285  03DE  1303               	bcf	3,6	;RP1=0, select bank0
  1286  03DF  00A1               	movwf	dataCtrl@DATA
  1287                           
  1288                           ;ShotclockTimer.c: 122: PORTC = DATA;
  1289  03E0  0821               	movf	dataCtrl@DATA,w
  1290  03E1  0087               	movwf	7	;volatile
  1291                           
  1292                           ;ShotclockTimer.c: 123: RA0 = 1;
  1293  03E2  1405               	bsf	5,0	;volatile
  1294                           
  1295                           ;ShotclockTimer.c: 124: RA2 = 0;
  1296  03E3  1105               	bcf	5,2	;volatile
  1297                           
  1298                           ;ShotclockTimer.c: 125: RA1 = 1;
  1299  03E4  1485               	bsf	5,1	;volatile
  1300                           
  1301                           ;ShotclockTimer.c: 126: delay(1);
  1302  03E5  3001               	movlw	1
  1303  03E6  00F4               	movwf	delay@timer
  1304  03E7  3000               	movlw	0
  1305  03E8  00F5               	movwf	delay@timer+1
  1306  03E9  120A  118A  2414   	fcall	_delay
  1307                           
  1308                           ;ShotclockTimer.c: 127: RA1 = 0;
  1309  03EC  1283               	bcf	3,5	;RP0=0, select bank0
  1310  03ED  1303               	bcf	3,6	;RP1=0, select bank0
  1311  03EE  1085               	bcf	5,1	;volatile
  1312  03EF  0008               	return
  1313  03F0                     __end_of_dataCtrl:	
  1314                           
  1315                           	psect	text7
  1316  02DC                     __ptext7:	
  1317 ;; *************** function ___awmod *****************
  1318 ;; Defined at:
  1319 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  1320 ;; Parameters:    Size  Location     Type
  1321 ;;  divisor         2    0[BANK0 ] int 
  1322 ;;  dividend        2    2[BANK0 ] int 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;  sign            1    5[BANK0 ] unsigned char 
  1325 ;;  counter         1    4[BANK0 ] unsigned char 
  1326 ;; Return value:  Size  Location     Type
  1327 ;;                  2    0[BANK0 ] int 
  1328 ;; Registers used:
  1329 ;;		wreg, status,2, status,0
  1330 ;; Tracked objects:
  1331 ;;		On entry : 0/0
  1332 ;;		On exit  : 0/0
  1333 ;;		Unchanged: 0/0
  1334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1335 ;;      Params:         0       4       0       0       0
  1336 ;;      Locals:         0       2       0       0       0
  1337 ;;      Temps:          1       0       0       0       0
  1338 ;;      Totals:         1       6       0       0       0
  1339 ;;Total ram usage:        7 bytes
  1340 ;; Hardware stack levels used:    1
  1341 ;; Hardware stack levels required when called:    2
  1342 ;; This function calls:
  1343 ;;		Nothing
  1344 ;; This function is called by:
  1345 ;;		_beginCount
  1346 ;;		_dispHeader
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           
  1351                           ;psect for function ___awmod
  1352  02DC                     ___awmod:	
  1353                           
  1354                           ;incstack = 0
  1355                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1356  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  1357  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  1358  02DE  01A5               	clrf	___awmod@sign
  1359  02DF  1FA3               	btfss	___awmod@dividend+1,7
  1360  02E0  2AE8               	goto	l1270
  1361  02E1  09A2               	comf	___awmod@dividend,f
  1362  02E2  09A3               	comf	___awmod@dividend+1,f
  1363  02E3  0AA2               	incf	___awmod@dividend,f
  1364  02E4  1903               	skipnz
  1365  02E5  0AA3               	incf	___awmod@dividend+1,f
  1366  02E6  01A5               	clrf	___awmod@sign
  1367  02E7  0AA5               	incf	___awmod@sign,f
  1368  02E8                     l1270:	
  1369  02E8  1FA1               	btfss	___awmod@divisor+1,7
  1370  02E9  2AEF               	goto	l1274
  1371  02EA  09A0               	comf	___awmod@divisor,f
  1372  02EB  09A1               	comf	___awmod@divisor+1,f
  1373  02EC  0AA0               	incf	___awmod@divisor,f
  1374  02ED  1903               	skipnz
  1375  02EE  0AA1               	incf	___awmod@divisor+1,f
  1376  02EF                     l1274:	
  1377  02EF  0821               	movf	___awmod@divisor+1,w
  1378  02F0  0420               	iorwf	___awmod@divisor,w
  1379  02F1  1903               	skipnz
  1380  02F2  2B1C               	goto	l1292
  1381  02F3  01A4               	clrf	___awmod@counter
  1382  02F4  0AA4               	incf	___awmod@counter,f
  1383  02F5                     l1282:	
  1384  02F5  1BA1               	btfsc	___awmod@divisor+1,7
  1385  02F6  2B03               	goto	l1284
  1386  02F7  3001               	movlw	1
  1387  02F8                     u925:	
  1388  02F8  1003               	clrc
  1389  02F9  0DA0               	rlf	___awmod@divisor,f
  1390  02FA  0DA1               	rlf	___awmod@divisor+1,f
  1391  02FB  3EFF               	addlw	-1
  1392  02FC  1D03               	skipz
  1393  02FD  2AF8               	goto	u925
  1394  02FE  3001               	movlw	1
  1395  02FF  00F4               	movwf	??___awmod
  1396  0300  0874               	movf	??___awmod,w
  1397  0301  07A4               	addwf	___awmod@counter,f
  1398  0302  2AF5               	goto	l1282
  1399  0303                     l1284:	
  1400  0303  0821               	movf	___awmod@divisor+1,w
  1401  0304  0223               	subwf	___awmod@dividend+1,w
  1402  0305  1D03               	skipz
  1403  0306  2B09               	goto	u945
  1404  0307  0820               	movf	___awmod@divisor,w
  1405  0308  0222               	subwf	___awmod@dividend,w
  1406  0309                     u945:	
  1407  0309  1C03               	skipc
  1408  030A  2B11               	goto	l1288
  1409  030B  0820               	movf	___awmod@divisor,w
  1410  030C  02A2               	subwf	___awmod@dividend,f
  1411  030D  0821               	movf	___awmod@divisor+1,w
  1412  030E  1C03               	skipc
  1413  030F  03A3               	decf	___awmod@dividend+1,f
  1414  0310  02A3               	subwf	___awmod@dividend+1,f
  1415  0311                     l1288:	
  1416  0311  3001               	movlw	1
  1417  0312                     u955:	
  1418  0312  1003               	clrc
  1419  0313  0CA1               	rrf	___awmod@divisor+1,f
  1420  0314  0CA0               	rrf	___awmod@divisor,f
  1421  0315  3EFF               	addlw	-1
  1422  0316  1D03               	skipz
  1423  0317  2B12               	goto	u955
  1424  0318  3001               	movlw	1
  1425  0319  02A4               	subwf	___awmod@counter,f
  1426  031A  1D03               	btfss	3,2
  1427  031B  2B03               	goto	l1284
  1428  031C                     l1292:	
  1429  031C  0825               	movf	___awmod@sign,w
  1430  031D  1903               	btfsc	3,2
  1431  031E  2B24               	goto	l1296
  1432  031F  09A2               	comf	___awmod@dividend,f
  1433  0320  09A3               	comf	___awmod@dividend+1,f
  1434  0321  0AA2               	incf	___awmod@dividend,f
  1435  0322  1903               	skipnz
  1436  0323  0AA3               	incf	___awmod@dividend+1,f
  1437  0324                     l1296:	
  1438  0324  0823               	movf	___awmod@dividend+1,w
  1439  0325  01A1               	clrf	?___awmod+1
  1440  0326  07A1               	addwf	?___awmod+1,f
  1441  0327  0822               	movf	___awmod@dividend,w
  1442  0328  01A0               	clrf	?___awmod
  1443  0329  07A0               	addwf	?___awmod,f
  1444  032A  0008               	return
  1445  032B                     __end_of___awmod:	
  1446                           
  1447                           	psect	text8
  1448  027F                     __ptext8:	
  1449 ;; *************** function ___awdiv *****************
  1450 ;; Defined at:
  1451 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  1452 ;; Parameters:    Size  Location     Type
  1453 ;;  divisor         2    0[BANK0 ] int 
  1454 ;;  dividend        2    2[BANK0 ] int 
  1455 ;; Auto vars:     Size  Location     Type
  1456 ;;  quotient        2    6[BANK0 ] int 
  1457 ;;  sign            1    5[BANK0 ] unsigned char 
  1458 ;;  counter         1    4[BANK0 ] unsigned char 
  1459 ;; Return value:  Size  Location     Type
  1460 ;;                  2    0[BANK0 ] int 
  1461 ;; Registers used:
  1462 ;;		wreg, status,2, status,0
  1463 ;; Tracked objects:
  1464 ;;		On entry : 0/0
  1465 ;;		On exit  : 0/0
  1466 ;;		Unchanged: 0/0
  1467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1468 ;;      Params:         0       4       0       0       0
  1469 ;;      Locals:         0       4       0       0       0
  1470 ;;      Temps:          1       0       0       0       0
  1471 ;;      Totals:         1       8       0       0       0
  1472 ;;Total ram usage:        9 bytes
  1473 ;; Hardware stack levels used:    1
  1474 ;; Hardware stack levels required when called:    2
  1475 ;; This function calls:
  1476 ;;		Nothing
  1477 ;; This function is called by:
  1478 ;;		_beginCount
  1479 ;;		_dispHeader
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482                           
  1483                           
  1484                           ;psect for function ___awdiv
  1485  027F                     ___awdiv:	
  1486                           
  1487                           ;incstack = 0
  1488                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1489  027F  1283               	bcf	3,5	;RP0=0, select bank0
  1490  0280  1303               	bcf	3,6	;RP1=0, select bank0
  1491  0281  01A5               	clrf	___awdiv@sign
  1492  0282  1FA1               	btfss	___awdiv@divisor+1,7
  1493  0283  2A8B               	goto	l1226
  1494  0284  09A0               	comf	___awdiv@divisor,f
  1495  0285  09A1               	comf	___awdiv@divisor+1,f
  1496  0286  0AA0               	incf	___awdiv@divisor,f
  1497  0287  1903               	skipnz
  1498  0288  0AA1               	incf	___awdiv@divisor+1,f
  1499  0289  01A5               	clrf	___awdiv@sign
  1500  028A  0AA5               	incf	___awdiv@sign,f
  1501  028B                     l1226:	
  1502  028B  1FA3               	btfss	___awdiv@dividend+1,7
  1503  028C  2A96               	goto	l1232
  1504  028D  09A2               	comf	___awdiv@dividend,f
  1505  028E  09A3               	comf	___awdiv@dividend+1,f
  1506  028F  0AA2               	incf	___awdiv@dividend,f
  1507  0290  1903               	skipnz
  1508  0291  0AA3               	incf	___awdiv@dividend+1,f
  1509  0292  3001               	movlw	1
  1510  0293  00F4               	movwf	??___awdiv
  1511  0294  0874               	movf	??___awdiv,w
  1512  0295  06A5               	xorwf	___awdiv@sign,f
  1513  0296                     l1232:	
  1514  0296  01A6               	clrf	___awdiv@quotient
  1515  0297  01A7               	clrf	___awdiv@quotient+1
  1516  0298  0821               	movf	___awdiv@divisor+1,w
  1517  0299  0420               	iorwf	___awdiv@divisor,w
  1518  029A  1903               	skipnz
  1519  029B  2ACD               	goto	l1254
  1520  029C  01A4               	clrf	___awdiv@counter
  1521  029D  0AA4               	incf	___awdiv@counter,f
  1522  029E                     l1242:	
  1523  029E  1BA1               	btfsc	___awdiv@divisor+1,7
  1524  029F  2AAC               	goto	l1244
  1525  02A0  3001               	movlw	1
  1526  02A1                     u825:	
  1527  02A1  1003               	clrc
  1528  02A2  0DA0               	rlf	___awdiv@divisor,f
  1529  02A3  0DA1               	rlf	___awdiv@divisor+1,f
  1530  02A4  3EFF               	addlw	-1
  1531  02A5  1D03               	skipz
  1532  02A6  2AA1               	goto	u825
  1533  02A7  3001               	movlw	1
  1534  02A8  00F4               	movwf	??___awdiv
  1535  02A9  0874               	movf	??___awdiv,w
  1536  02AA  07A4               	addwf	___awdiv@counter,f
  1537  02AB  2A9E               	goto	l1242
  1538  02AC                     l1244:	
  1539  02AC  3001               	movlw	1
  1540  02AD                     u845:	
  1541  02AD  1003               	clrc
  1542  02AE  0DA6               	rlf	___awdiv@quotient,f
  1543  02AF  0DA7               	rlf	___awdiv@quotient+1,f
  1544  02B0  3EFF               	addlw	-1
  1545  02B1  1D03               	skipz
  1546  02B2  2AAD               	goto	u845
  1547  02B3  0821               	movf	___awdiv@divisor+1,w
  1548  02B4  0223               	subwf	___awdiv@dividend+1,w
  1549  02B5  1D03               	skipz
  1550  02B6  2AB9               	goto	u855
  1551  02B7  0820               	movf	___awdiv@divisor,w
  1552  02B8  0222               	subwf	___awdiv@dividend,w
  1553  02B9                     u855:	
  1554  02B9  1C03               	skipc
  1555  02BA  2AC2               	goto	l1250
  1556  02BB  0820               	movf	___awdiv@divisor,w
  1557  02BC  02A2               	subwf	___awdiv@dividend,f
  1558  02BD  0821               	movf	___awdiv@divisor+1,w
  1559  02BE  1C03               	skipc
  1560  02BF  03A3               	decf	___awdiv@dividend+1,f
  1561  02C0  02A3               	subwf	___awdiv@dividend+1,f
  1562  02C1  1426               	bsf	___awdiv@quotient,0
  1563  02C2                     l1250:	
  1564  02C2  3001               	movlw	1
  1565  02C3                     u865:	
  1566  02C3  1003               	clrc
  1567  02C4  0CA1               	rrf	___awdiv@divisor+1,f
  1568  02C5  0CA0               	rrf	___awdiv@divisor,f
  1569  02C6  3EFF               	addlw	-1
  1570  02C7  1D03               	skipz
  1571  02C8  2AC3               	goto	u865
  1572  02C9  3001               	movlw	1
  1573  02CA  02A4               	subwf	___awdiv@counter,f
  1574  02CB  1D03               	btfss	3,2
  1575  02CC  2AAC               	goto	l1244
  1576  02CD                     l1254:	
  1577  02CD  0825               	movf	___awdiv@sign,w
  1578  02CE  1903               	btfsc	3,2
  1579  02CF  2AD5               	goto	l1258
  1580  02D0  09A6               	comf	___awdiv@quotient,f
  1581  02D1  09A7               	comf	___awdiv@quotient+1,f
  1582  02D2  0AA6               	incf	___awdiv@quotient,f
  1583  02D3  1903               	skipnz
  1584  02D4  0AA7               	incf	___awdiv@quotient+1,f
  1585  02D5                     l1258:	
  1586  02D5  0827               	movf	___awdiv@quotient+1,w
  1587  02D6  01A1               	clrf	?___awdiv+1
  1588  02D7  07A1               	addwf	?___awdiv+1,f
  1589  02D8  0826               	movf	___awdiv@quotient,w
  1590  02D9  01A0               	clrf	?___awdiv
  1591  02DA  07A0               	addwf	?___awdiv,f
  1592  02DB  0008               	return
  1593  02DC                     __end_of___awdiv:	
  1594                           
  1595                           	psect	text9
  1596  01EF                     __ptext9:	
  1597 ;; *************** function _DAVBL *****************
  1598 ;; Defined at:
  1599 ;;		line 130 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1600 ;; Parameters:    Size  Location     Type
  1601 ;;		None
  1602 ;; Auto vars:     Size  Location     Type
  1603 ;;  DATA            2    1[BANK0 ] int 
  1604 ;; Return value:  Size  Location     Type
  1605 ;;		None               void
  1606 ;; Registers used:
  1607 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1608 ;; Tracked objects:
  1609 ;;		On entry : 0/0
  1610 ;;		On exit  : 0/0
  1611 ;;		Unchanged: 0/0
  1612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1613 ;;      Params:         0       0       0       0       0
  1614 ;;      Locals:         0       2       0       0       0
  1615 ;;      Temps:          0       0       0       0       0
  1616 ;;      Totals:         0       2       0       0       0
  1617 ;;Total ram usage:        2 bytes
  1618 ;; Hardware stack levels used:    1
  1619 ;; Hardware stack levels required when called:    3
  1620 ;; This function calls:
  1621 ;;		_delay
  1622 ;; This function is called by:
  1623 ;;		_beginCount
  1624 ;; This function uses a non-reentrant model
  1625 ;;
  1626                           
  1627                           
  1628                           ;psect for function _DAVBL
  1629  01EF                     _DAVBL:	
  1630                           
  1631                           ;ShotclockTimer.c: 132: int DATA = dataRead;
  1632                           
  1633                           ;incstack = 0
  1634                           ; Regs used in _DAVBL: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1635  01EF  0879               	movf	_dataRead+1,w
  1636  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  1637  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  1638  01F2  01A2               	clrf	DAVBL@DATA+1
  1639  01F3  07A2               	addwf	DAVBL@DATA+1,f
  1640  01F4  0878               	movf	_dataRead,w
  1641  01F5  01A1               	clrf	DAVBL@DATA
  1642  01F6  07A1               	addwf	DAVBL@DATA,f
  1643                           
  1644                           ;ShotclockTimer.c: 133: if(DATA < 3)
  1645  01F7  0822               	movf	DAVBL@DATA+1,w
  1646  01F8  3A80               	xorlw	128
  1647  01F9  00FF               	movwf	127
  1648  01FA  3080               	movlw	128
  1649  01FB  027F               	subwf	127,w
  1650  01FC  1D03               	skipz
  1651  01FD  2A00               	goto	u725
  1652  01FE  3003               	movlw	3
  1653  01FF  0221               	subwf	DAVBL@DATA,w
  1654  0200                     u725:	
  1655  0200  1803               	skipnc
  1656  0201  2A0A               	goto	l1176
  1657                           
  1658                           ;ShotclockTimer.c: 134: {
  1659                           ;ShotclockTimer.c: 135: DATA += 1;
  1660  0202  3001               	movlw	1
  1661  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1662  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1663  0205  07A1               	addwf	DAVBL@DATA,f
  1664  0206  1803               	skipnc
  1665  0207  0AA2               	incf	DAVBL@DATA+1,f
  1666  0208  3000               	movlw	0
  1667  0209  2A2B               	goto	L1
  1668  020A                     l1176:	
  1669                           ;ShotclockTimer.c: 136: }
  1670                           
  1671                           
  1672                           ;ShotclockTimer.c: 137: else if (DATA > 6 && DATA < 11)
  1673  020A  1283               	bcf	3,5	;RP0=0, select bank0
  1674  020B  1303               	bcf	3,6	;RP1=0, select bank0
  1675  020C  0822               	movf	DAVBL@DATA+1,w
  1676  020D  3A80               	xorlw	128
  1677  020E  00FF               	movwf	127
  1678  020F  3080               	movlw	128
  1679  0210  027F               	subwf	127,w
  1680  0211  1D03               	skipz
  1681  0212  2A15               	goto	u735
  1682  0213  3007               	movlw	7
  1683  0214  0221               	subwf	DAVBL@DATA,w
  1684  0215                     u735:	
  1685  0215  1C03               	skipc
  1686  0216  2A2D               	goto	l1182
  1687  0217  1283               	bcf	3,5	;RP0=0, select bank0
  1688  0218  1303               	bcf	3,6	;RP1=0, select bank0
  1689  0219  0822               	movf	DAVBL@DATA+1,w
  1690  021A  3A80               	xorlw	128
  1691  021B  00FF               	movwf	127
  1692  021C  3080               	movlw	128
  1693  021D  027F               	subwf	127,w
  1694  021E  1D03               	skipz
  1695  021F  2A22               	goto	u745
  1696  0220  300B               	movlw	11
  1697  0221  0221               	subwf	DAVBL@DATA,w
  1698  0222                     u745:	
  1699  0222  1803               	skipnc
  1700  0223  2A2D               	goto	l1182
  1701                           
  1702                           ;ShotclockTimer.c: 138: {
  1703                           ;ShotclockTimer.c: 139: DATA -= 1;
  1704  0224  30FF               	movlw	255
  1705  0225  1283               	bcf	3,5	;RP0=0, select bank0
  1706  0226  1303               	bcf	3,6	;RP1=0, select bank0
  1707  0227  07A1               	addwf	DAVBL@DATA,f
  1708  0228  1803               	skipnc
  1709  0229  0AA2               	incf	DAVBL@DATA+1,f
  1710  022A  30FF               	movlw	255
  1711  022B                     L1:	
  1712  022B  07A2               	addwf	DAVBL@DATA+1,f
  1713                           
  1714                           ;ShotclockTimer.c: 140: }
  1715  022C  2A6F               	goto	l1202
  1716  022D                     l1182:	
  1717                           
  1718                           ;ShotclockTimer.c: 141: else if(DATA > 3 && DATA <= 6)
  1719  022D  1283               	bcf	3,5	;RP0=0, select bank0
  1720  022E  1303               	bcf	3,6	;RP1=0, select bank0
  1721  022F  0822               	movf	DAVBL@DATA+1,w
  1722  0230  3A80               	xorlw	128
  1723  0231  00FF               	movwf	127
  1724  0232  3080               	movlw	128
  1725  0233  027F               	subwf	127,w
  1726  0234  1D03               	skipz
  1727  0235  2A38               	goto	u755
  1728  0236  3004               	movlw	4
  1729  0237  0221               	subwf	DAVBL@DATA,w
  1730  0238                     u755:	
  1731  0238  1C03               	skipc
  1732  0239  2A47               	goto	l1188
  1733  023A  1283               	bcf	3,5	;RP0=0, select bank0
  1734  023B  1303               	bcf	3,6	;RP1=0, select bank0
  1735  023C  0822               	movf	DAVBL@DATA+1,w
  1736  023D  3A80               	xorlw	128
  1737  023E  00FF               	movwf	127
  1738  023F  3080               	movlw	128
  1739  0240  027F               	subwf	127,w
  1740  0241  1D03               	skipz
  1741  0242  2A45               	goto	u765
  1742  0243  3007               	movlw	7
  1743  0244  0221               	subwf	DAVBL@DATA,w
  1744  0245                     u765:	
  1745  0245  1C03               	btfss	3,0
  1746  0246  2A6F               	goto	l1202
  1747  0247                     l1188:	
  1748                           ;ShotclockTimer.c: 144: }
  1749                           
  1750                           
  1751                           ;ShotclockTimer.c: 145: else if(DATA == 13)
  1752  0247  300D               	movlw	13
  1753  0248  1283               	bcf	3,5	;RP0=0, select bank0
  1754  0249  1303               	bcf	3,6	;RP1=0, select bank0
  1755  024A  0621               	xorwf	DAVBL@DATA,w
  1756  024B  0422               	iorwf	DAVBL@DATA+1,w
  1757  024C  1D03               	skipz
  1758  024D  2A6F               	goto	l1202
  1759                           
  1760                           ;ShotclockTimer.c: 146: {
  1761                           ;ShotclockTimer.c: 147: DATA = 0;
  1762  024E  01A1               	clrf	DAVBL@DATA
  1763  024F  01A2               	clrf	DAVBL@DATA+1
  1764                           
  1765                           ;ShotclockTimer.c: 152: }
  1766                           ;ShotclockTimer.c: 154: switch(DATA)
  1767                           
  1768                           ;ShotclockTimer.c: 148: }
  1769  0250  2A6F               	goto	l1202
  1770  0251                     l1192:	
  1771                           ;ShotclockTimer.c: 155: {
  1772                           ;ShotclockTimer.c: 156: case 12:
  1773                           
  1774                           
  1775                           ;ShotclockTimer.c: 157: seconds += 1;
  1776  0251  3001               	movlw	1
  1777  0252  07DA               	addwf	_seconds,f
  1778  0253  1803               	skipnc
  1779  0254  0ADB               	incf	_seconds+1,f
  1780  0255  3000               	movlw	0
  1781  0256  07DB               	addwf	_seconds+1,f
  1782                           
  1783                           ;ShotclockTimer.c: 158: delay(30);
  1784  0257  301E               	movlw	30
  1785  0258  00F4               	movwf	delay@timer
  1786  0259  3000               	movlw	0
  1787  025A  00F5               	movwf	delay@timer+1
  1788  025B  120A  118A  2414   	fcall	_delay
  1789                           
  1790                           ;ShotclockTimer.c: 159: break;
  1791  025E  0008               	return
  1792  025F                     l1196:	
  1793                           ;ShotclockTimer.c: 160: case 14:
  1794                           
  1795                           
  1796                           ;ShotclockTimer.c: 161: seconds -= 1;
  1797  025F  30FF               	movlw	255
  1798  0260  1283               	bcf	3,5	;RP0=0, select bank0
  1799  0261  1303               	bcf	3,6	;RP1=0, select bank0
  1800  0262  07DA               	addwf	_seconds,f
  1801  0263  1803               	skipnc
  1802  0264  0ADB               	incf	_seconds+1,f
  1803  0265  30FF               	movlw	255
  1804  0266  07DB               	addwf	_seconds+1,f
  1805                           
  1806                           ;ShotclockTimer.c: 162: delay(30);
  1807  0267  301E               	movlw	30
  1808  0268  00F4               	movwf	delay@timer
  1809  0269  3000               	movlw	0
  1810  026A  00F5               	movwf	delay@timer+1
  1811  026B  120A  118A  2414   	fcall	_delay
  1812                           
  1813                           ;ShotclockTimer.c: 166: }
  1814                           
  1815                           ;ShotclockTimer.c: 165: break;
  1816                           
  1817                           ;ShotclockTimer.c: 164: default:
  1818                           
  1819                           ;ShotclockTimer.c: 163: break;
  1820  026E  0008               	return
  1821  026F                     l1202:	
  1822                           
  1823                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1824                           ; Switch size 1, requested type "space"
  1825                           ; Number of cases is 1, Range of values is 0 to 0
  1826                           ; switch strategies available:
  1827                           ; Name         Instructions Cycles
  1828                           ; simple_byte            4     3 (average)
  1829                           ; direct_byte           11     8 (fixed)
  1830                           ; jumptable            260     6 (fixed)
  1831                           ;	Chosen strategy is simple_byte
  1832  026F  1283               	bcf	3,5	;RP0=0, select bank0
  1833  0270  1303               	bcf	3,6	;RP1=0, select bank0
  1834  0271  0822               	movf	DAVBL@DATA+1,w
  1835  0272  3A00               	xorlw	0	; case 0
  1836  0273  1903               	skipnz
  1837  0274  2A76               	goto	l1394
  1838  0275  2A7E               	goto	l105
  1839  0276                     l1394:	
  1840                           
  1841                           ; Switch size 1, requested type "space"
  1842                           ; Number of cases is 2, Range of values is 12 to 14
  1843                           ; switch strategies available:
  1844                           ; Name         Instructions Cycles
  1845                           ; simple_byte            7     4 (average)
  1846                           ; direct_byte           20    11 (fixed)
  1847                           ; jumptable            263     9 (fixed)
  1848                           ;	Chosen strategy is simple_byte
  1849  0276  0821               	movf	DAVBL@DATA,w
  1850  0277  3A0C               	xorlw	12	; case 12
  1851  0278  1903               	skipnz
  1852  0279  2A51               	goto	l1192
  1853  027A  3A02               	xorlw	2	; case 14
  1854  027B  1903               	skipnz
  1855  027C  2A5F               	goto	l1196
  1856  027D  2A7E               	goto	l105
  1857  027E                     l105:	
  1858  027E  0008               	return
  1859  027F                     __end_of_DAVBL:	
  1860                           
  1861                           	psect	text10
  1862  0414                     __ptext10:	
  1863 ;; *************** function _delay *****************
  1864 ;; Defined at:
  1865 ;;		line 202 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;  timer           2    4[COMMON] int 
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;		None               void
  1872 ;; Registers used:
  1873 ;;		wreg, status,2
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1879 ;;      Params:         2       0       0       0       0
  1880 ;;      Locals:         0       0       0       0       0
  1881 ;;      Temps:          0       1       0       0       0
  1882 ;;      Totals:         2       1       0       0       0
  1883 ;;Total ram usage:        3 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    2
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_beginCount
  1890 ;;		_instCtrl
  1891 ;;		_initLCD
  1892 ;;		_dataCtrl
  1893 ;;		_DAVBL
  1894 ;; This function uses a non-reentrant model
  1895 ;;
  1896                           
  1897                           
  1898                           ;psect for function _delay
  1899  0414                     _delay:	
  1900  0414                     l1142:	
  1901                           ;ShotclockTimer.c: 205: {
  1902                           
  1903                           ;ShotclockTimer.c: 204: while(count_flag < timer)
  1904                           
  1905                           ;incstack = 0
  1906                           ; Regs used in _delay: [wreg+status,2]
  1907                           
  1908  0414  0877               	movf	_count_flag+1,w
  1909  0415  3A80               	xorlw	128
  1910  0416  1283               	bcf	3,5	;RP0=0, select bank0
  1911  0417  1303               	bcf	3,6	;RP1=0, select bank0
  1912  0418  00A0               	movwf	??_delay
  1913  0419  0875               	movf	delay@timer+1,w
  1914  041A  3A80               	xorlw	128
  1915  041B  0220               	subwf	??_delay,w
  1916  041C  1D03               	skipz
  1917  041D  2C20               	goto	u715
  1918  041E  0874               	movf	delay@timer,w
  1919  041F  0276               	subwf	_count_flag,w
  1920  0420                     u715:	
  1921  0420  1C03               	skipc
  1922  0421  2C14               	goto	l1142
  1923                           
  1924                           ;ShotclockTimer.c: 206: }
  1925                           ;ShotclockTimer.c: 207: count_flag = 0;
  1926  0422  01F6               	clrf	_count_flag
  1927  0423  01F7               	clrf	_count_flag+1
  1928  0424  0008               	return
  1929  0425                     __end_of_delay:	
  1930                           
  1931                           	psect	text11
  1932  0373                     __ptext11:	
  1933 ;; *************** function _ISR *****************
  1934 ;; Defined at:
  1935 ;;		line 210 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1936 ;; Parameters:    Size  Location     Type
  1937 ;;		None
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;		None
  1940 ;; Return value:  Size  Location     Type
  1941 ;;		None               void
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0, pclath, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1949 ;;      Params:         0       0       0       0       0
  1950 ;;      Locals:         0       0       0       0       0
  1951 ;;      Temps:          4       0       0       0       0
  1952 ;;      Totals:         4       0       0       0       0
  1953 ;;Total ram usage:        4 bytes
  1954 ;; Hardware stack levels used:    1
  1955 ;; Hardware stack levels required when called:    1
  1956 ;; This function calls:
  1957 ;;		_toogleFlag
  1958 ;; This function is called by:
  1959 ;;		Interrupt level 1
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           
  1964                           ;psect for function _ISR
  1965  0373                     _ISR:	
  1966                           
  1967                           ;ShotclockTimer.c: 212: GIE = 0;
  1968  0373  138B               	bcf	11,7	;volatile
  1969                           
  1970                           ;ShotclockTimer.c: 213: if(INTF)
  1971  0374  1C8B               	btfss	11,1	;volatile
  1972  0375  2B7D               	goto	i1l126
  1973                           
  1974                           ;ShotclockTimer.c: 214: {
  1975                           ;ShotclockTimer.c: 215: toogleFlag();
  1976  0376  120A  118A  23F0  120A  118A  	fcall	_toogleFlag
  1977                           
  1978                           ;ShotclockTimer.c: 216: INTF = 0;
  1979  037B  108B               	bcf	11,1	;volatile
  1980                           
  1981                           ;ShotclockTimer.c: 217: }
  1982  037C  2B86               	goto	i1l1118
  1983  037D                     i1l126:	
  1984                           
  1985                           ;ShotclockTimer.c: 218: else if(T0IF)
  1986  037D  1D0B               	btfss	11,2	;volatile
  1987  037E  2B86               	goto	i1l1118
  1988                           
  1989                           ;ShotclockTimer.c: 219: {
  1990                           ;ShotclockTimer.c: 220: count_flag++;
  1991  037F  3001               	movlw	1
  1992  0380  07F6               	addwf	_count_flag,f
  1993  0381  1803               	skipnc
  1994  0382  0AF7               	incf	_count_flag+1,f
  1995  0383  3000               	movlw	0
  1996  0384  07F7               	addwf	_count_flag+1,f
  1997                           
  1998                           ;ShotclockTimer.c: 221: T0IF = 0;
  1999  0385  110B               	bcf	11,2	;volatile
  2000  0386                     i1l1118:	
  2001                           
  2002                           ;ShotclockTimer.c: 222: }
  2003                           ;ShotclockTimer.c: 223: GIE = 1;
  2004  0386  178B               	bsf	11,7	;volatile
  2005  0387  0873               	movf	??_ISR+3,w
  2006  0388  1283               	bcf	3,5	;RP0=0, select bank0
  2007  0389  1303               	bcf	3,6	;RP1=0, select bank0
  2008  038A  00FF               	movwf	127
  2009  038B  0872               	movf	??_ISR+2,w
  2010  038C  008A               	movwf	10
  2011  038D  0871               	movf	??_ISR+1,w
  2012  038E  0084               	movwf	4
  2013  038F  0E70               	swapf	??_ISR^(0+-128),w
  2014  0390  0083               	movwf	3
  2015  0391  0EFE               	swapf	126,f
  2016  0392  0E7E               	swapf	126,w
  2017  0393  0009               	retfie
  2018  0394                     __end_of_ISR:	
  2019                           
  2020                           	psect	intentry
  2021  0004                     __pintentry:	
  2022                           ;incstack = 0
  2023                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2024                           
  2025  0004                     interrupt_function:	
  2026  007E                     saved_w	set	btemp
  2027  0004  00FE               	movwf	btemp
  2028  0005  0E03               	swapf	3,w
  2029  0006  00F0               	movwf	??_ISR
  2030  0007  0804               	movf	4,w
  2031  0008  00F1               	movwf	??_ISR+1
  2032  0009  080A               	movf	10,w
  2033  000A  00F2               	movwf	??_ISR+2
  2034  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2035  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2036  000D  087F               	movf	btemp+1,w
  2037  000E  00F3               	movwf	??_ISR+3
  2038  000F  120A  118A  2B73   	ljmp	_ISR
  2039                           
  2040                           	psect	text12
  2041  03F0                     __ptext12:	
  2042 ;; *************** function _toogleFlag *****************
  2043 ;; Defined at:
  2044 ;;		line 226 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  2045 ;; Parameters:    Size  Location     Type
  2046 ;;		None
  2047 ;; Auto vars:     Size  Location     Type
  2048 ;;		None
  2049 ;; Return value:  Size  Location     Type
  2050 ;;		None               void
  2051 ;; Registers used:
  2052 ;;		wreg, status,2, status,0
  2053 ;; Tracked objects:
  2054 ;;		On entry : 0/0
  2055 ;;		On exit  : 0/0
  2056 ;;		Unchanged: 0/0
  2057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2058 ;;      Params:         0       0       0       0       0
  2059 ;;      Locals:         0       0       0       0       0
  2060 ;;      Temps:          0       0       0       0       0
  2061 ;;      Totals:         0       0       0       0       0
  2062 ;;Total ram usage:        0 bytes
  2063 ;; Hardware stack levels used:    1
  2064 ;; This function calls:
  2065 ;;		Nothing
  2066 ;; This function is called by:
  2067 ;;		_ISR
  2068 ;; This function uses a non-reentrant model
  2069 ;;
  2070                           
  2071                           
  2072                           ;psect for function _toogleFlag
  2073  03F0                     _toogleFlag:	
  2074                           
  2075                           ;ShotclockTimer.c: 228: if(flagPause == 0)
  2076                           
  2077                           ;incstack = 0
  2078                           ; Regs used in _toogleFlag: [wreg+status,2+status,0]
  2079  03F0  1283               	bcf	3,5	;RP0=0, select bank0
  2080  03F1  1303               	bcf	3,6	;RP1=0, select bank0
  2081  03F2  0859               	movf	_flagPause+1,w
  2082  03F3  0458               	iorwf	_flagPause,w
  2083  03F4  1D03               	skipz
  2084  03F5  2BFB               	goto	i1l1082
  2085                           
  2086                           ;ShotclockTimer.c: 229: flagPause = 1;
  2087  03F6  3001               	movlw	1
  2088  03F7  00D8               	movwf	_flagPause
  2089  03F8  3000               	movlw	0
  2090  03F9  00D9               	movwf	_flagPause+1
  2091  03FA  0008               	return
  2092  03FB                     i1l1082:	
  2093                           
  2094                           ;ShotclockTimer.c: 231: else if(flagPause == 1)
  2095  03FB  3001               	movlw	1
  2096  03FC  0658               	xorwf	_flagPause,w
  2097  03FD  0459               	iorwf	_flagPause+1,w
  2098  03FE  1D03               	skipz
  2099  03FF  0008               	return
  2100                           
  2101                           ;ShotclockTimer.c: 232: flagPause = 0;
  2102  0400  01D8               	clrf	_flagPause
  2103  0401  01D9               	clrf	_flagPause+1
  2104  0402  0008               	return
  2105  0403                     __end_of_toogleFlag:	
  2106  007E                     btemp	set	126	;btemp
  2107  007E                     wtemp	set	126
  2108  007E                     wtemp0	set	126
  2109  0080                     wtemp1	set	128
  2110  0082                     wtemp2	set	130
  2111  0084                     wtemp3	set	132
  2112  0086                     wtemp4	set	134
  2113  0088                     wtemp5	set	136
  2114  007F                     wtemp6	set	127
  2115  007E                     ttemp	set	126
  2116  007E                     ttemp0	set	126
  2117  0081                     ttemp1	set	129
  2118  0084                     ttemp2	set	132
  2119  0087                     ttemp3	set	135
  2120  007F                     ttemp4	set	127
  2121  007E                     ltemp	set	126
  2122  007E                     ltemp0	set	126
  2123  0082                     ltemp1	set	130
  2124  0086                     ltemp2	set	134
  2125  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     36      64
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    dispSTR@STR	PTR unsigned char  size(1) Largest target is 20
		 -> dispHeader@header(BANK0[20]), 


Critical Paths under _main in COMMON

    _initLCD->_delay
    _beginCount->_delay
    _instCtrl->_delay
    _dataCtrl->_delay
    _DAVBL->_delay

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_dispHeader
    _dispHeader->___awdiv
    _initLCD->_instCtrl
    _dispSTR->_dataCtrl
    _beginCount->___awdiv
    _instCtrl->_delay
    _dataCtrl->_delay
    _DAVBL->_delay

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    9586
                         _beginCount
                         _dispHeader
 ---------------------------------------------------------------------------------
 (1) _dispHeader                                          28    28      0    4969
                                              8 BANK0     28    28      0
                            ___awdiv
                            ___awmod
                           _dataCtrl
                            _dispSTR
                            _initLCD
                           _instCtrl
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              0     0      0     873
                              _delay
                           _instCtrl
 ---------------------------------------------------------------------------------
 (2) _dispSTR                                              4     4      0     612
                                              2 BANK0      4     4      0
                           _dataCtrl
 ---------------------------------------------------------------------------------
 (1) _beginCount                                          10    10      0    4617
                                              8 BANK0     10    10      0
                              _DAVBL
                            ___awdiv
                            ___awmod
                           _dataCtrl
                              _delay
                           _instCtrl
 ---------------------------------------------------------------------------------
 (2) _instCtrl                                             1     1      0     452
                                              1 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _dataCtrl                                             1     1      0     452
                                              1 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1603
                                              4 COMMON     1     1      0
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     835
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _DAVBL                                                2     2      0     650
                                              1 BANK0      2     2      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2     421
                                              4 COMMON     2     0      2
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                         _toogleFlag
 ---------------------------------------------------------------------------------
 (6) _toogleFlag                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beginCount
     _DAVBL
       _delay
     ___awdiv
     ___awmod
     _dataCtrl
       _delay
     _delay
     _instCtrl
       _delay
   _dispHeader
     ___awdiv
     ___awmod
     _dataCtrl
       _delay
     _dispSTR
       _dataCtrl
         _delay
     _initLCD
       _delay
       _instCtrl
         _delay
     _instCtrl
       _delay

 _ISR (ROOT)
   _toogleFlag

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     24      40       5       80.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4A      12        0.0%
ABS                  0      0      4A       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Tue Feb 28 00:47:39 2023

                      pc 0002              __CFG_CP$OFF 0000                       l76 002E  
           ___awdiv@sign 0025                       fsr 0004                      l105 027E  
                    _GIE 005F                      _RA0 0028                      _RA1 0029  
                    _RA2 002A                      _RD4 0044             __CFG_CPD$OFF 0000  
                    _ISR 0373                      u715 0420                      u725 0200  
                    u735 0215                      u745 0222                      u825 02A1  
                    u755 0238                      u765 0245                      u845 02AD  
                    u925 02F8                      u855 02B9                      u865 02C3  
                    u945 0309                      u955 0312                      u980 0167  
                    fsr0 0004                      indf 0000             ___awmod@sign 0025  
           __CFG_FOSC$XT 0000             __CFG_LVP$OFF 0000                     ?_ISR 0070  
                   l1202 026F                     l1212 0356                     l1142 0414  
                   l1232 0296                     l1250 02C2                     l1242 029E  
                   l1226 028B                     l1244 02AC                     l1182 022D  
                   l1254 02CD                     l1270 02E8                     l1342 00BB  
                   l1192 0251                     l1176 020A                     l1258 02D5  
                   l1282 02F5                     l1274 02EF                     l1196 025F  
                   l1188 0247                     l1284 0303                     l1292 031C  
                   l1348 0147                     l1372 03AC                     l1296 0324  
                   l1288 0311                     l1394 0276                     _T0IE 005D  
                   _T0IF 005A                     _INTE 005C                     _INTF 0059  
           __CFG_WRT$OFF 0000                     _main 0394                     btemp 007E  
          __CFG_BOREN$ON 0000                     ltemp 007E                     start 0012  
                   ttemp 007E                     wtemp 007E                    ??_ISR 0070  
                  ?_main 0070          __end_of___awdiv 02DC            __CFG_WDTE$OFF 0000  
        __end_of___awmod 032B                    _DAVBL 01EF                    _CMCON 009C  
        ___awdiv@divisor 0020                    i1l126 037D          ___awdiv@counter 0024  
                  _PORTC 0007                    _PORTD 0008                    _TRISA 0085  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
          __CFG_PWRTE$ON 0000          __end_of_dispSTR 0373          __end_of_initLCD 0351  
                  _delay 0414                    pclath 000A                    ltemp0 007E  
                  ltemp1 0082                    ltemp2 0086                    ltemp3 0080  
                  ttemp0 007E                    ttemp1 0081                    ttemp2 0084  
                  ttemp3 0087                    ttemp4 007F                    status 0003  
                  wtemp0 007E                    wtemp1 0080                    wtemp2 0082  
                  wtemp3 0084                    wtemp4 0086                    wtemp5 0088  
                  wtemp6 007F          __initialization 0015             __end_of_main 03B2  
                 ??_main 0076                   ?_DAVBL 0070         dispHeader@header 002C  
       dispHeader@secLSB 0040         dispHeader@secMSB 0042                   ?_delay 0074  
                 _ADCON1 009F         ___awdiv@dividend 0022                DAVBL@DATA 0021  
                 i1l1118 0386                   i1l1082 03FB         __end_of_dataCtrl 03F0  
              ??___awdiv 0074                ??___awmod 0074         ___awdiv@quotient 0026  
        ___awmod@divisor 0020         __end_of_instCtrl 03DD          ___awmod@counter 0024  
              ??_dispSTR 0022                ??_initLCD 0076                   saved_w 007E  
__end_of__initialization 0029            __end_of_DAVBL 027F           __pcstackCOMMON 0070  
           __pidataBANK0 03B2            __end_of_delay 0425                  ??_DAVBL 0076  
             _beginCount 002D                  ??_delay 0020               __pbssBANK0 005C  
             __pmaintext 0394               __pintentry 0004               _dispHeader 0152  
              ?_dataCtrl 0070                ?_instCtrl 0070               _count_flag 0076  
                ___awdiv 027F                  ___awmod 02DC               _newSeconds 005E  
                _dispSTR 0351                  __ptext1 0152                  __ptext2 032B  
                __ptext3 0351                  __ptext4 002D                  __ptext5 03CA  
                __ptext6 03DD                  __ptext7 02DC                  __ptext8 027F  
                __ptext9 01EF                  _dispSec 005C                  _initLCD 032B  
           __size_of_ISR 0021               ??_dataCtrl 0076         ___awmod@dividend 0022  
             delay@timer 0074                  _seconds 005A              ?_beginCount 0070  
   end_of_initialization 0029               ??_instCtrl 0076         beginCount@secLSB 002A  
       beginCount@secMSB 002E               dispSTR@STR 0023              ?_dispHeader 0070  
           instCtrl@INST 0021               _toogleFlag 03F0      __size_of_beginCount 0125  
        dispHeader@F1179 0044      start_initialization 0015              __end_of_ISR 0394  
           dataCtrl@DATA 0021      __size_of_dispHeader 009D               init_fetch0 0403  
            __pdataBANK0 0044              __pbssCOMMON 0076                ___latbits 0002  
          __pcstackBANK0 0020        __size_of_dataCtrl 0013              ?_toogleFlag 0070  
      __size_of_instCtrl 0013                _flagPause 0058                 ?___awdiv 0020  
               ?___awmod 0020                 ?_dispSTR 0070           __size_of_DAVBL 0090  
               ?_initLCD 0070             ??_beginCount 0028           __size_of_delay 0011  
      interrupt_function 0004       __end_of_beginCount 0152      __size_of_toogleFlag 0013  
           ??_dispHeader 0028      beginCount@secLSB_83 002C      beginCount@secMSB_84 0030  
     __end_of_dispHeader 01EF         __size_of___awdiv 005D         __size_of___awmod 004F  
       __size_of_dispSTR 0022                 _dataCtrl 03DD                 _dataRead 0078  
       __size_of_initLCD 0026                 __ptext10 0414                 __ptext11 0373  
               __ptext12 03F0            __size_of_main 001E                 _instCtrl 03CA  
               dispSTR@i 0024                 init_ram0 0407             ??_toogleFlag 0070  
               intlevel1 0000       __end_of_toogleFlag 0403               _OPTION_REG 0081  
