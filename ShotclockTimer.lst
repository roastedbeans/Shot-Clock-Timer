

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Fri Mar 03 22:48:10 2023

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	intentry,global,class=CODE,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	dabs	1,0x7E,2
    27  0000                     	;# 
    28  0001                     	;# 
    29  0002                     	;# 
    30  0003                     	;# 
    31  0004                     	;# 
    32  0005                     	;# 
    33  0006                     	;# 
    34  0007                     	;# 
    35  0008                     	;# 
    36  0009                     	;# 
    37  000A                     	;# 
    38  000B                     	;# 
    39  000C                     	;# 
    40  000D                     	;# 
    41  000E                     	;# 
    42  000E                     	;# 
    43  000F                     	;# 
    44  0010                     	;# 
    45  0011                     	;# 
    46  0012                     	;# 
    47  0013                     	;# 
    48  0014                     	;# 
    49  0015                     	;# 
    50  0015                     	;# 
    51  0016                     	;# 
    52  0017                     	;# 
    53  0018                     	;# 
    54  0019                     	;# 
    55  001A                     	;# 
    56  001B                     	;# 
    57  001B                     	;# 
    58  001C                     	;# 
    59  001D                     	;# 
    60  001E                     	;# 
    61  001F                     	;# 
    62  0081                     	;# 
    63  0085                     	;# 
    64  0086                     	;# 
    65  0087                     	;# 
    66  0088                     	;# 
    67  0089                     	;# 
    68  008C                     	;# 
    69  008D                     	;# 
    70  008E                     	;# 
    71  0091                     	;# 
    72  0092                     	;# 
    73  0093                     	;# 
    74  0094                     	;# 
    75  0098                     	;# 
    76  0099                     	;# 
    77  009C                     	;# 
    78  009D                     	;# 
    79  009E                     	;# 
    80  009F                     	;# 
    81  010C                     	;# 
    82  010D                     	;# 
    83  010E                     	;# 
    84  010F                     	;# 
    85  018C                     	;# 
    86  018D                     	;# 
    87                           
    88                           	psect	idataBANK0
    89  02DC                     __pidataBANK0:	
    90                           
    91                           ;initializer for dispHeader@F1116
    92  02DC  3454               	retlw	84
    93  02DD  3449               	retlw	73
    94  02DE  344D               	retlw	77
    95  02DF  3445               	retlw	69
    96  02E0  343A               	retlw	58
    97  02E1  3400               	retlw	0
    98  02E2  3400               	retlw	0
    99  02E3  3400               	retlw	0
   100  02E4  3400               	retlw	0
   101  02E5  3400               	retlw	0
   102  02E6  3400               	retlw	0
   103  02E7  3400               	retlw	0
   104  02E8  3400               	retlw	0
   105  02E9  3400               	retlw	0
   106  02EA  3400               	retlw	0
   107  02EB  3400               	retlw	0
   108  02EC  3400               	retlw	0
   109  02ED  3400               	retlw	0
   110  02EE  3400               	retlw	0
   111  02EF  3400               	retlw	0
   112                           
   113                           ;initializer for _flagPause
   114  02F0  3401               	retlw	1
   115  02F1  3400               	retlw	0
   116                           
   117                           ;initializer for _seconds
   118  02F2  3418               	retlw	24
   119  02F3  3400               	retlw	0
   120  0007                     _PORTC	set	7
   121  0008                     _PORTD	set	8
   122  005F                     _GIE	set	95
   123  005C                     _INTE	set	92
   124  0059                     _INTF	set	89
   125  0030                     _RB0	set	48
   126  0035                     _RB5	set	53
   127  0036                     _RB6	set	54
   128  0037                     _RB7	set	55
   129  005D                     _T0IE	set	93
   130  005A                     _T0IF	set	90
   131  0081                     _OPTION_REG	set	129
   132  0086                     _TRISB	set	134
   133  0087                     _TRISC	set	135
   134  0088                     _TRISD	set	136
   135                           
   136                           ; #config settings
   137  0000                     
   138                           	psect	cinit
   139  0015                     start_initialization:	
   140  0015                     __initialization:	
   141                           
   142                           ; Clear objects allocated to COMMON
   143  0015  01F6               	clrf	__pbssCOMMON& (0+127)
   144  0016  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   145  0017  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
   146  0018  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   147                           
   148                           ; Clear objects allocated to BANK0
   149  0019  01DD               	clrf	__pbssBANK0& (0+127)
   150  001A  01DE               	clrf	(__pbssBANK0+1)& (0+127)
   151                           
   152                           ; Initialize objects allocated to BANK0
   153  001B  1383               	bcf	3,7	;select IRP bank0
   154  001C  305D               	movlw	low (__pdataBANK0+24)
   155  001D  00FD               	movwf	btemp+-1
   156  001E  3002               	movlw	high __pidataBANK0
   157  001F  00FE               	movwf	btemp
   158  0020  30DC               	movlw	low __pidataBANK0
   159  0021  00FF               	movwf	btemp+1
   160  0022  3045               	movlw	low __pdataBANK0
   161  0023  0084               	movwf	4
   162  0024  120A  118A  2331   	fcall	init_ram0
   163  0027                     end_of_initialization:	
   164                           ;End of C runtime variable initialization code
   165                           
   166  0027                     __end_of__initialization:	
   167  0027  0183               	clrf	3
   168  0028  120A  118A  2AC3   	ljmp	_main	;jump to C main() function
   169                           
   170                           	psect	bssCOMMON
   171  0076                     __pbssCOMMON:	
   172  0076                     _count_flag:	
   173  0076                     	ds	2
   174  0078                     _dataRead:	
   175  0078                     	ds	2
   176                           
   177                           	psect	bssBANK0
   178  005D                     __pbssBANK0:	
   179  005D                     _dispSec:	
   180  005D                     	ds	2
   181                           
   182                           	psect	dataBANK0
   183  0045                     __pdataBANK0:	
   184  0045                     dispHeader@F1116:	
   185  0045                     	ds	20
   186  0059                     _flagPause:	
   187  0059                     	ds	2
   188  005B                     _seconds:	
   189  005B                     	ds	2
   190                           
   191                           	psect	inittext
   192  032D                     init_fetch0:	
   193                           ;	Called with low address in FSR and high address in W
   194                           
   195  032D  087E               	movf	126,w
   196  032E  008A               	movwf	10
   197  032F  087F               	movf	127,w
   198  0330  0082               	movwf	2
   199  0331                     init_ram0:	
   200                           ;Called with:
   201                           ;	high address of idata address in btemp 
   202                           ;	low address of idata address in btemp+1 
   203                           ;	low address of data in FSR
   204                           ;	high address + 1 of data in btemp-1
   205                           
   206  0331  232D  120A  118A   	fcall	init_fetch0
   207  0334  0080               	movwf	0
   208  0335  0A84               	incf	4,f
   209  0336  0804               	movf	4,w
   210  0337  067D               	xorwf	125,w
   211  0338  1903               	btfsc	3,2
   212  0339  3400               	retlw	0
   213  033A  0AFF               	incf	127,f
   214  033B  1903               	btfsc	3,2
   215  033C  0AFE               	incf	126,f
   216  033D  2B31               	goto	init_ram0
   217                           
   218                           	psect	cstackCOMMON
   219  0070                     __pcstackCOMMON:	
   220  0070                     ?_dispHeader:	
   221  0070                     ?_beginCount:	
   222                           ; 0 bytes @ 0x0
   223                           
   224  0070                     ?_instCtrl:	
   225                           ; 0 bytes @ 0x0
   226                           
   227  0070                     ?_dataCtrl:	
   228                           ; 0 bytes @ 0x0
   229                           
   230  0070                     ?_DAVBL:	
   231                           ; 0 bytes @ 0x0
   232                           
   233  0070                     ?_dispSTR:	
   234                           ; 0 bytes @ 0x0
   235                           
   236  0070                     ?_toggleFlag:	
   237                           ; 0 bytes @ 0x0
   238                           
   239  0070                     ??_toggleFlag:	
   240                           ; 0 bytes @ 0x0
   241                           
   242  0070                     ?_main:	
   243                           ; 0 bytes @ 0x0
   244                           
   245  0070                     ?_initLCD:	
   246                           ; 0 bytes @ 0x0
   247                           
   248  0070                     ?_ISR:	
   249                           ; 0 bytes @ 0x0
   250                           
   251  0070                     ??_ISR:	
   252                           ; 0 bytes @ 0x0
   253                           
   254                           
   255                           ; 0 bytes @ 0x0
   256  0070                     	ds	6
   257                           
   258                           	psect	cstackBANK0
   259  0020                     __pcstackBANK0:	
   260  0020                     ??_DAVBL:	
   261  0020                     ?_delay:	
   262                           ; 0 bytes @ 0x0
   263                           
   264  0020                     ?___awdiv:	
   265                           ; 0 bytes @ 0x0
   266                           
   267  0020                     ?___awmod:	
   268                           ; 2 bytes @ 0x0
   269                           
   270  0020                     DAVBL@DATA:	
   271                           ; 2 bytes @ 0x0
   272                           
   273  0020                     delay@timer:	
   274                           ; 2 bytes @ 0x0
   275                           
   276  0020                     ___awdiv@divisor:	
   277                           ; 2 bytes @ 0x0
   278                           
   279  0020                     ___awmod@divisor:	
   280                           ; 2 bytes @ 0x0
   281                           
   282                           
   283                           ; 2 bytes @ 0x0
   284  0020                     	ds	2
   285  0022                     ??_delay:	
   286  0022                     ___awdiv@dividend:	
   287                           ; 0 bytes @ 0x2
   288                           
   289  0022                     ___awmod@dividend:	
   290                           ; 2 bytes @ 0x2
   291                           
   292                           
   293                           ; 2 bytes @ 0x2
   294  0022                     	ds	1
   295  0023                     ??_instCtrl:	
   296  0023                     ??_dataCtrl:	
   297                           ; 0 bytes @ 0x3
   298                           
   299  0023                     instCtrl@INST:	
   300                           ; 0 bytes @ 0x3
   301                           
   302  0023                     dataCtrl@DATA:	
   303                           ; 1 bytes @ 0x3
   304                           
   305                           
   306                           ; 1 bytes @ 0x3
   307  0023                     	ds	1
   308  0024                     ??_dispSTR:	
   309  0024                     ??_initLCD:	
   310                           ; 0 bytes @ 0x4
   311                           
   312  0024                     ??___awdiv:	
   313                           ; 0 bytes @ 0x4
   314                           
   315  0024                     ??___awmod:	
   316                           ; 0 bytes @ 0x4
   317                           
   318                           
   319                           ; 0 bytes @ 0x4
   320  0024                     	ds	1
   321  0025                     dispSTR@STR:	
   322  0025                     ___awdiv@counter:	
   323                           ; 1 bytes @ 0x5
   324                           
   325  0025                     ___awmod@counter:	
   326                           ; 1 bytes @ 0x5
   327                           
   328                           
   329                           ; 1 bytes @ 0x5
   330  0025                     	ds	1
   331  0026                     ___awdiv@sign:	
   332  0026                     ___awmod@sign:	
   333                           ; 1 bytes @ 0x6
   334                           
   335  0026                     dispSTR@i:	
   336                           ; 1 bytes @ 0x6
   337                           
   338                           
   339                           ; 2 bytes @ 0x6
   340  0026                     	ds	1
   341  0027                     ___awdiv@quotient:	
   342                           
   343                           ; 2 bytes @ 0x7
   344  0027                     	ds	2
   345  0029                     ??_dispHeader:	
   346  0029                     ??_beginCount:	
   347                           ; 0 bytes @ 0x9
   348                           
   349  0029                     beginCount@secLSB:	
   350                           ; 0 bytes @ 0x9
   351                           
   352                           
   353                           ; 2 bytes @ 0x9
   354  0029                     	ds	2
   355  002B                     beginCount@secMSB:	
   356                           
   357                           ; 2 bytes @ 0xB
   358  002B                     	ds	2
   359  002D                     dispHeader@header:	
   360                           
   361                           ; 20 bytes @ 0xD
   362  002D                     	ds	20
   363  0041                     dispHeader@secLSB:	
   364                           
   365                           ; 2 bytes @ 0x21
   366  0041                     	ds	2
   367  0043                     dispHeader@secMSB:	
   368                           
   369                           ; 2 bytes @ 0x23
   370  0043                     	ds	2
   371  0045                     ??_main:	
   372                           
   373                           	psect	maintext
   374  02C3                     __pmaintext:	
   375                           ; 0 bytes @ 0x25
   376 ;;
   377 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   378 ;;
   379 ;; *************** function _main *****************
   380 ;; Defined at:
   381 ;;		line 27 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   382 ;; Parameters:    Size  Location     Type
   383 ;;		None
   384 ;; Auto vars:     Size  Location     Type
   385 ;;		None
   386 ;; Return value:  Size  Location     Type
   387 ;;		None               void
   388 ;; Registers used:
   389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   390 ;; Tracked objects:
   391 ;;		On entry : 17F/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   395 ;;      Params:         0       0       0       0       0
   396 ;;      Locals:         0       0       0       0       0
   397 ;;      Temps:          0       0       0       0       0
   398 ;;      Totals:         0       0       0       0       0
   399 ;;Total ram usage:        0 bytes
   400 ;; Hardware stack levels required when called:    6
   401 ;; This function calls:
   402 ;;		_beginCount
   403 ;;		_dispHeader
   404 ;; This function is called by:
   405 ;;		Startup code after reset
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409                           
   410                           ;psect for function _main
   411  02C3                     _main:	
   412                           
   413                           ;ShotclockTimer.c: 29: OPTION_REG = 0x44;
   414                           
   415                           ;incstack = 0
   416                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   417  02C3  3044               	movlw	68
   418  02C4  1683               	bsf	3,5	;RP0=1, select bank1
   419  02C5  1303               	bcf	3,6	;RP1=0, select bank1
   420  02C6  0081               	movwf	1	;volatile
   421                           
   422                           ;ShotclockTimer.c: 30: INTE = 1;
   423  02C7  160B               	bsf	11,4	;volatile
   424                           
   425                           ;ShotclockTimer.c: 31: INTF = 0;
   426  02C8  108B               	bcf	11,1	;volatile
   427                           
   428                           ;ShotclockTimer.c: 32: T0IE = 1;
   429  02C9  168B               	bsf	11,5	;volatile
   430                           
   431                           ;ShotclockTimer.c: 33: T0IF = 0;
   432  02CA  110B               	bcf	11,2	;volatile
   433                           
   434                           ;ShotclockTimer.c: 34: GIE = 1;
   435  02CB  178B               	bsf	11,7	;volatile
   436                           
   437                           ;ShotclockTimer.c: 39: TRISB = 0x01;
   438  02CC  3001               	movlw	1
   439  02CD  0086               	movwf	6	;volatile
   440                           
   441                           ;ShotclockTimer.c: 40: TRISC = 0x00;
   442  02CE  0187               	clrf	7	;volatile
   443                           
   444                           ;ShotclockTimer.c: 41: TRISD = 0x0F;
   445  02CF  300F               	movlw	15
   446  02D0  0088               	movwf	8	;volatile
   447                           
   448                           ;ShotclockTimer.c: 43: dispHeader();
   449  02D1  120A  118A  20CB  120A  118A  	fcall	_dispHeader
   450  02D6                     l1313:	
   451                           ;ShotclockTimer.c: 45: while(1)
   452                           
   453                           
   454                           ;ShotclockTimer.c: 46: {
   455                           ;ShotclockTimer.c: 47: beginCount();
   456  02D6  120A  118A  202B  120A  118A  	fcall	_beginCount
   457  02DB  2AD6               	goto	l1313
   458  02DC                     __end_of_main:	
   459                           
   460                           	psect	text1
   461  00CB                     __ptext1:	
   462 ;; *************** function _dispHeader *****************
   463 ;; Defined at:
   464 ;;		line 140 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   465 ;; Parameters:    Size  Location     Type
   466 ;;		None
   467 ;; Auto vars:     Size  Location     Type
   468 ;;  header         20   13[BANK0 ] unsigned char [20]
   469 ;;  secMSB          2   35[BANK0 ] int 
   470 ;;  secLSB          2   33[BANK0 ] int 
   471 ;; Return value:  Size  Location     Type
   472 ;;		None               void
   473 ;; Registers used:
   474 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   475 ;; Tracked objects:
   476 ;;		On entry : 0/0
   477 ;;		On exit  : 0/0
   478 ;;		Unchanged: 0/0
   479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   480 ;;      Params:         0       0       0       0       0
   481 ;;      Locals:         0      24       0       0       0
   482 ;;      Temps:          0       4       0       0       0
   483 ;;      Totals:         0      28       0       0       0
   484 ;;Total ram usage:       28 bytes
   485 ;; Hardware stack levels used:    1
   486 ;; Hardware stack levels required when called:    5
   487 ;; This function calls:
   488 ;;		___awdiv
   489 ;;		___awmod
   490 ;;		_dataCtrl
   491 ;;		_dispSTR
   492 ;;		_initLCD
   493 ;;		_instCtrl
   494 ;; This function is called by:
   495 ;;		_main
   496 ;; This function uses a non-reentrant model
   497 ;;
   498                           
   499                           
   500                           ;psect for function _dispHeader
   501  00CB                     _dispHeader:	
   502                           
   503                           ;ShotclockTimer.c: 142: initLCD();
   504                           
   505                           ;incstack = 0
   506                           ; Regs used in _dispHeader: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   507  00CB  120A  118A  22A6  120A  118A  	fcall	_initLCD
   508                           
   509                           ;ShotclockTimer.c: 143: instCtrl(0x80);
   510  00D0  3080               	movlw	128
   511  00D1  120A  118A  22F4  120A  118A  	fcall	_instCtrl
   512                           
   513                           ;ShotclockTimer.c: 144: char header[20] = "TIME:";
   514  00D6  302D               	movlw	dispHeader@header& (0+255)
   515  00D7  0084               	movwf	4
   516  00D8  3045               	movlw	low dispHeader@F1116
   517  00D9  1283               	bcf	3,5	;RP0=0, select bank0
   518  00DA  1303               	bcf	3,6	;RP1=0, select bank0
   519  00DB  00A9               	movwf	??_dispHeader
   520  00DC  0804               	movf	4,w
   521  00DD  00AA               	movwf	??_dispHeader+1
   522  00DE  3014               	movlw	20
   523  00DF  00AB               	movwf	??_dispHeader+2
   524  00E0                     u940:	
   525  00E0  0829               	movf	??_dispHeader,w
   526  00E1  0084               	movwf	4
   527  00E2  1383               	bcf	3,7	;select IRP bank0
   528  00E3  0800               	movf	0,w
   529  00E4  00AC               	movwf	??_dispHeader+3
   530  00E5  0AA9               	incf	??_dispHeader,f
   531  00E6  082A               	movf	??_dispHeader+1,w
   532  00E7  0084               	movwf	4
   533  00E8  082C               	movf	??_dispHeader+3,w
   534  00E9  0080               	movwf	0
   535  00EA  0AAA               	incf	??_dispHeader+1,f
   536  00EB  0BAB               	decfsz	??_dispHeader+2,f
   537  00EC  28E0               	goto	u940
   538                           
   539                           ;ShotclockTimer.c: 145: dispSTR(header);
   540  00ED  302D               	movlw	dispHeader@header& (0+255)
   541  00EE  120A  118A  2284  120A  118A  	fcall	_dispSTR
   542                           
   543                           ;ShotclockTimer.c: 146: dispSec = (seconds%60);
   544  00F3  303C               	movlw	60
   545  00F4  1283               	bcf	3,5	;RP0=0, select bank0
   546  00F5  1303               	bcf	3,6	;RP1=0, select bank0
   547  00F6  00A0               	movwf	___awmod@divisor
   548  00F7  3000               	movlw	0
   549  00F8  00A1               	movwf	___awmod@divisor+1
   550  00F9  085C               	movf	_seconds+1,w
   551  00FA  01A3               	clrf	___awmod@dividend+1
   552  00FB  07A3               	addwf	___awmod@dividend+1,f
   553  00FC  085B               	movf	_seconds,w
   554  00FD  01A2               	clrf	___awmod@dividend
   555  00FE  07A2               	addwf	___awmod@dividend,f
   556  00FF  120A  118A  21C5  120A  118A  	fcall	___awmod
   557  0104  1283               	bcf	3,5	;RP0=0, select bank0
   558  0105  1303               	bcf	3,6	;RP1=0, select bank0
   559  0106  0821               	movf	?___awmod+1,w
   560  0107  01DE               	clrf	_dispSec+1
   561  0108  07DE               	addwf	_dispSec+1,f
   562  0109  0820               	movf	?___awmod,w
   563  010A  01DD               	clrf	_dispSec
   564  010B  07DD               	addwf	_dispSec,f
   565                           
   566                           ;ShotclockTimer.c: 148: int secLSB;
   567                           ;ShotclockTimer.c: 149: secLSB = dispSec%10;
   568  010C  300A               	movlw	10
   569  010D  00A0               	movwf	___awmod@divisor
   570  010E  3000               	movlw	0
   571  010F  00A1               	movwf	___awmod@divisor+1
   572  0110  085E               	movf	_dispSec+1,w
   573  0111  01A3               	clrf	___awmod@dividend+1
   574  0112  07A3               	addwf	___awmod@dividend+1,f
   575  0113  085D               	movf	_dispSec,w
   576  0114  01A2               	clrf	___awmod@dividend
   577  0115  07A2               	addwf	___awmod@dividend,f
   578  0116  120A  118A  21C5  120A  118A  	fcall	___awmod
   579  011B  1283               	bcf	3,5	;RP0=0, select bank0
   580  011C  1303               	bcf	3,6	;RP1=0, select bank0
   581  011D  0821               	movf	?___awmod+1,w
   582  011E  01C2               	clrf	dispHeader@secLSB+1
   583  011F  07C2               	addwf	dispHeader@secLSB+1,f
   584  0120  0820               	movf	?___awmod,w
   585  0121  01C1               	clrf	dispHeader@secLSB
   586  0122  07C1               	addwf	dispHeader@secLSB,f
   587                           
   588                           ;ShotclockTimer.c: 150: int secMSB;
   589                           ;ShotclockTimer.c: 151: secMSB = dispSec/10;
   590  0123  300A               	movlw	10
   591  0124  00A0               	movwf	___awdiv@divisor
   592  0125  3000               	movlw	0
   593  0126  00A1               	movwf	___awdiv@divisor+1
   594  0127  085E               	movf	_dispSec+1,w
   595  0128  01A3               	clrf	___awdiv@dividend+1
   596  0129  07A3               	addwf	___awdiv@dividend+1,f
   597  012A  085D               	movf	_dispSec,w
   598  012B  01A2               	clrf	___awdiv@dividend
   599  012C  07A2               	addwf	___awdiv@dividend,f
   600  012D  120A  118A  2168  120A  118A  	fcall	___awdiv
   601  0132  1283               	bcf	3,5	;RP0=0, select bank0
   602  0133  1303               	bcf	3,6	;RP1=0, select bank0
   603  0134  0821               	movf	?___awdiv+1,w
   604  0135  01C4               	clrf	dispHeader@secMSB+1
   605  0136  07C4               	addwf	dispHeader@secMSB+1,f
   606  0137  0820               	movf	?___awdiv,w
   607  0138  01C3               	clrf	dispHeader@secMSB
   608  0139  07C3               	addwf	dispHeader@secMSB,f
   609                           
   610                           ;ShotclockTimer.c: 152: secMSB = secMSB%10;
   611  013A  300A               	movlw	10
   612  013B  00A0               	movwf	___awmod@divisor
   613  013C  3000               	movlw	0
   614  013D  00A1               	movwf	___awmod@divisor+1
   615  013E  0844               	movf	dispHeader@secMSB+1,w
   616  013F  01A3               	clrf	___awmod@dividend+1
   617  0140  07A3               	addwf	___awmod@dividend+1,f
   618  0141  0843               	movf	dispHeader@secMSB,w
   619  0142  01A2               	clrf	___awmod@dividend
   620  0143  07A2               	addwf	___awmod@dividend,f
   621  0144  120A  118A  21C5  120A  118A  	fcall	___awmod
   622  0149  1283               	bcf	3,5	;RP0=0, select bank0
   623  014A  1303               	bcf	3,6	;RP1=0, select bank0
   624  014B  0821               	movf	?___awmod+1,w
   625  014C  01C4               	clrf	dispHeader@secMSB+1
   626  014D  07C4               	addwf	dispHeader@secMSB+1,f
   627  014E  0820               	movf	?___awmod,w
   628  014F  01C3               	clrf	dispHeader@secMSB
   629  0150  07C3               	addwf	dispHeader@secMSB,f
   630                           
   631                           ;ShotclockTimer.c: 153: instCtrl(0xC0);
   632  0151  30C0               	movlw	192
   633  0152  120A  118A  22F4  120A  118A  	fcall	_instCtrl
   634                           
   635                           ;ShotclockTimer.c: 154: dataCtrl(secMSB+48);
   636  0157  1283               	bcf	3,5	;RP0=0, select bank0
   637  0158  1303               	bcf	3,6	;RP1=0, select bank0
   638  0159  0843               	movf	dispHeader@secMSB,w
   639  015A  3E30               	addlw	48
   640  015B  120A  118A  2307  120A  118A  	fcall	_dataCtrl
   641                           
   642                           ;ShotclockTimer.c: 155: dataCtrl(secLSB+48);
   643  0160  1283               	bcf	3,5	;RP0=0, select bank0
   644  0161  1303               	bcf	3,6	;RP1=0, select bank0
   645  0162  0841               	movf	dispHeader@secLSB,w
   646  0163  3E30               	addlw	48
   647  0164  120A  118A  2307   	fcall	_dataCtrl
   648  0167  0008               	return
   649  0168                     __end_of_dispHeader:	
   650                           
   651                           	psect	text2
   652  02A6                     __ptext2:	
   653 ;; *************** function _initLCD *****************
   654 ;; Defined at:
   655 ;;		line 121 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   656 ;; Parameters:    Size  Location     Type
   657 ;;		None
   658 ;; Auto vars:     Size  Location     Type
   659 ;;		None
   660 ;; Return value:  Size  Location     Type
   661 ;;		None               void
   662 ;; Registers used:
   663 ;;		wreg, status,2, status,0, pclath, cstack
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   669 ;;      Params:         0       0       0       0       0
   670 ;;      Locals:         0       0       0       0       0
   671 ;;      Temps:          0       0       0       0       0
   672 ;;      Totals:         0       0       0       0       0
   673 ;;Total ram usage:        0 bytes
   674 ;; Hardware stack levels used:    1
   675 ;; Hardware stack levels required when called:    4
   676 ;; This function calls:
   677 ;;		_instCtrl
   678 ;; This function is called by:
   679 ;;		_dispHeader
   680 ;; This function uses a non-reentrant model
   681 ;;
   682                           
   683                           
   684                           ;psect for function _initLCD
   685  02A6                     _initLCD:	
   686                           
   687                           ;ShotclockTimer.c: 123: instCtrl(0x38);
   688                           
   689                           ;incstack = 0
   690                           ; Regs used in _initLCD: [wreg+status,2+status,0+pclath+cstack]
   691  02A6  3038               	movlw	56
   692  02A7  120A  118A  22F4  120A  118A  	fcall	_instCtrl
   693                           
   694                           ;ShotclockTimer.c: 124: instCtrl(0x08);
   695  02AC  3008               	movlw	8
   696  02AD  120A  118A  22F4  120A  118A  	fcall	_instCtrl
   697                           
   698                           ;ShotclockTimer.c: 125: instCtrl(0x01);
   699  02B2  3001               	movlw	1
   700  02B3  120A  118A  22F4  120A  118A  	fcall	_instCtrl
   701                           
   702                           ;ShotclockTimer.c: 126: instCtrl(0x06);
   703  02B8  3006               	movlw	6
   704  02B9  120A  118A  22F4  120A  118A  	fcall	_instCtrl
   705                           
   706                           ;ShotclockTimer.c: 127: instCtrl(0x0E);
   707  02BE  300E               	movlw	14
   708  02BF  120A  118A  22F4   	fcall	_instCtrl
   709  02C2  0008               	return
   710  02C3                     __end_of_initLCD:	
   711                           
   712                           	psect	text3
   713  0284                     __ptext3:	
   714 ;; *************** function _dispSTR *****************
   715 ;; Defined at:
   716 ;;		line 158 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   717 ;; Parameters:    Size  Location     Type
   718 ;;  STR             1    wreg     PTR unsigned char 
   719 ;;		 -> dispHeader@header(20), 
   720 ;; Auto vars:     Size  Location     Type
   721 ;;  STR             1    5[BANK0 ] PTR unsigned char 
   722 ;;		 -> dispHeader@header(20), 
   723 ;;  i               2    6[BANK0 ] int 
   724 ;; Return value:  Size  Location     Type
   725 ;;		None               void
   726 ;; Registers used:
   727 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   728 ;; Tracked objects:
   729 ;;		On entry : 0/0
   730 ;;		On exit  : 0/0
   731 ;;		Unchanged: 0/0
   732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   733 ;;      Params:         0       0       0       0       0
   734 ;;      Locals:         0       3       0       0       0
   735 ;;      Temps:          0       1       0       0       0
   736 ;;      Totals:         0       4       0       0       0
   737 ;;Total ram usage:        4 bytes
   738 ;; Hardware stack levels used:    1
   739 ;; Hardware stack levels required when called:    4
   740 ;; This function calls:
   741 ;;		_dataCtrl
   742 ;; This function is called by:
   743 ;;		_dispHeader
   744 ;; This function uses a non-reentrant model
   745 ;;
   746                           
   747                           
   748                           ;psect for function _dispSTR
   749  0284                     _dispSTR:	
   750                           
   751                           ;incstack = 0
   752                           ; Regs used in _dispSTR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   753                           ;dispSTR@STR stored from wreg
   754  0284  1283               	bcf	3,5	;RP0=0, select bank0
   755  0285  1303               	bcf	3,6	;RP1=0, select bank0
   756  0286  00A5               	movwf	dispSTR@STR
   757                           
   758                           ;ShotclockTimer.c: 160: for(int i = 0;;i++)
   759  0287  01A6               	clrf	dispSTR@i
   760  0288  01A7               	clrf	dispSTR@i+1
   761  0289                     l1157:	
   762                           
   763                           ;ShotclockTimer.c: 161: {
   764                           ;ShotclockTimer.c: 162: if(STR[i] != '\0')
   765  0289  0826               	movf	dispSTR@i,w
   766  028A  0725               	addwf	dispSTR@STR,w
   767  028B  00A4               	movwf	??_dispSTR
   768  028C  0824               	movf	??_dispSTR,w
   769  028D  0084               	movwf	4
   770  028E  1383               	bcf	3,7	;select IRP bank0
   771  028F  0880               	movf	0,f
   772  0290  1903               	skipnz
   773  0291  0008               	return
   774                           
   775                           ;ShotclockTimer.c: 163: {
   776                           ;ShotclockTimer.c: 164: dataCtrl(STR[i]);
   777  0292  0826               	movf	dispSTR@i,w
   778  0293  0725               	addwf	dispSTR@STR,w
   779  0294  00A4               	movwf	??_dispSTR
   780  0295  0824               	movf	??_dispSTR,w
   781  0296  0084               	movwf	4
   782  0297  0800               	movf	0,w
   783  0298  120A  118A  2307  120A  118A  	fcall	_dataCtrl
   784                           
   785                           ;ShotclockTimer.c: 166: else
   786                           ;ShotclockTimer.c: 167: {
   787                           ;ShotclockTimer.c: 168: return;
   788                           
   789                           ;ShotclockTimer.c: 165: }
   790  029D  3001               	movlw	1
   791  029E  1283               	bcf	3,5	;RP0=0, select bank0
   792  029F  1303               	bcf	3,6	;RP1=0, select bank0
   793  02A0  07A6               	addwf	dispSTR@i,f
   794  02A1  1803               	skipnc
   795  02A2  0AA7               	incf	dispSTR@i+1,f
   796  02A3  3000               	movlw	0
   797  02A4  07A7               	addwf	dispSTR@i+1,f
   798  02A5  2A89               	goto	l1157
   799  02A6                     __end_of_dispSTR:	
   800                           
   801                           	psect	text4
   802  002B                     __ptext4:	
   803 ;; *************** function _beginCount *****************
   804 ;; Defined at:
   805 ;;		line 51 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
   806 ;; Parameters:    Size  Location     Type
   807 ;;		None
   808 ;; Auto vars:     Size  Location     Type
   809 ;;  secMSB          2   11[BANK0 ] int 
   810 ;;  secLSB          2    9[BANK0 ] int 
   811 ;; Return value:  Size  Location     Type
   812 ;;		None               void
   813 ;; Registers used:
   814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   820 ;;      Params:         0       0       0       0       0
   821 ;;      Locals:         0       4       0       0       0
   822 ;;      Temps:          0       0       0       0       0
   823 ;;      Totals:         0       4       0       0       0
   824 ;;Total ram usage:        4 bytes
   825 ;; Hardware stack levels used:    1
   826 ;; Hardware stack levels required when called:    4
   827 ;; This function calls:
   828 ;;		_DAVBL
   829 ;;		___awdiv
   830 ;;		___awmod
   831 ;;		_dataCtrl
   832 ;;		_delay
   833 ;;		_instCtrl
   834 ;; This function is called by:
   835 ;;		_main
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           
   840                           ;psect for function _beginCount
   841  002B                     _beginCount:	
   842  002B                     l1291:	
   843                           ;ShotclockTimer.c: 53: int secLSB;
   844                           ;ShotclockTimer.c: 54: int secMSB;
   845                           ;ShotclockTimer.c: 55: for(;seconds >= 0;)
   846                           
   847                           ;incstack = 0
   848                           ; Regs used in _beginCount: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   849                           
   850  002B  1283               	bcf	3,5	;RP0=0, select bank0
   851  002C  1303               	bcf	3,6	;RP1=0, select bank0
   852  002D  1BDC               	btfsc	_seconds+1,7
   853  002E  28C6               	goto	l1293
   854  002F                     L1:	
   855                           
   856                           ;ShotclockTimer.c: 56: {
   857                           ;ShotclockTimer.c: 57: dispSec = (seconds%60);
   858  002F  303C               	movlw	60
   859  0030  1283               	bcf	3,5	;RP0=0, select bank0
   860  0031  1303               	bcf	3,6	;RP1=0, select bank0
   861  0032  00A0               	movwf	___awmod@divisor
   862  0033  3000               	movlw	0
   863  0034  00A1               	movwf	___awmod@divisor+1
   864  0035  085C               	movf	_seconds+1,w
   865  0036  01A3               	clrf	___awmod@dividend+1
   866  0037  07A3               	addwf	___awmod@dividend+1,f
   867  0038  085B               	movf	_seconds,w
   868  0039  01A2               	clrf	___awmod@dividend
   869  003A  07A2               	addwf	___awmod@dividend,f
   870  003B  120A  118A  21C5  120A  118A  	fcall	___awmod
   871  0040  1283               	bcf	3,5	;RP0=0, select bank0
   872  0041  1303               	bcf	3,6	;RP1=0, select bank0
   873  0042  0821               	movf	?___awmod+1,w
   874  0043  01DE               	clrf	_dispSec+1
   875  0044  07DE               	addwf	_dispSec+1,f
   876  0045  0820               	movf	?___awmod,w
   877  0046  01DD               	clrf	_dispSec
   878  0047  07DD               	addwf	_dispSec,f
   879                           
   880                           ;ShotclockTimer.c: 58: secLSB = dispSec%10;
   881  0048  300A               	movlw	10
   882  0049  00A0               	movwf	___awmod@divisor
   883  004A  3000               	movlw	0
   884  004B  00A1               	movwf	___awmod@divisor+1
   885  004C  085E               	movf	_dispSec+1,w
   886  004D  01A3               	clrf	___awmod@dividend+1
   887  004E  07A3               	addwf	___awmod@dividend+1,f
   888  004F  085D               	movf	_dispSec,w
   889  0050  01A2               	clrf	___awmod@dividend
   890  0051  07A2               	addwf	___awmod@dividend,f
   891  0052  120A  118A  21C5  120A  118A  	fcall	___awmod
   892  0057  1283               	bcf	3,5	;RP0=0, select bank0
   893  0058  1303               	bcf	3,6	;RP1=0, select bank0
   894  0059  0821               	movf	?___awmod+1,w
   895  005A  01AA               	clrf	beginCount@secLSB+1
   896  005B  07AA               	addwf	beginCount@secLSB+1,f
   897  005C  0820               	movf	?___awmod,w
   898  005D  01A9               	clrf	beginCount@secLSB
   899  005E  07A9               	addwf	beginCount@secLSB,f
   900                           
   901                           ;ShotclockTimer.c: 59: secMSB = dispSec/10;
   902  005F  300A               	movlw	10
   903  0060  00A0               	movwf	___awdiv@divisor
   904  0061  3000               	movlw	0
   905  0062  00A1               	movwf	___awdiv@divisor+1
   906  0063  085E               	movf	_dispSec+1,w
   907  0064  01A3               	clrf	___awdiv@dividend+1
   908  0065  07A3               	addwf	___awdiv@dividend+1,f
   909  0066  085D               	movf	_dispSec,w
   910  0067  01A2               	clrf	___awdiv@dividend
   911  0068  07A2               	addwf	___awdiv@dividend,f
   912  0069  120A  118A  2168  120A  118A  	fcall	___awdiv
   913  006E  1283               	bcf	3,5	;RP0=0, select bank0
   914  006F  1303               	bcf	3,6	;RP1=0, select bank0
   915  0070  0821               	movf	?___awdiv+1,w
   916  0071  01AC               	clrf	beginCount@secMSB+1
   917  0072  07AC               	addwf	beginCount@secMSB+1,f
   918  0073  0820               	movf	?___awdiv,w
   919  0074  01AB               	clrf	beginCount@secMSB
   920  0075  07AB               	addwf	beginCount@secMSB,f
   921                           
   922                           ;ShotclockTimer.c: 60: secMSB = secMSB%10;
   923  0076  300A               	movlw	10
   924  0077  00A0               	movwf	___awmod@divisor
   925  0078  3000               	movlw	0
   926  0079  00A1               	movwf	___awmod@divisor+1
   927  007A  082C               	movf	beginCount@secMSB+1,w
   928  007B  01A3               	clrf	___awmod@dividend+1
   929  007C  07A3               	addwf	___awmod@dividend+1,f
   930  007D  082B               	movf	beginCount@secMSB,w
   931  007E  01A2               	clrf	___awmod@dividend
   932  007F  07A2               	addwf	___awmod@dividend,f
   933  0080  120A  118A  21C5  120A  118A  	fcall	___awmod
   934  0085  1283               	bcf	3,5	;RP0=0, select bank0
   935  0086  1303               	bcf	3,6	;RP1=0, select bank0
   936  0087  0821               	movf	?___awmod+1,w
   937  0088  01AC               	clrf	beginCount@secMSB+1
   938  0089  07AC               	addwf	beginCount@secMSB+1,f
   939  008A  0820               	movf	?___awmod,w
   940  008B  01AB               	clrf	beginCount@secMSB
   941  008C  07AB               	addwf	beginCount@secMSB,f
   942                           
   943                           ;ShotclockTimer.c: 61: instCtrl(0xC0);
   944  008D  30C0               	movlw	192
   945  008E  120A  118A  22F4  120A  118A  	fcall	_instCtrl
   946                           
   947                           ;ShotclockTimer.c: 62: dataCtrl(secMSB+48);
   948  0093  1283               	bcf	3,5	;RP0=0, select bank0
   949  0094  1303               	bcf	3,6	;RP1=0, select bank0
   950  0095  082B               	movf	beginCount@secMSB,w
   951  0096  3E30               	addlw	48
   952  0097  120A  118A  2307  120A  118A  	fcall	_dataCtrl
   953                           
   954                           ;ShotclockTimer.c: 63: dataCtrl(secLSB+48);
   955  009C  1283               	bcf	3,5	;RP0=0, select bank0
   956  009D  1303               	bcf	3,6	;RP1=0, select bank0
   957  009E  0829               	movf	beginCount@secLSB,w
   958  009F  3E30               	addlw	48
   959  00A0  120A  118A  2307  120A  118A  	fcall	_dataCtrl
   960  00A5                     l1285:	
   961                           ;ShotclockTimer.c: 65: while(flagPause == 1)
   962                           
   963  00A5  3001               	movlw	1
   964  00A6  1283               	bcf	3,5	;RP0=0, select bank0
   965  00A7  1303               	bcf	3,6	;RP1=0, select bank0
   966  00A8  0659               	xorwf	_flagPause,w
   967  00A9  045A               	iorwf	_flagPause+1,w
   968  00AA  1D03               	btfss	3,2
   969  00AB  28B4               	goto	l1287
   970                           
   971                           ;ShotclockTimer.c: 66: {
   972                           ;ShotclockTimer.c: 67: if(RB0 == 1)
   973  00AC  1C06               	btfss	6,0	;volatile
   974  00AD  28A5               	goto	l1285
   975                           
   976                           ;ShotclockTimer.c: 68: {
   977                           ;ShotclockTimer.c: 69: DAVBL();
   978  00AE  120A  118A  2214  120A  118A  	fcall	_DAVBL
   979  00B3  282F               	goto	L1
   980  00B4                     l1287:	
   981                           ;ShotclockTimer.c: 76: dataCtrl(secLSB+48);
   982                           
   983                           ;ShotclockTimer.c: 75: dataCtrl(secMSB+48);
   984                           
   985                           ;ShotclockTimer.c: 74: instCtrl(0xC0);
   986                           
   987                           ;ShotclockTimer.c: 73: secMSB = secMSB%10;
   988                           
   989                           ;ShotclockTimer.c: 72: secMSB = dispSec/10;
   990                           
   991                           ;ShotclockTimer.c: 71: secLSB = dispSec%10;
   992                           
   993                           ;ShotclockTimer.c: 70: dispSec = (seconds%60);
   994                           
   995                           
   996                           ;ShotclockTimer.c: 77: }
   997                           ;ShotclockTimer.c: 78: }
   998                           ;ShotclockTimer.c: 80: delay(122);
   999  00B4  307A               	movlw	122
  1000  00B5  00A0               	movwf	delay@timer
  1001  00B6  3000               	movlw	0
  1002  00B7  00A1               	movwf	delay@timer+1
  1003  00B8  120A  118A  233E  120A  118A  	fcall	_delay
  1004                           
  1005                           ;ShotclockTimer.c: 81: seconds--;
  1006  00BD  30FF               	movlw	255
  1007  00BE  1283               	bcf	3,5	;RP0=0, select bank0
  1008  00BF  1303               	bcf	3,6	;RP1=0, select bank0
  1009  00C0  07DB               	addwf	_seconds,f
  1010  00C1  1803               	skipnc
  1011  00C2  0ADC               	incf	_seconds+1,f
  1012  00C3  30FF               	movlw	255
  1013  00C4  07DC               	addwf	_seconds+1,f
  1014  00C5  282B               	goto	l1291
  1015  00C6                     l1293:	
  1016                           
  1017                           ;ShotclockTimer.c: 82: }
  1018                           ;ShotclockTimer.c: 83: seconds = 24;
  1019  00C6  3018               	movlw	24
  1020  00C7  00DB               	movwf	_seconds
  1021  00C8  3000               	movlw	0
  1022  00C9  00DC               	movwf	_seconds+1
  1023  00CA  0008               	return
  1024  00CB                     __end_of_beginCount:	
  1025                           
  1026                           	psect	text5
  1027  02F4                     __ptext5:	
  1028 ;; *************** function _instCtrl *****************
  1029 ;; Defined at:
  1030 ;;		line 111 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1031 ;; Parameters:    Size  Location     Type
  1032 ;;  INST            1    wreg     unsigned char 
  1033 ;; Auto vars:     Size  Location     Type
  1034 ;;  INST            1    3[BANK0 ] unsigned char 
  1035 ;; Return value:  Size  Location     Type
  1036 ;;		None               void
  1037 ;; Registers used:
  1038 ;;		wreg, status,2, status,0, pclath, cstack
  1039 ;; Tracked objects:
  1040 ;;		On entry : 0/0
  1041 ;;		On exit  : 0/0
  1042 ;;		Unchanged: 0/0
  1043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1044 ;;      Params:         0       0       0       0       0
  1045 ;;      Locals:         0       1       0       0       0
  1046 ;;      Temps:          0       0       0       0       0
  1047 ;;      Totals:         0       1       0       0       0
  1048 ;;Total ram usage:        1 bytes
  1049 ;; Hardware stack levels used:    1
  1050 ;; Hardware stack levels required when called:    3
  1051 ;; This function calls:
  1052 ;;		_delay
  1053 ;; This function is called by:
  1054 ;;		_beginCount
  1055 ;;		_initLCD
  1056 ;;		_dispHeader
  1057 ;; This function uses a non-reentrant model
  1058 ;;
  1059                           
  1060                           
  1061                           ;psect for function _instCtrl
  1062  02F4                     _instCtrl:	
  1063                           
  1064                           ;incstack = 0
  1065                           ; Regs used in _instCtrl: [wreg+status,2+status,0+pclath+cstack]
  1066                           ;instCtrl@INST stored from wreg
  1067  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  1068  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  1069  02F6  00A3               	movwf	instCtrl@INST
  1070                           
  1071                           ;ShotclockTimer.c: 113: PORTC = INST;
  1072  02F7  0823               	movf	instCtrl@INST,w
  1073  02F8  0087               	movwf	7	;volatile
  1074                           
  1075                           ;ShotclockTimer.c: 114: RB5 = 0;
  1076  02F9  1286               	bcf	6,5	;volatile
  1077                           
  1078                           ;ShotclockTimer.c: 115: RB6 = 0;
  1079  02FA  1306               	bcf	6,6	;volatile
  1080                           
  1081                           ;ShotclockTimer.c: 116: RB7 = 1;
  1082  02FB  1786               	bsf	6,7	;volatile
  1083                           
  1084                           ;ShotclockTimer.c: 117: delay(1);
  1085  02FC  3001               	movlw	1
  1086  02FD  00A0               	movwf	delay@timer
  1087  02FE  3000               	movlw	0
  1088  02FF  00A1               	movwf	delay@timer+1
  1089  0300  120A  118A  233E   	fcall	_delay
  1090                           
  1091                           ;ShotclockTimer.c: 118: RB7 = 0;
  1092  0303  1283               	bcf	3,5	;RP0=0, select bank0
  1093  0304  1303               	bcf	3,6	;RP1=0, select bank0
  1094  0305  1386               	bcf	6,7	;volatile
  1095  0306  0008               	return
  1096  0307                     __end_of_instCtrl:	
  1097                           
  1098                           	psect	text6
  1099  0307                     __ptext6:	
  1100 ;; *************** function _dataCtrl *****************
  1101 ;; Defined at:
  1102 ;;		line 130 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1103 ;; Parameters:    Size  Location     Type
  1104 ;;  DATA            1    wreg     unsigned char 
  1105 ;; Auto vars:     Size  Location     Type
  1106 ;;  DATA            1    3[BANK0 ] unsigned char 
  1107 ;; Return value:  Size  Location     Type
  1108 ;;		None               void
  1109 ;; Registers used:
  1110 ;;		wreg, status,2, status,0, pclath, cstack
  1111 ;; Tracked objects:
  1112 ;;		On entry : 0/0
  1113 ;;		On exit  : 0/0
  1114 ;;		Unchanged: 0/0
  1115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1116 ;;      Params:         0       0       0       0       0
  1117 ;;      Locals:         0       1       0       0       0
  1118 ;;      Temps:          0       0       0       0       0
  1119 ;;      Totals:         0       1       0       0       0
  1120 ;;Total ram usage:        1 bytes
  1121 ;; Hardware stack levels used:    1
  1122 ;; Hardware stack levels required when called:    3
  1123 ;; This function calls:
  1124 ;;		_delay
  1125 ;; This function is called by:
  1126 ;;		_beginCount
  1127 ;;		_dispHeader
  1128 ;;		_dispSTR
  1129 ;; This function uses a non-reentrant model
  1130 ;;
  1131                           
  1132                           
  1133                           ;psect for function _dataCtrl
  1134  0307                     _dataCtrl:	
  1135                           
  1136                           ;incstack = 0
  1137                           ; Regs used in _dataCtrl: [wreg+status,2+status,0+pclath+cstack]
  1138                           ;dataCtrl@DATA stored from wreg
  1139  0307  1283               	bcf	3,5	;RP0=0, select bank0
  1140  0308  1303               	bcf	3,6	;RP1=0, select bank0
  1141  0309  00A3               	movwf	dataCtrl@DATA
  1142                           
  1143                           ;ShotclockTimer.c: 132: PORTC = DATA;
  1144  030A  0823               	movf	dataCtrl@DATA,w
  1145  030B  0087               	movwf	7	;volatile
  1146                           
  1147                           ;ShotclockTimer.c: 133: RB5 = 1;
  1148  030C  1686               	bsf	6,5	;volatile
  1149                           
  1150                           ;ShotclockTimer.c: 134: RB6 = 0;
  1151  030D  1306               	bcf	6,6	;volatile
  1152                           
  1153                           ;ShotclockTimer.c: 135: RB7 = 1;
  1154  030E  1786               	bsf	6,7	;volatile
  1155                           
  1156                           ;ShotclockTimer.c: 136: delay(1);
  1157  030F  3001               	movlw	1
  1158  0310  00A0               	movwf	delay@timer
  1159  0311  3000               	movlw	0
  1160  0312  00A1               	movwf	delay@timer+1
  1161  0313  120A  118A  233E   	fcall	_delay
  1162                           
  1163                           ;ShotclockTimer.c: 137: RB7 = 0;
  1164  0316  1283               	bcf	3,5	;RP0=0, select bank0
  1165  0317  1303               	bcf	3,6	;RP1=0, select bank0
  1166  0318  1386               	bcf	6,7	;volatile
  1167  0319  0008               	return
  1168  031A                     __end_of_dataCtrl:	
  1169                           
  1170                           	psect	text7
  1171  033E                     __ptext7:	
  1172 ;; *************** function _delay *****************
  1173 ;; Defined at:
  1174 ;;		line 173 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1175 ;; Parameters:    Size  Location     Type
  1176 ;;  timer           2    0[BANK0 ] int 
  1177 ;; Auto vars:     Size  Location     Type
  1178 ;;		None
  1179 ;; Return value:  Size  Location     Type
  1180 ;;		None               void
  1181 ;; Registers used:
  1182 ;;		wreg, status,2
  1183 ;; Tracked objects:
  1184 ;;		On entry : 0/0
  1185 ;;		On exit  : 0/0
  1186 ;;		Unchanged: 0/0
  1187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1188 ;;      Params:         0       2       0       0       0
  1189 ;;      Locals:         0       0       0       0       0
  1190 ;;      Temps:          0       1       0       0       0
  1191 ;;      Totals:         0       3       0       0       0
  1192 ;;Total ram usage:        3 bytes
  1193 ;; Hardware stack levels used:    1
  1194 ;; Hardware stack levels required when called:    2
  1195 ;; This function calls:
  1196 ;;		Nothing
  1197 ;; This function is called by:
  1198 ;;		_beginCount
  1199 ;;		_instCtrl
  1200 ;;		_dataCtrl
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           
  1205                           ;psect for function _delay
  1206  033E                     _delay:	
  1207  033E                     l1103:	
  1208                           ;ShotclockTimer.c: 176: {
  1209                           
  1210                           ;ShotclockTimer.c: 175: while(count_flag < timer)
  1211                           
  1212                           ;incstack = 0
  1213                           ; Regs used in _delay: [wreg+status,2]
  1214                           
  1215  033E  0877               	movf	_count_flag+1,w
  1216  033F  3A80               	xorlw	128
  1217  0340  1283               	bcf	3,5	;RP0=0, select bank0
  1218  0341  1303               	bcf	3,6	;RP1=0, select bank0
  1219  0342  00A2               	movwf	??_delay
  1220  0343  0821               	movf	delay@timer+1,w
  1221  0344  3A80               	xorlw	128
  1222  0345  0222               	subwf	??_delay,w
  1223  0346  1D03               	skipz
  1224  0347  2B4A               	goto	u695
  1225  0348  0820               	movf	delay@timer,w
  1226  0349  0276               	subwf	_count_flag,w
  1227  034A                     u695:	
  1228  034A  1C03               	skipc
  1229  034B  2B3E               	goto	l1103
  1230                           
  1231                           ;ShotclockTimer.c: 177: }
  1232                           ;ShotclockTimer.c: 178: count_flag = 0;
  1233  034C  01F6               	clrf	_count_flag
  1234  034D  01F7               	clrf	_count_flag+1
  1235  034E  0008               	return
  1236  034F                     __end_of_delay:	
  1237                           
  1238                           	psect	text8
  1239  01C5                     __ptext8:	
  1240 ;; *************** function ___awmod *****************
  1241 ;; Defined at:
  1242 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awmod.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;  divisor         2    0[BANK0 ] int 
  1245 ;;  dividend        2    2[BANK0 ] int 
  1246 ;; Auto vars:     Size  Location     Type
  1247 ;;  sign            1    6[BANK0 ] unsigned char 
  1248 ;;  counter         1    5[BANK0 ] unsigned char 
  1249 ;; Return value:  Size  Location     Type
  1250 ;;                  2    0[BANK0 ] int 
  1251 ;; Registers used:
  1252 ;;		wreg, status,2, status,0
  1253 ;; Tracked objects:
  1254 ;;		On entry : 0/0
  1255 ;;		On exit  : 0/0
  1256 ;;		Unchanged: 0/0
  1257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1258 ;;      Params:         0       4       0       0       0
  1259 ;;      Locals:         0       2       0       0       0
  1260 ;;      Temps:          0       1       0       0       0
  1261 ;;      Totals:         0       7       0       0       0
  1262 ;;Total ram usage:        7 bytes
  1263 ;; Hardware stack levels used:    1
  1264 ;; Hardware stack levels required when called:    2
  1265 ;; This function calls:
  1266 ;;		Nothing
  1267 ;; This function is called by:
  1268 ;;		_beginCount
  1269 ;;		_dispHeader
  1270 ;; This function uses a non-reentrant model
  1271 ;;
  1272                           
  1273                           
  1274                           ;psect for function ___awmod
  1275  01C5                     ___awmod:	
  1276                           
  1277                           ;incstack = 0
  1278                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  1279  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1280  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1281  01C7  01A6               	clrf	___awmod@sign
  1282  01C8  1FA3               	btfss	___awmod@dividend+1,7
  1283  01C9  29D1               	goto	l1215
  1284  01CA  09A2               	comf	___awmod@dividend,f
  1285  01CB  09A3               	comf	___awmod@dividend+1,f
  1286  01CC  0AA2               	incf	___awmod@dividend,f
  1287  01CD  1903               	skipnz
  1288  01CE  0AA3               	incf	___awmod@dividend+1,f
  1289  01CF  01A6               	clrf	___awmod@sign
  1290  01D0  0AA6               	incf	___awmod@sign,f
  1291  01D1                     l1215:	
  1292  01D1  1FA1               	btfss	___awmod@divisor+1,7
  1293  01D2  29D8               	goto	l1219
  1294  01D3  09A0               	comf	___awmod@divisor,f
  1295  01D4  09A1               	comf	___awmod@divisor+1,f
  1296  01D5  0AA0               	incf	___awmod@divisor,f
  1297  01D6  1903               	skipnz
  1298  01D7  0AA1               	incf	___awmod@divisor+1,f
  1299  01D8                     l1219:	
  1300  01D8  0821               	movf	___awmod@divisor+1,w
  1301  01D9  0420               	iorwf	___awmod@divisor,w
  1302  01DA  1903               	skipnz
  1303  01DB  2A05               	goto	l1237
  1304  01DC  01A5               	clrf	___awmod@counter
  1305  01DD  0AA5               	incf	___awmod@counter,f
  1306  01DE                     l1227:	
  1307  01DE  1BA1               	btfsc	___awmod@divisor+1,7
  1308  01DF  29EC               	goto	l1229
  1309  01E0  3001               	movlw	1
  1310  01E1                     u885:	
  1311  01E1  1003               	clrc
  1312  01E2  0DA0               	rlf	___awmod@divisor,f
  1313  01E3  0DA1               	rlf	___awmod@divisor+1,f
  1314  01E4  3EFF               	addlw	-1
  1315  01E5  1D03               	skipz
  1316  01E6  29E1               	goto	u885
  1317  01E7  3001               	movlw	1
  1318  01E8  00A4               	movwf	??___awmod
  1319  01E9  0824               	movf	??___awmod,w
  1320  01EA  07A5               	addwf	___awmod@counter,f
  1321  01EB  29DE               	goto	l1227
  1322  01EC                     l1229:	
  1323  01EC  0821               	movf	___awmod@divisor+1,w
  1324  01ED  0223               	subwf	___awmod@dividend+1,w
  1325  01EE  1D03               	skipz
  1326  01EF  29F2               	goto	u905
  1327  01F0  0820               	movf	___awmod@divisor,w
  1328  01F1  0222               	subwf	___awmod@dividend,w
  1329  01F2                     u905:	
  1330  01F2  1C03               	skipc
  1331  01F3  29FA               	goto	l1233
  1332  01F4  0820               	movf	___awmod@divisor,w
  1333  01F5  02A2               	subwf	___awmod@dividend,f
  1334  01F6  0821               	movf	___awmod@divisor+1,w
  1335  01F7  1C03               	skipc
  1336  01F8  03A3               	decf	___awmod@dividend+1,f
  1337  01F9  02A3               	subwf	___awmod@dividend+1,f
  1338  01FA                     l1233:	
  1339  01FA  3001               	movlw	1
  1340  01FB                     u915:	
  1341  01FB  1003               	clrc
  1342  01FC  0CA1               	rrf	___awmod@divisor+1,f
  1343  01FD  0CA0               	rrf	___awmod@divisor,f
  1344  01FE  3EFF               	addlw	-1
  1345  01FF  1D03               	skipz
  1346  0200  29FB               	goto	u915
  1347  0201  3001               	movlw	1
  1348  0202  02A5               	subwf	___awmod@counter,f
  1349  0203  1D03               	btfss	3,2
  1350  0204  29EC               	goto	l1229
  1351  0205                     l1237:	
  1352  0205  0826               	movf	___awmod@sign,w
  1353  0206  1903               	btfsc	3,2
  1354  0207  2A0D               	goto	l1241
  1355  0208  09A2               	comf	___awmod@dividend,f
  1356  0209  09A3               	comf	___awmod@dividend+1,f
  1357  020A  0AA2               	incf	___awmod@dividend,f
  1358  020B  1903               	skipnz
  1359  020C  0AA3               	incf	___awmod@dividend+1,f
  1360  020D                     l1241:	
  1361  020D  0823               	movf	___awmod@dividend+1,w
  1362  020E  01A1               	clrf	?___awmod+1
  1363  020F  07A1               	addwf	?___awmod+1,f
  1364  0210  0822               	movf	___awmod@dividend,w
  1365  0211  01A0               	clrf	?___awmod
  1366  0212  07A0               	addwf	?___awmod,f
  1367  0213  0008               	return
  1368  0214                     __end_of___awmod:	
  1369                           
  1370                           	psect	text9
  1371  0168                     __ptext9:	
  1372 ;; *************** function ___awdiv *****************
  1373 ;; Defined at:
  1374 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.33\sources\common\awdiv.c"
  1375 ;; Parameters:    Size  Location     Type
  1376 ;;  divisor         2    0[BANK0 ] int 
  1377 ;;  dividend        2    2[BANK0 ] int 
  1378 ;; Auto vars:     Size  Location     Type
  1379 ;;  quotient        2    7[BANK0 ] int 
  1380 ;;  sign            1    6[BANK0 ] unsigned char 
  1381 ;;  counter         1    5[BANK0 ] unsigned char 
  1382 ;; Return value:  Size  Location     Type
  1383 ;;                  2    0[BANK0 ] int 
  1384 ;; Registers used:
  1385 ;;		wreg, status,2, status,0
  1386 ;; Tracked objects:
  1387 ;;		On entry : 0/0
  1388 ;;		On exit  : 0/0
  1389 ;;		Unchanged: 0/0
  1390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1391 ;;      Params:         0       4       0       0       0
  1392 ;;      Locals:         0       4       0       0       0
  1393 ;;      Temps:          0       1       0       0       0
  1394 ;;      Totals:         0       9       0       0       0
  1395 ;;Total ram usage:        9 bytes
  1396 ;; Hardware stack levels used:    1
  1397 ;; Hardware stack levels required when called:    2
  1398 ;; This function calls:
  1399 ;;		Nothing
  1400 ;; This function is called by:
  1401 ;;		_beginCount
  1402 ;;		_dispHeader
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           
  1407                           ;psect for function ___awdiv
  1408  0168                     ___awdiv:	
  1409                           
  1410                           ;incstack = 0
  1411                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1412  0168  1283               	bcf	3,5	;RP0=0, select bank0
  1413  0169  1303               	bcf	3,6	;RP1=0, select bank0
  1414  016A  01A6               	clrf	___awdiv@sign
  1415  016B  1FA1               	btfss	___awdiv@divisor+1,7
  1416  016C  2974               	goto	l1171
  1417  016D  09A0               	comf	___awdiv@divisor,f
  1418  016E  09A1               	comf	___awdiv@divisor+1,f
  1419  016F  0AA0               	incf	___awdiv@divisor,f
  1420  0170  1903               	skipnz
  1421  0171  0AA1               	incf	___awdiv@divisor+1,f
  1422  0172  01A6               	clrf	___awdiv@sign
  1423  0173  0AA6               	incf	___awdiv@sign,f
  1424  0174                     l1171:	
  1425  0174  1FA3               	btfss	___awdiv@dividend+1,7
  1426  0175  297F               	goto	l1177
  1427  0176  09A2               	comf	___awdiv@dividend,f
  1428  0177  09A3               	comf	___awdiv@dividend+1,f
  1429  0178  0AA2               	incf	___awdiv@dividend,f
  1430  0179  1903               	skipnz
  1431  017A  0AA3               	incf	___awdiv@dividend+1,f
  1432  017B  3001               	movlw	1
  1433  017C  00A4               	movwf	??___awdiv
  1434  017D  0824               	movf	??___awdiv,w
  1435  017E  06A6               	xorwf	___awdiv@sign,f
  1436  017F                     l1177:	
  1437  017F  01A7               	clrf	___awdiv@quotient
  1438  0180  01A8               	clrf	___awdiv@quotient+1
  1439  0181  0821               	movf	___awdiv@divisor+1,w
  1440  0182  0420               	iorwf	___awdiv@divisor,w
  1441  0183  1903               	skipnz
  1442  0184  29B6               	goto	l1199
  1443  0185  01A5               	clrf	___awdiv@counter
  1444  0186  0AA5               	incf	___awdiv@counter,f
  1445  0187                     l1187:	
  1446  0187  1BA1               	btfsc	___awdiv@divisor+1,7
  1447  0188  2995               	goto	l1189
  1448  0189  3001               	movlw	1
  1449  018A                     u785:	
  1450  018A  1003               	clrc
  1451  018B  0DA0               	rlf	___awdiv@divisor,f
  1452  018C  0DA1               	rlf	___awdiv@divisor+1,f
  1453  018D  3EFF               	addlw	-1
  1454  018E  1D03               	skipz
  1455  018F  298A               	goto	u785
  1456  0190  3001               	movlw	1
  1457  0191  00A4               	movwf	??___awdiv
  1458  0192  0824               	movf	??___awdiv,w
  1459  0193  07A5               	addwf	___awdiv@counter,f
  1460  0194  2987               	goto	l1187
  1461  0195                     l1189:	
  1462  0195  3001               	movlw	1
  1463  0196                     u805:	
  1464  0196  1003               	clrc
  1465  0197  0DA7               	rlf	___awdiv@quotient,f
  1466  0198  0DA8               	rlf	___awdiv@quotient+1,f
  1467  0199  3EFF               	addlw	-1
  1468  019A  1D03               	skipz
  1469  019B  2996               	goto	u805
  1470  019C  0821               	movf	___awdiv@divisor+1,w
  1471  019D  0223               	subwf	___awdiv@dividend+1,w
  1472  019E  1D03               	skipz
  1473  019F  29A2               	goto	u815
  1474  01A0  0820               	movf	___awdiv@divisor,w
  1475  01A1  0222               	subwf	___awdiv@dividend,w
  1476  01A2                     u815:	
  1477  01A2  1C03               	skipc
  1478  01A3  29AB               	goto	l1195
  1479  01A4  0820               	movf	___awdiv@divisor,w
  1480  01A5  02A2               	subwf	___awdiv@dividend,f
  1481  01A6  0821               	movf	___awdiv@divisor+1,w
  1482  01A7  1C03               	skipc
  1483  01A8  03A3               	decf	___awdiv@dividend+1,f
  1484  01A9  02A3               	subwf	___awdiv@dividend+1,f
  1485  01AA  1427               	bsf	___awdiv@quotient,0
  1486  01AB                     l1195:	
  1487  01AB  3001               	movlw	1
  1488  01AC                     u825:	
  1489  01AC  1003               	clrc
  1490  01AD  0CA1               	rrf	___awdiv@divisor+1,f
  1491  01AE  0CA0               	rrf	___awdiv@divisor,f
  1492  01AF  3EFF               	addlw	-1
  1493  01B0  1D03               	skipz
  1494  01B1  29AC               	goto	u825
  1495  01B2  3001               	movlw	1
  1496  01B3  02A5               	subwf	___awdiv@counter,f
  1497  01B4  1D03               	btfss	3,2
  1498  01B5  2995               	goto	l1189
  1499  01B6                     l1199:	
  1500  01B6  0826               	movf	___awdiv@sign,w
  1501  01B7  1903               	btfsc	3,2
  1502  01B8  29BE               	goto	l1203
  1503  01B9  09A7               	comf	___awdiv@quotient,f
  1504  01BA  09A8               	comf	___awdiv@quotient+1,f
  1505  01BB  0AA7               	incf	___awdiv@quotient,f
  1506  01BC  1903               	skipnz
  1507  01BD  0AA8               	incf	___awdiv@quotient+1,f
  1508  01BE                     l1203:	
  1509  01BE  0828               	movf	___awdiv@quotient+1,w
  1510  01BF  01A1               	clrf	?___awdiv+1
  1511  01C0  07A1               	addwf	?___awdiv+1,f
  1512  01C1  0827               	movf	___awdiv@quotient,w
  1513  01C2  01A0               	clrf	?___awdiv
  1514  01C3  07A0               	addwf	?___awdiv,f
  1515  01C4  0008               	return
  1516  01C5                     __end_of___awdiv:	
  1517                           
  1518                           	psect	text10
  1519  0214                     __ptext10:	
  1520 ;; *************** function _DAVBL *****************
  1521 ;; Defined at:
  1522 ;;		line 86 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1523 ;; Parameters:    Size  Location     Type
  1524 ;;		None
  1525 ;; Auto vars:     Size  Location     Type
  1526 ;;  DATA            2    0[BANK0 ] int 
  1527 ;; Return value:  Size  Location     Type
  1528 ;;		None               void
  1529 ;; Registers used:
  1530 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1531 ;; Tracked objects:
  1532 ;;		On entry : 0/0
  1533 ;;		On exit  : 0/0
  1534 ;;		Unchanged: 0/0
  1535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1536 ;;      Params:         0       0       0       0       0
  1537 ;;      Locals:         0       2       0       0       0
  1538 ;;      Temps:          0       0       0       0       0
  1539 ;;      Totals:         0       2       0       0       0
  1540 ;;Total ram usage:        2 bytes
  1541 ;; Hardware stack levels used:    1
  1542 ;; Hardware stack levels required when called:    2
  1543 ;; This function calls:
  1544 ;;		Nothing
  1545 ;; This function is called by:
  1546 ;;		_beginCount
  1547 ;; This function uses a non-reentrant model
  1548 ;;
  1549                           
  1550                           
  1551                           ;psect for function _DAVBL
  1552  0214                     _DAVBL:	
  1553                           
  1554                           ;ShotclockTimer.c: 88: int DATA = dataRead;
  1555                           
  1556                           ;incstack = 0
  1557                           ; Regs used in _DAVBL: [wreg-fsr0h+status,2+status,0+btemp+1]
  1558  0214  0879               	movf	_dataRead+1,w
  1559  0215  1283               	bcf	3,5	;RP0=0, select bank0
  1560  0216  1303               	bcf	3,6	;RP1=0, select bank0
  1561  0217  01A1               	clrf	DAVBL@DATA+1
  1562  0218  07A1               	addwf	DAVBL@DATA+1,f
  1563  0219  0878               	movf	_dataRead,w
  1564  021A  01A0               	clrf	DAVBL@DATA
  1565  021B  07A0               	addwf	DAVBL@DATA,f
  1566                           
  1567                           ;ShotclockTimer.c: 90: switch(DATA)
  1568  021C  2A48               	goto	l1147
  1569  021D                     l1133:	
  1570                           ;ShotclockTimer.c: 91: {
  1571                           ;ShotclockTimer.c: 92: case 12:
  1572                           
  1573                           
  1574                           ;ShotclockTimer.c: 93: seconds += 1;
  1575  021D  3001               	movlw	1
  1576  021E  07DB               	addwf	_seconds,f
  1577  021F  1803               	skipnc
  1578  0220  0ADC               	incf	_seconds+1,f
  1579  0221  3000               	movlw	0
  1580  0222  07DC               	addwf	_seconds+1,f
  1581                           
  1582                           ;ShotclockTimer.c: 94: if(seconds > 24)
  1583  0223  085C               	movf	_seconds+1,w
  1584  0224  3A80               	xorlw	128
  1585  0225  00FF               	movwf	127
  1586  0226  3080               	movlw	128
  1587  0227  027F               	subwf	127,w
  1588  0228  1D03               	skipz
  1589  0229  2A2C               	goto	u705
  1590  022A  3019               	movlw	25
  1591  022B  025B               	subwf	_seconds,w
  1592  022C                     u705:	
  1593  022C  1C03               	skipc
  1594  022D  2A32               	goto	l78
  1595                           
  1596                           ;ShotclockTimer.c: 95: {seconds = 0;}
  1597  022E  1283               	bcf	3,5	;RP0=0, select bank0
  1598  022F  1303               	bcf	3,6	;RP1=0, select bank0
  1599  0230  01DB               	clrf	_seconds
  1600  0231  01DC               	clrf	_seconds+1
  1601  0232                     l78:	
  1602                           ;ShotclockTimer.c: 97: {}
  1603                           
  1604                           ;ShotclockTimer.c: 96: while(RB0 = 1)
  1605                           
  1606  0232  1283               	bcf	3,5	;RP0=0, select bank0
  1607  0233  1303               	bcf	3,6	;RP1=0, select bank0
  1608  0234  1406               	bsf	6,0	;volatile
  1609  0235  1C06               	btfss	6,0	;volatile
  1610  0236  0008               	return
  1611  0237  2A32               	goto	l78
  1612  0238                     l1139:	
  1613                           ;ShotclockTimer.c: 99: case 14:
  1614                           
  1615                           ;ShotclockTimer.c: 98: break;
  1616                           
  1617                           
  1618                           ;ShotclockTimer.c: 100: seconds -= 1;
  1619  0238  30FF               	movlw	255
  1620  0239  07DB               	addwf	_seconds,f
  1621  023A  1803               	skipnc
  1622  023B  0ADC               	incf	_seconds+1,f
  1623  023C  30FF               	movlw	255
  1624  023D  07DC               	addwf	_seconds+1,f
  1625                           
  1626                           ;ShotclockTimer.c: 101: if(seconds < 0)
  1627  023E  1FDC               	btfss	_seconds+1,7
  1628  023F  2A44               	goto	l84
  1629                           
  1630                           ;ShotclockTimer.c: 102: {seconds = 24;}
  1631  0240  3018               	movlw	24
  1632  0241  00DB               	movwf	_seconds
  1633  0242  3000               	movlw	0
  1634  0243  00DC               	movwf	_seconds+1
  1635  0244                     l84:	
  1636                           ;ShotclockTimer.c: 104: {}
  1637                           
  1638                           ;ShotclockTimer.c: 103: while(RB0 = 1)
  1639                           
  1640  0244  1406               	bsf	6,0	;volatile
  1641  0245  1C06               	btfss	6,0	;volatile
  1642  0246  0008               	return
  1643  0247  2A44               	goto	l84
  1644  0248                     l1147:	
  1645                           ;ShotclockTimer.c: 108: }
  1646                           
  1647                           ;ShotclockTimer.c: 107: break;
  1648                           
  1649                           ;ShotclockTimer.c: 106: default:
  1650                           
  1651                           ;ShotclockTimer.c: 105: break;
  1652                           
  1653                           
  1654                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1655                           ; Switch size 1, requested type "space"
  1656                           ; Number of cases is 1, Range of values is 0 to 0
  1657                           ; switch strategies available:
  1658                           ; Name         Instructions Cycles
  1659                           ; simple_byte            4     3 (average)
  1660                           ; direct_byte           11     8 (fixed)
  1661                           ; jumptable            260     6 (fixed)
  1662                           ;	Chosen strategy is simple_byte
  1663  0248  0821               	movf	DAVBL@DATA+1,w
  1664  0249  3A00               	xorlw	0	; case 0
  1665  024A  1903               	skipnz
  1666  024B  2A4D               	goto	l1335
  1667  024C  2A55               	goto	l88
  1668  024D                     l1335:	
  1669                           
  1670                           ; Switch size 1, requested type "space"
  1671                           ; Number of cases is 2, Range of values is 12 to 14
  1672                           ; switch strategies available:
  1673                           ; Name         Instructions Cycles
  1674                           ; simple_byte            7     4 (average)
  1675                           ; direct_byte           20    11 (fixed)
  1676                           ; jumptable            263     9 (fixed)
  1677                           ;	Chosen strategy is simple_byte
  1678  024D  0820               	movf	DAVBL@DATA,w
  1679  024E  3A0C               	xorlw	12	; case 12
  1680  024F  1903               	skipnz
  1681  0250  2A1D               	goto	l1133
  1682  0251  3A02               	xorlw	2	; case 14
  1683  0252  1903               	skipnz
  1684  0253  2A38               	goto	l1139
  1685  0254  2A55               	goto	l88
  1686  0255                     l88:	
  1687  0255  0008               	return
  1688  0256                     __end_of_DAVBL:	
  1689                           
  1690                           	psect	text11
  1691  0256                     __ptext11:	
  1692 ;; *************** function _ISR *****************
  1693 ;; Defined at:
  1694 ;;		line 182 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1695 ;; Parameters:    Size  Location     Type
  1696 ;;		None
  1697 ;; Auto vars:     Size  Location     Type
  1698 ;;		None
  1699 ;; Return value:  Size  Location     Type
  1700 ;;		None               void
  1701 ;; Registers used:
  1702 ;;		wreg, status,2, status,0, pclath, cstack
  1703 ;; Tracked objects:
  1704 ;;		On entry : 0/0
  1705 ;;		On exit  : 0/0
  1706 ;;		Unchanged: 0/0
  1707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1708 ;;      Params:         0       0       0       0       0
  1709 ;;      Locals:         0       0       0       0       0
  1710 ;;      Temps:          6       0       0       0       0
  1711 ;;      Totals:         6       0       0       0       0
  1712 ;;Total ram usage:        6 bytes
  1713 ;; Hardware stack levels used:    1
  1714 ;; Hardware stack levels required when called:    1
  1715 ;; This function calls:
  1716 ;;		_toggleFlag
  1717 ;; This function is called by:
  1718 ;;		Interrupt level 1
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           
  1723                           ;psect for function _ISR
  1724  0256                     _ISR:	
  1725                           
  1726                           ;ShotclockTimer.c: 184: GIE = 0;
  1727  0256  138B               	bcf	11,7	;volatile
  1728                           
  1729                           ;ShotclockTimer.c: 185: if(INTF)
  1730  0257  1C8B               	btfss	11,1	;volatile
  1731  0258  2A6D               	goto	i1l118
  1732                           
  1733                           ;ShotclockTimer.c: 186: {
  1734                           ;ShotclockTimer.c: 187: dataRead = PORTD & 0x0F;
  1735  0259  0808               	movf	8,w	;volatile
  1736  025A  390F               	andlw	15
  1737  025B  00F0               	movwf	??_ISR
  1738  025C  01F1               	clrf	??_ISR+1
  1739  025D  0870               	movf	??_ISR,w
  1740  025E  00F8               	movwf	_dataRead
  1741  025F  0871               	movf	??_ISR+1,w
  1742  0260  00F9               	movwf	_dataRead+1
  1743                           
  1744                           ;ShotclockTimer.c: 188: if(dataRead == 13)
  1745  0261  300D               	movlw	13
  1746  0262  0678               	xorwf	_dataRead,w
  1747  0263  0479               	iorwf	_dataRead+1,w
  1748  0264  1D03               	skipz
  1749  0265  2A6B               	goto	i1l1073
  1750                           
  1751                           ;ShotclockTimer.c: 189: {
  1752                           ;ShotclockTimer.c: 190: toggleFlag();
  1753  0266  120A  118A  231A  120A  118A  	fcall	_toggleFlag
  1754  026B                     i1l1073:	
  1755                           
  1756                           ;ShotclockTimer.c: 191: }
  1757                           ;ShotclockTimer.c: 193: INTF = 0;
  1758  026B  108B               	bcf	11,1	;volatile
  1759                           
  1760                           ;ShotclockTimer.c: 194: }
  1761  026C  2A76               	goto	i1l1079
  1762  026D                     i1l118:	
  1763                           
  1764                           ;ShotclockTimer.c: 195: else if(T0IF)
  1765  026D  1D0B               	btfss	11,2	;volatile
  1766  026E  2A76               	goto	i1l1079
  1767                           
  1768                           ;ShotclockTimer.c: 196: {
  1769                           ;ShotclockTimer.c: 197: count_flag++;
  1770  026F  3001               	movlw	1
  1771  0270  07F6               	addwf	_count_flag,f
  1772  0271  1803               	skipnc
  1773  0272  0AF7               	incf	_count_flag+1,f
  1774  0273  3000               	movlw	0
  1775  0274  07F7               	addwf	_count_flag+1,f
  1776                           
  1777                           ;ShotclockTimer.c: 198: T0IF = 0;
  1778  0275  110B               	bcf	11,2	;volatile
  1779  0276                     i1l1079:	
  1780                           
  1781                           ;ShotclockTimer.c: 199: }
  1782                           ;ShotclockTimer.c: 200: GIE = 1;
  1783  0276  178B               	bsf	11,7	;volatile
  1784  0277  0875               	movf	??_ISR+5,w
  1785  0278  1283               	bcf	3,5	;RP0=0, select bank0
  1786  0279  1303               	bcf	3,6	;RP1=0, select bank0
  1787  027A  00FF               	movwf	127
  1788  027B  0874               	movf	??_ISR+4,w
  1789  027C  008A               	movwf	10
  1790  027D  0873               	movf	??_ISR+3,w
  1791  027E  0084               	movwf	4
  1792  027F  0E72               	swapf	(??_ISR+2)^(0+-128),w
  1793  0280  0083               	movwf	3
  1794  0281  0EFE               	swapf	126,f
  1795  0282  0E7E               	swapf	126,w
  1796  0283  0009               	retfie
  1797  0284                     __end_of_ISR:	
  1798                           
  1799                           	psect	intentry
  1800  0004                     __pintentry:	
  1801                           ;incstack = 0
  1802                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  1803                           
  1804  0004                     interrupt_function:	
  1805  007E                     saved_w	set	btemp
  1806  0004  00FE               	movwf	btemp
  1807  0005  0E03               	swapf	3,w
  1808  0006  00F2               	movwf	??_ISR+2
  1809  0007  0804               	movf	4,w
  1810  0008  00F3               	movwf	??_ISR+3
  1811  0009  080A               	movf	10,w
  1812  000A  00F4               	movwf	??_ISR+4
  1813  000B  1283               	bcf	3,5	;RP0=0, select bank0
  1814  000C  1303               	bcf	3,6	;RP1=0, select bank0
  1815  000D  087F               	movf	btemp+1,w
  1816  000E  00F5               	movwf	??_ISR+5
  1817  000F  120A  118A  2A56   	ljmp	_ISR
  1818                           
  1819                           	psect	text12
  1820  031A                     __ptext12:	
  1821 ;; *************** function _toggleFlag *****************
  1822 ;; Defined at:
  1823 ;;		line 203 in file "C:\Users\RetroGeek\Documents\GIT\ProteusLibrary\Shotclock Timer\ShotclockTimer.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;		None
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;		None
  1828 ;; Return value:  Size  Location     Type
  1829 ;;		None               void
  1830 ;; Registers used:
  1831 ;;		wreg, status,2, status,0
  1832 ;; Tracked objects:
  1833 ;;		On entry : 0/0
  1834 ;;		On exit  : 0/0
  1835 ;;		Unchanged: 0/0
  1836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1837 ;;      Params:         0       0       0       0       0
  1838 ;;      Locals:         0       0       0       0       0
  1839 ;;      Temps:          0       0       0       0       0
  1840 ;;      Totals:         0       0       0       0       0
  1841 ;;Total ram usage:        0 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; This function calls:
  1844 ;;		Nothing
  1845 ;; This function is called by:
  1846 ;;		_ISR
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           
  1851                           ;psect for function _toggleFlag
  1852  031A                     _toggleFlag:	
  1853                           
  1854                           ;ShotclockTimer.c: 205: if(flagPause == 0)
  1855                           
  1856                           ;incstack = 0
  1857                           ; Regs used in _toggleFlag: [wreg+status,2+status,0]
  1858  031A  1283               	bcf	3,5	;RP0=0, select bank0
  1859  031B  1303               	bcf	3,6	;RP1=0, select bank0
  1860  031C  085A               	movf	_flagPause+1,w
  1861  031D  0459               	iorwf	_flagPause,w
  1862  031E  1D03               	skipz
  1863  031F  2B25               	goto	i1l1041
  1864                           
  1865                           ;ShotclockTimer.c: 206: flagPause = 1;
  1866  0320  3001               	movlw	1
  1867  0321  00D9               	movwf	_flagPause
  1868  0322  3000               	movlw	0
  1869  0323  00DA               	movwf	_flagPause+1
  1870  0324  0008               	return
  1871  0325                     i1l1041:	
  1872                           
  1873                           ;ShotclockTimer.c: 208: else if(flagPause == 1)
  1874  0325  3001               	movlw	1
  1875  0326  0659               	xorwf	_flagPause,w
  1876  0327  045A               	iorwf	_flagPause+1,w
  1877  0328  1D03               	skipz
  1878  0329  0008               	return
  1879                           
  1880                           ;ShotclockTimer.c: 209: flagPause = 0;
  1881  032A  01D9               	clrf	_flagPause
  1882  032B  01DA               	clrf	_flagPause+1
  1883  032C  0008               	return
  1884  032D                     __end_of_toggleFlag:	
  1885  007E                     btemp	set	126	;btemp
  1886  007E                     wtemp	set	126
  1887  007E                     wtemp0	set	126
  1888  0080                     wtemp1	set	128
  1889  0082                     wtemp2	set	130
  1890  0084                     wtemp3	set	132
  1891  0086                     wtemp4	set	134
  1892  0088                     wtemp5	set	136
  1893  007F                     wtemp6	set	127
  1894  007E                     ttemp	set	126
  1895  007E                     ttemp0	set	126
  1896  0081                     ttemp1	set	129
  1897  0084                     ttemp2	set	132
  1898  0087                     ttemp3	set	135
  1899  007F                     ttemp4	set	127
  1900  007E                     ltemp	set	126
  1901  007E                     ltemp0	set	126
  1902  0082                     ltemp1	set	130
  1903  0086                     ltemp2	set	134
  1904  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        24
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     37      63
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    dispSTR@STR	PTR unsigned char  size(1) Largest target is 20
		 -> dispHeader@header(BANK0[20]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_dispHeader
    _dispHeader->___awdiv
    _initLCD->_instCtrl
    _dispSTR->_dataCtrl
    _beginCount->___awdiv
    _instCtrl->_delay
    _dataCtrl->_delay

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    7184
                         _beginCount
                         _dispHeader
 ---------------------------------------------------------------------------------
 (1) _dispHeader                                          28    28      0    3768
                                              9 BANK0     28    28      0
                            ___awdiv
                            ___awmod
                           _dataCtrl
                            _dispSTR
                            _initLCD
                           _instCtrl
 ---------------------------------------------------------------------------------
 (2) _initLCD                                              0     0      0     257
                           _instCtrl
 ---------------------------------------------------------------------------------
 (2) _dispSTR                                              4     4      0     417
                                              4 BANK0      4     4      0
                           _dataCtrl
 ---------------------------------------------------------------------------------
 (1) _beginCount                                           4     4      0    3416
                                              9 BANK0      4     4      0
                              _DAVBL
                            ___awdiv
                            ___awmod
                           _dataCtrl
                              _delay
                           _instCtrl
 ---------------------------------------------------------------------------------
 (2) _instCtrl                                             1     1      0     257
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _dataCtrl                                             1     1      0     257
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (3) _delay                                                3     1      2     226
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1603
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     835
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _DAVBL                                                2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  6     6      0       0
                                              0 COMMON     6     6      0
                         _toggleFlag
 ---------------------------------------------------------------------------------
 (6) _toggleFlag                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _beginCount
     _DAVBL
     ___awdiv
     ___awmod
     _dataCtrl
       _delay
     _delay
     _instCtrl
       _delay
   _dispHeader
     ___awdiv
     ___awmod
     _dataCtrl
       _delay
     _dispSTR
       _dataCtrl
         _delay
     _initLCD
       _instCtrl
         _delay
     _instCtrl
       _delay

 _ISR (ROOT)
   _toggleFlag

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     25      3F       5       78.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      6       A       1       71.4%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      49      12        0.0%
ABS                  0      0      49       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Fri Mar 03 22:48:10 2023

                      pc 0002              __CFG_CP$OFF 0000                       l84 0244  
                     l78 0232                       l88 0255             ___awdiv@sign 0026  
                     fsr 0004                      _GIE 005F                      _RB0 0030  
                    _RB5 0035                      _RB6 0036                      _RB7 0037  
           __CFG_CPD$OFF 0000                      _ISR 0256                      u705 022C  
                    u805 0196                      u815 01A2                      u825 01AC  
                    u905 01F2                      u915 01FB                      u940 00E0  
                    u695 034A                      u785 018A                      u885 01E1  
                    fsr0 0004                      indf 0000             ___awmod@sign 0026  
           __CFG_FOSC$XT 0000             __CFG_LVP$OFF 0000                     ?_ISR 0070  
                   l1103 033E                     l1203 01BE                     l1133 021D  
                   l1215 01D1                     l1241 020D                     l1233 01FA  
                   l1313 02D6                     l1139 0238                     l1147 0248  
                   l1171 0174                     l1227 01DE                     l1219 01D8  
                   l1229 01EC                     l1237 0205                     l1157 0289  
                   l1335 024D                     l1177 017F                     l1195 01AB  
                   l1187 0187                     l1291 002B                     l1189 0195  
                   l1293 00C6                     l1285 00A5                     l1199 01B6  
                   l1287 00B4                     _T0IE 005D                     _T0IF 005A  
                   _INTE 005C                     _INTF 0059             __CFG_WRT$OFF 0000  
                   _main 02C3                     btemp 007E            __CFG_BOREN$ON 0000  
                   ltemp 007E                     start 0012                     ttemp 007E  
                   wtemp 007E                    ??_ISR 0070                    ?_main 0070  
        __end_of___awdiv 01C5            __CFG_WDTE$OFF 0000          __end_of___awmod 0214  
                  _DAVBL 0214          ___awdiv@divisor 0020                    i1l118 026D  
        ___awdiv@counter 0025                    _PORTC 0007                    _PORTD 0008  
                  _TRISB 0086                    _TRISC 0087                    _TRISD 0088  
          __CFG_PWRTE$ON 0000          __end_of_dispSTR 02A6          __end_of_initLCD 02C3  
                  _delay 033E                    pclath 000A                    ltemp0 007E  
                  ltemp1 0082                    ltemp2 0086                    ltemp3 0080  
                  ttemp0 007E                    ttemp1 0081                    ttemp2 0084  
                  ttemp3 0087                    ttemp4 007F                    status 0003  
                  wtemp0 007E                    wtemp1 0080                    wtemp2 0082  
                  wtemp3 0084                    wtemp4 0086                    wtemp5 0088  
                  wtemp6 007F          __initialization 0015             __end_of_main 02DC  
                 ??_main 0045                   ?_DAVBL 0070         dispHeader@header 002D  
       dispHeader@secLSB 0041         dispHeader@secMSB 0043                   ?_delay 0020  
       ___awdiv@dividend 0022                DAVBL@DATA 0020                   i1l1041 0325  
                 i1l1073 026B                   i1l1079 0276         __end_of_dataCtrl 031A  
              ??___awdiv 0024                ??___awmod 0024         ___awdiv@quotient 0027  
        ___awmod@divisor 0020         __end_of_instCtrl 0307          ___awmod@counter 0025  
              ??_dispSTR 0024                ??_initLCD 0024                   saved_w 007E  
__end_of__initialization 0027            __end_of_DAVBL 0256           __pcstackCOMMON 0070  
           __pidataBANK0 02DC            __end_of_delay 034F                  ??_DAVBL 0020  
             _beginCount 002B                  ??_delay 0022               __pbssBANK0 005D  
             __pmaintext 02C3               __pintentry 0004               _dispHeader 00CB  
              ?_dataCtrl 0070                ?_instCtrl 0070               _count_flag 0076  
                ___awdiv 0168                  ___awmod 01C5                  _dispSTR 0284  
                __ptext1 00CB                  __ptext2 02A6                  __ptext3 0284  
                __ptext4 002B                  __ptext5 02F4                  __ptext6 0307  
                __ptext7 033E                  __ptext8 01C5                  __ptext9 0168  
                _dispSec 005D                  _initLCD 02A6             __size_of_ISR 002E  
             ??_dataCtrl 0023         ___awmod@dividend 0022               delay@timer 0020  
                _seconds 005B              ?_beginCount 0070     end_of_initialization 0027  
             ??_instCtrl 0023         beginCount@secLSB 0029         beginCount@secMSB 002B  
             dispSTR@STR 0025              ?_dispHeader 0070               _toggleFlag 031A  
           instCtrl@INST 0023      __size_of_beginCount 00A0          dispHeader@F1116 0045  
    start_initialization 0015              __end_of_ISR 0284             dataCtrl@DATA 0023  
    __size_of_dispHeader 009D               init_fetch0 032D              __pdataBANK0 0045  
            ?_toggleFlag 0070              __pbssCOMMON 0076                ___latbits 0002  
          __pcstackBANK0 0020        __size_of_dataCtrl 0013        __size_of_instCtrl 0013  
              _flagPause 0059                 ?___awdiv 0020                 ?___awmod 0020  
               ?_dispSTR 0070           __size_of_DAVBL 0042                 ?_initLCD 0070  
           ??_beginCount 0029           __size_of_delay 0011        interrupt_function 0004  
    __size_of_toggleFlag 0013       __end_of_beginCount 00CB             ??_dispHeader 0029  
     __end_of_dispHeader 0168         __size_of___awdiv 005D         __size_of___awmod 004F  
       __size_of_dispSTR 0022                 _dataCtrl 0307                 _dataRead 0078  
       __size_of_initLCD 001D                 __ptext10 0214                 __ptext11 0256  
               __ptext12 031A            __size_of_main 0019                 _instCtrl 02F4  
               dispSTR@i 0026             ??_toggleFlag 0070                 init_ram0 0331  
               intlevel1 0000       __end_of_toggleFlag 032D               _OPTION_REG 0081  
